{"version":3,"sources":["components/aoc1.js","components/aoc2.js","components/aoc3.js","App.js","index.js"],"names":["adminauthtoken","Aoc1","useState","wname","setwname","wdesc","setwdesc","isLoading","setLoading","notifystatus","setnotifystatus","err1status","seterr1status","err2status","seterr2status","err3status","seterr3status","err4status","seterr4status","Form","onSubmit","e","preventDefault","trim","a","process","REACT_APP_mode","headers","fetch","response","json","result","def_wksp_node","reqbody","method","body","JSON","stringify","resp","status","resp1","wcreate","TextInput","type","id","labelText","placeholder","size","value","onChange","target","className","Button","Loading","active","description","withOverlay","iconDescription","subtitle","timeout","onClose","kind","title","Aoc2","email","setemail","user","setuser","workspace","setworkspace","erremstate","seterremstate","erremtext","seterremtext","buttonstate","setbuttonstate","wobj","setWobj","userobj","setUserobj","notifystatus2","setnotify2status","notifystatus3","setnotify3status","err5status","seterr5status","err6status","seterr6status","err7status","seterr7status","err8status","seterr8status","userperms","userperm","setuserperm","usercreate","invalid","invalidText","match","disabled","Select","event","map","item","i","SelectItem","text","onClick","wk_arr","length","list_wksp","push","listworkspace","user_arr","user_idemail","listusers","userdel","can_invite_by_email","manager","member_id","member_type","storage_allowed","workspace_id","addmember","userauthtoken","Aoc3","pkgname","setpkgname","pkg","setpkg","file","setfile","fileobj","setfileobj","pkgobj","setpkgobj","name","nodeurl","toString","n","lastIndexOf","substring","homefileid","finalurl","concat","REACT_APP_ASPERA_ACCESS_KEY","file_list","file_names","listfiles","Style","def_wksp_id","pid","reqbody1","pkgcreate","pkg_arr","list_pkg","listpkgs","App","prefix","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7adc4638.chunk.js","sourcesContent":["import React, { useState} from 'react';\nimport raw from 'raw.macro';\nimport { Button,TextInput, Form, Loading, ToastNotification } from 'carbon-components-react';\n\nconst adminauthtoken = raw('../auth/adminauth.txt');\n\nfunction Aoc1() {\n  const [wname, setwname] = useState('');\n  const [wdesc, setwdesc] = useState('');\n  const [isLoading,setLoading] = useState(false);\n  const [notifystatus, setnotifystatus] = useState(false);\n  const [err1status, seterr1status] = useState(false);  \n  const [err2status, seterr2status] = useState(false);\n  const [err3status, seterr3status] = useState(false);\n  const [err4status, seterr4status] = useState(false);\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    if ((wname) && (wname.trim() !== \"\")) {\n\n        const wcreate = async() => {\n\n        try{\n\n           if(process.env.REACT_APP_mode === \"dev\"){\n              let headers = {\n                  'accept': 'application/json',\n                  'Authorization': adminauthtoken\n                  }\n\n              let response = await fetch(`https://api.ibmaspera.com/api/v1/admin/nodes`,{ headers})\n              let result = await response.json();\n\n              var def_wksp_node = result[0][\"id\"];\n\n              var reqbody = { \"name\": wname, \"description\": wdesc, \"node_id\": def_wksp_node }\n\n              headers = \n                {\n                    'accept': 'application/json',\n                    'content-type': 'application/json',\n                    'Authorization': adminauthtoken\n                  }\n\n              response = await fetch('https://api.ibmaspera.com/api/v1/admin/workspaces', { method: \"POST\", body: JSON.stringify(reqbody), json: true, headers})\n              result = await response.json();\n              let resp = await response;\n              \n              if((resp.status === 204) || (resp.status === 202) ){\n                setnotifystatus(true);\n                setLoading(false);\n              }\n              else if(resp.status === 401){\n                seterr1status(true);\n                setLoading(false);\n              }\n\n              else{\n                seterr3status(true);\n                setLoading(false);\n              }          \n        }\n      else{\n\n        let resp1 = await fetch('/addworkspace?wname=' + wname + '&wdesc=' + wdesc);\n        let res1 = await resp1.json();\n        if(res1[\"result\"] === \"success\"){\n           setnotifystatus(true);\n           setLoading(false);\n        }\n        else{\n           seterr3status(true);\n           setLoading(false);\n        }\n      \n      }\n    }\n        catch(error){\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        wcreate();\n\n      setwname('');\n      setwdesc('');\n    } \n    \n    else {\n      seterr4status(true);\n      setLoading(false);\n    }\n  };\n\n  function notifystatusf() {\n    setnotifystatus(false);\n  }\n  function err1closef() {\n    seterr1status(false);\n  }\n  function err2closef() {\n    seterr2status(false);\n  }\n  function err3closef() {\n    seterr3status(false);\n  }\n  function err4closef() {\n    seterr4status(false);\n  }\n  return (\n    <>\n    <Form onSubmit={handleSubmit}>\n      <TextInput type = \"text\" id={'wname'} labelText = {'Workspace Name*'} placeholder = {'Workspace Name'} size = 'lg' value={wname} onChange={(e)=> setwname(e.target.value)} />\n      <br/>\n      <br/>\n      <TextInput type = \"text\" id={'wdesc'} labelText = {'Workspace Description'} placeholder = {'Workspace Description'} size = 'lg' value={wdesc} onChange={(e)=> setwdesc(e.target.value)} />\n\n      <div className=\"ButtonArea\">\n        <Button type=\"submit\" > Create Workspace </Button>\n      </div>\n      \n    </Form>\n\n      <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n      {notifystatus && \n        <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Workspace created successfully</span>}\n        timeout={4000}\n        onClose = {notifystatusf}\n        kind = 'success'\n        title=\"Success Notification\"\n        />\n      }\n\n       {err1status && \n      <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Unauthorised credentials. Restart to refresh your tokens</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n      {err2status && \n      <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Server cannot be reached</span>}\n        timeout={3000}\n        onClose = {err2closef}\n        title=\"Error Notification\"\n      />\n      }\n      \n      {err3status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>Workspace creation failed</span>}\n          timeout={3000}\n          onClose = {err3closef}\n          title=\"Error Notification\"\n        />\n      }\n      \n      {err4status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>Invalid input. Specify workspace name</span>}\n          timeout={3000}\n          onClose = {err4closef}\n          title=\"Error Notification\"\n        />\n      }\n\n\n    <br/>\n    <br/>\n    </>\n  );\n};\n\nexport default Aoc1;","import React, { useState} from 'react';\nimport raw from 'raw.macro';\nimport { Button,TextInput, Form, Loading, Select, SelectItem, ToastNotification } from 'carbon-components-react';\n\nconst adminauthtoken = raw('../auth/adminauth.txt');\n\nfunction Aoc2() {\n  const [email, setemail] = useState('');\n  const [user, setuser] = useState('');\n  const [workspace, setworkspace] = useState('');\n  const [erremstate, seterremstate] = useState(false); \n  const [erremtext, seterremtext] = useState('A valid email is required');\n  const [buttonstate, setbuttonstate] = useState(false);\n\n  const [wobj, setWobj] = useState([]);\n  const [userobj, setUserobj] = useState([]);\n  const [isLoading,setLoading] = useState(false);\n\n  const [notifystatus, setnotifystatus] = useState(false);\n  const [notifystatus2, setnotify2status] = useState(false);\n  const [notifystatus3, setnotify3status] = useState(false);\n  const [err1status, seterr1status] = useState(false);  \n  const [err2status, seterr2status] = useState(false);\n  const [err3status, seterr3status] = useState(false);\n  const [err4status, seterr4status] = useState(false);\n  const [err5status, seterr5status] = useState(false);\n  const [err6status, seterr6status] = useState(false);\n  const [err7status, seterr7status] = useState(false);\n  const [err8status, seterr8status] = useState(false);\n\n  const userperms = [\n    {\n      id: true,\n      value: 'Member',\n    },\n    {\n      id: false,\n      value: 'Workspace Manager',\n    }\n  ];\n\n  const [userperm, setuserperm] = useState(userperms[0].id);\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    if (email) {\n\n        const usercreate = async() => {\n\n        try{\n\n           if(process.env.REACT_APP_mode === \"dev\"){\n\n            let headers = {\n          'content-type': 'application/json',\n          'accept': 'application/json',\n          'Authorization': adminauthtoken,\n        };\n\n            var reqbody = { \"email\": email, \"auth_provider_id\": null };\n\n            let response = await fetch(`https://api.ibmaspera.com/api/v1/admin/users`,{ method: \"POST\", body: JSON.stringify(reqbody), json: true, headers})\n            let resp = await response;\n\n          if(resp.status === 201){\n              setnotifystatus(true);\n              setLoading(false);\n            }\n             else if(resp.status === 401){\n              seterr1status(true);\n              setLoading(false);\n            }\n          else{\n            seterr4status(true);\n            setLoading(false);\n          }\n          \n        }\n      else{\n\n          let response = await fetch('/adduser?useremail=' + email)\n          let result = await response.json();\n           if (result[\"result\"] === \"success\") {\n              setnotifystatus(true);\n              setLoading(false);\n           }\n           else{\n              seterr4status(true);\n              setLoading(false);\n           }\n      }\n      }\n        catch(error){\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        usercreate();\n\n      setemail('');\n    } \n    \n    else {\n      seterr3status(true);\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit1 = () => {\n\n        setLoading(true);\n\n        const listworkspace = async() => {\n\n        try{\n\n           if(process.env.REACT_APP_mode === \"dev\"){\n\n            let headers = {\n              'accept': 'application/json',\n              'Authorization': adminauthtoken,\n            };\n\n            let response = await fetch(`https://api.ibmaspera.com/api/v1/admin/workspaces`, {headers})\n            let result = await response.json();\n            let resp = await response;\n\n             if(resp.status === 200){\n              \n              let wk_arr = [{id:\"\",value:\"Choose Workspace\"}];\n\n              for (var i = 0; i < result.length; i++) {\n                let list_wksp = {};\n                list_wksp[\"id\"] = result[i][\"id\"];\n                list_wksp[\"value\"] = result[i][\"name\"]\n                wk_arr.push(list_wksp)\n              }\n\n              setWobj(wk_arr);\n              setLoading(false);\n            }\n             else if(resp.status === 401){\n              seterr1status(true);\n              setLoading(false);\n            }\n\n            else{\n              seterr5status(true);\n              setLoading(false);\n            }\n          \n        \n      }\n      else{\n          let response = await fetch(\"/getworkspace\");\n          let result = await response.json();\n          \n          if(result[\"result\"] === \"failure\"){\n            seterr5status(true);\n            setLoading(false);\n          }\n\n          else{\n            setWobj(result[\"result\"]);\n            setLoading(false);\n          }\n      }\n    }\n        catch(error){\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        listworkspace();\n  };\n\n  const handleSubmit2 = () => {\n\n        setLoading(true);\n\n        const listusers = async() => {\n\n        try{\n\n           if(process.env.REACT_APP_mode === \"dev\"){\n            let headers = {\n          'accept': 'application/json',\n          'Authorization': adminauthtoken,\n          };\n\n            let response = await fetch(`https://api.ibmaspera.com/api/v1/admin/users`, {headers})\n            let result = await response.json();\n            let resp = await response;\n\n             if(resp.status === 200){\n\n            let user_arr = [{id:\"\",value:\"Choose User\"}];\n            for (var i = 0; i < result.length; i++) {\n              let user_idemail = {};\n              user_idemail[\"id\"] = result[i][\"id\"];\n              user_idemail[\"value\"] = result[i][\"email\"]\n              user_arr.push(user_idemail)\n            }\n\n            setUserobj(user_arr);\n            setLoading(false);\n          }\n           else if(resp.status === 401){\n              seterr1status(true);\n              setLoading(false);\n            }\n          \n          else{\n              seterr5status(true);\n              setLoading(false);\n            }\n        }\n\n        else{\n            let response = await fetch(\"/getusers\");\n            let result = await response.json();\n\n            if(result[\"result\"] === \"failure\"){\n              seterr5status(true);\n              setLoading(false);\n            }\n            else{\n              setUserobj(result[\"result\"]);\n              setLoading(false);\n            }\n\n        }\n      }\n        catch(error){\n            setLoading(false);\n            seterr2status(true);\n        }\n\n        }\n        listusers();\n\n  };\n\n  const handledel = () => {\n    setLoading(true);\n\n    if (user) {\n\n        const userdel = async() => {\n\n        try{\n           if(process.env.REACT_APP_mode === \"dev\"){\n\n            let headers = {\n              'accept': 'application/json',\n              'Authorization': adminauthtoken,\n            }\n\n            let response = await fetch(`https://api.ibmaspera.com/api/v1/admin/users/${user}`,{ method: \"DELETE\", headers})\n            let result = await response;\n        \n            if(result.status === 204){\n              setnotify2status(true);\n            }\n\n             else if(result.status === 401){\n              seterr1status(true);\n              setLoading(false);\n            }\n\n            else{\n              seterr6status(true);\n            }\n\n            setUserobj([]);\n            setLoading(false);\n        }\n        else{\n          let response = await fetch('/deluser?userid=' + user)\n          let result = await response.json();\n\n          if(result[\"result\"] === \"success\"){\n            setnotify2status(true);\n          }\n\n          else{\n            seterr6status(true);\n          }\n          \n          setUserobj([]);\n          setLoading(false);\n\n        }\n      }\n        catch(error){\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        userdel();\n    } \n    else {\n      seterr3status(true);\n      setLoading(false);\n    }\n  };\n\n  const handlemember = () => {\n    setLoading(true);\n\n    if (user && workspace) {\n\n        const addmember = async() => {\n\n        try{\n\n           if(process.env.REACT_APP_mode === \"dev\"){\n\n            let reqbody = {\n            can_invite_by_email: false,\n            manager: userperm,\n            member_id: user,\n            member_type: 'user',\n            storage_allowed: false,\n            workspace_id: workspace\n          };\n\n            let headers = {\n              'content-type': 'application/json',\n              'accept': 'application/json',\n              'Authorization': adminauthtoken,\n             };\n\n\n            let response = await fetch(`https://api.ibmaspera.com/api/v1/admin/workspace_memberships`,{ method: \"POST\", body: JSON.stringify(reqbody), json: true, headers})\n            let resp = await response;\n        \n             if((resp.status === 202) || (resp.status === 204) ){\n              setnotify3status(true);\n              setuser('');\n              setworkspace('');\n              setUserobj([]);\n              setWobj([]);\n              setLoading(false);\n            }\n             else if(resp.status === 401){\n              seterr1status(true);\n              setLoading(false);\n            }\n            else{\n              seterr7status(true);\n              setuser('');\n              setworkspace('');\n              setUserobj([]);\n              setWobj([]);\n              setLoading(false);\n            }          \n        }\n        else{\n\n          let response = await fetch(\"/addmember?wid=\" + workspace + \"&userperms=\" + userperm + \"&userid=\" + user)\n          let result = await response.json();\n          \n          if(result[\"result\"] === \"success\"){\n              setnotify3status(true);\n              setuser('');\n              setworkspace('');\n              setUserobj([]);\n              setWobj([]);\n              setLoading(false);\n          }\n          else{\n              seterr7status(true);\n              setuser('');\n              setworkspace('');\n              setUserobj([]);\n              setWobj([]);\n              setLoading(false);\n          }\n        }\n      }\n        catch(error){\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        addmember();\n    } \n    \n    else {\n      seterr8status(true);\n      setLoading(false);\n    }\n  };\n\n  const handleuserselect = (event) => {\n  setuser(event.target.value);\n}\n\n  const handleworkspaceselect = (event) => {\n  setworkspace(event.target.value);\n}\n\n  function notifystatusf() {\n    setnotifystatus(false);\n  }\n  \n  function notifystatusf2() {\n    setnotify2status(false);\n  }\n  function notifystatusf3() {\n    setnotify3status(false);\n  }\n\n  function err1closef() {\n    seterr1status(false);\n  }\n  function err2closef() {\n    seterr2status(false);\n  }\n  \n  function err3closef() {\n    seterr3status(false);\n  }\n  \n  function err4closef() {\n    seterr4status(false);\n  }\n  \n  function err5closef() {\n    seterr5status(false);\n  }\n\n  function err6closef() {\n    seterr6status(false);\n  }\n  function err7closef() {\n    seterr7status(false);\n  }\n  \n  function err8closef() {\n    seterr8status(false);\n  }\n\nconst validEmail = (e) => {\n\n      if(!e.target.value.match(/^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$/)){\n              seterremstate(true)\n              seterremtext(\"Valid Email format required\");\n              setbuttonstate(true)\n           }\n      else{\n            seterremstate(false)\n            setbuttonstate(false)\n        }        \n            \n      setemail(e.target.value)\n    \n  }\n\n  return (\n    <>\n\n    <Form onSubmit={handleSubmit}>\n      <TextInput type = \"text\" id={'email'} invalid = {erremstate} invalidText = {erremtext}  labelText = {'Email*'} placeholder = {'Email'} size = 'lg' value={email} onChange={validEmail} />\n\n      <div className=\"TButtonArea\">\n        <Button kind=\"tertiary\" type=\"submit\" disabled = {buttonstate} > Add User </Button>\n      </div>\n      \n    </Form>\n\n     <Select labelText=\"Workspace*\" size = \"lg\" value={workspace} onChange={handleworkspaceselect}>\n          {wobj.map((item, i) => (\n              <SelectItem value={item.id} key={i} text = {item.value} />\n                            ))}\n      </Select>\n\n      <div className=\"TButtonArea\">\n        <Button kind=\"tertiary\" type=\"submit\" onClick={handleSubmit1} > List Workspaces </Button>\n      </div>\n    \n\n    <br/>\n    <br/>\n\n    <h2> User Permissions </h2>\n    <br/>\n    <br/>\n\n      <Select labelText=\"Permission Type*\" size = \"lg\" value={userperm} onChange={e => setuserperm(e.target.value)}>\n          {userperms.map((item, i) => (\n              <SelectItem value={item.id} key={i} text = {item.value} />\n                            ))}\n      </Select>\n    \n    <br/>\n\n      <Select labelText=\"User*\" size = \"lg\" value={user} onChange={handleuserselect}>\n          {userobj.map((item, i) => (\n              <SelectItem value={item.id} key={i} text = {item.value} />\n                            ))}\n      </Select>\n\n      <div className=\"TButtonArea\">\n        <Button kind=\"tertiary\" type=\"submit\" onClick={handleSubmit2} > List Users </Button>\n      </div>\n\n\n      <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n\n    <div className=\"ButtonArea\">\n        <Button kind=\"secondary\" type=\"submit\" onClick={handledel}> Delete Existing User </Button>\n        <Button type=\"submit\" onClick={handlemember}> Create Membership </Button>\n    </div>\n\n    {notifystatus && \n        <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>User added successfully</span>}\n        timeout={4000}\n        onClose = {notifystatusf}\n        kind = 'success'\n        title=\"Success Notification\"\n        />\n      }\n\n    {notifystatus2 && \n        <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>User deleted successfully</span>}\n        timeout={4000}\n        onClose = {notifystatusf2}\n        kind = 'success'\n        title=\"Success Notification\"\n        />\n      }\n\n    {notifystatus3 && \n        <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Membership created successfully</span>}\n        timeout={4000}\n        onClose = {notifystatusf3}\n        kind = 'success'\n        title=\"Success Notification\"\n        />\n      }\n\n       {err1status && \n      <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Unauthorised credentials. Restart to refresh your tokens</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n      {err2status && \n      <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Server cannot be reached</span>}\n        timeout={3000}\n        onClose = {err2closef}\n        title=\"Error Notification\"\n      />\n      }\n      {err3status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>Invalid input provided. Specify user to be added</span>}\n          timeout={3000}\n          onClose = {err3closef}\n          title=\"Error Notification\"\n        />\n      }\n      {err4status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>User could not be added</span>}\n          timeout={3000}\n          onClose = {err4closef}\n          title=\"Error Notification\"\n        />\n      }\n      \n      {err5status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>Operation cannot be done</span>}\n          timeout={3000}\n          onClose = {err5closef}\n          title=\"Error Notification\"\n        />\n      }\n     \n     {err6status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>User could not be deleted</span>}\n          timeout={3000}\n          onClose = {err6closef}\n          title=\"Error Notification\"\n        />\n      }\n     \n     {err7status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>Membership could not be created</span>}\n          timeout={3000}\n          onClose = {err7closef}\n          title=\"Error Notification\"\n        />\n      }\n    \n    {err8status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>Invalid inputs provided. Specify user, workspace and permission type</span>}\n          timeout={3000}\n          onClose = {err8closef}\n          title=\"Error Notification\"\n        />\n      }\n\n  \n  <br/>\n  <br/>\n    </>\n  );\n};\n\nexport default Aoc2;","import React, { useState} from 'react';\nimport raw from 'raw.macro';\nimport { Button,TextInput, Loading, Select, SelectItem, ToastNotification  } from 'carbon-components-react';\n\nconst adminauthtoken = raw('../auth/adminauth.txt');\nconst userauthtoken = raw('../auth/userauth.txt');\nconst nuserauthtoken = raw('../auth/nodeauth.txt');\n\nfunction Aoc3() {\n  const [pkgname, setpkgname] = useState('');\n  const [user, setuser] = useState('');\n  const [pkg,setpkg] = useState('');\n  const [file, setfile] = useState('');\n  const [fileobj,setfileobj] = useState([]);\n  const [userobj, setUserobj] = useState([]);\n  const [pkgobj, setpkgobj] = useState([]);\n  const [isLoading,setLoading] = useState(false);\n\n  const [notifystatus, setnotifystatus] = useState(false);\n  const [err1status, seterr1status] = useState(false);  \n  const [err2status, seterr2status] = useState(false);\n  const [err3status, seterr3status] = useState(false);\n  const [err4status, seterr4status] = useState(false);\n  const [err5status, seterr5status] = useState(false);\n\n\n  const handleSubmit = () => {\n\n    setLoading(true);\n\n    if ((pkgname && user && file) && (pkgname.trim() !== \"\")) {\n\n        const pkgcreate = async() => {\n\n        try{\n\n           if(process.env.REACT_APP_mode === \"dev\"){\n\n            let headers = {\n              'Authorization': adminauthtoken,\n            };\n\n            let response = await fetch(`https://api.ibmaspera.com/api/v1/admin/workspaces`,{ headers})\n            let result = await response.json();\n\n            let def_wksp_id = result[0][\"id\"];\n\n            headers = {\n              'content-type': 'application/json',\n              'accept': 'application/json',\n              'Authorization': userauthtoken,\n            }\n\n            let reqbody =\n              {\n                \"recipients\": [{ \"id\": user, \"type\": \"user\" }],\n                \"upload_notification_recipients\": [],\n                \"download_notification_recipients\": [], \"bcc_recipients\": [],\n                \"file_names\": [file],\n                \"name\": pkgname,\n                \"workspace_id\": def_wksp_id,\n                \"encryption_at_rest\": false,\n                \"single_source\": true,\n                \"read\": true,\n                \"transfers_expected\": 1\n              }\n\n            response = await fetch(`https://api.ibmaspera.com/api/v1/packages`,{ method: \"POST\", body: JSON.stringify(reqbody), json: true, headers})\n            result = await response.json();\n\n            let pid = result[\"id\"];\n            let reqbody1 = {\n              \"sent\": true,\n              \"transfers_expected\": 1\n            };\n\n            headers = \n              {\n                'content-type': 'application/json',\n                'accept': 'application/json',\n                'Authorization': userauthtoken,\n              }\n            \n            response = await fetch(`https://api.ibmaspera.com/api/v1/packages/${pid}`,{ method: \"PUT\", body: JSON.stringify(reqbody1), json: true, headers})\n            result = await response;\n\n            if(result.status === 204){\n              setnotifystatus(true);\n              setpkgname('');\n              setuser('');\n              setfile('');\n              setUserobj([]);\n              setfileobj([]);\n              setLoading(false);\n            }\n            \n            else if(result.status === 401){\n              seterr1status(true);\n              setLoading(false);\n            }\n\n            else{\n              seterr3status(true);\n              setpkgname('');\n              setuser('');\n              setfile('');\n              setUserobj([]);\n              setfileobj([]);\n              setLoading(false);\n            } \n        }\n        else{\n          let response = await fetch(\"/sendpackages?pkgname=\" + pkgname + \"&filepkg=\" + file + \"&userid=\" + user)\n          let result = await response.json();\n\n          if(result[\"result\"] === \"success\"){\n              setnotifystatus(true);\n              setpkgname('');\n              setuser('');\n              setfile('');\n              setUserobj([]);\n              setfileobj([]);\n              setLoading(false);\n          }\n          else{\n              seterr3status(true);\n              setpkgname('');\n              setuser('');\n              setfile('');\n              setUserobj([]);\n              setfileobj([]);\n              setLoading(false);\n          }\n\n        }\n      }\n        catch(error){\n            seterr2status(true);\n            setLoading(false);\n        }\n        }\n        pkgcreate();\n    } \n    \n    else {\n      seterr4status(true);\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit1 = () => {\n\n    setLoading(true);\n\n        const listfiles = async() => {\n\n        try{\n            \n          if(process.env.REACT_APP_mode === \"dev\"){\n\n            let headers = {\n                'content-type': 'application/json',\n                'accept': 'application/json',\n                'Authorization': adminauthtoken,\n                }\n\n            let response = await fetch(`https://api.ibmaspera.com/api/v1/admin/nodes`, {headers})\n            let result = await response.json();\n            let rp = await response;\n\n             if(rp.status === 401){\n              seterr1status(true);\n              setLoading(false);\n            }\n            else{\n              var nodeurl = result[0][\"url\"].toString();\n              var n = nodeurl.lastIndexOf(\":\");\n              nodeurl = nodeurl.substring(0, n);\n\n              headers = {\n              'accept': 'application/json',\n              'Authorization': adminauthtoken,\n              }\n\n              response = await fetch(`https://api.ibmaspera.com/api/v1/admin/workspaces`, {headers})\n              result = await response.json();\n\n              var homefileid = result[0][\"home_file_id\"].toString();\n              var finalurl = nodeurl.concat('/files/').concat(homefileid).concat('/files');\n\n              headers = {\n                  'X-Aspera-AccessKey': process.env.REACT_APP_ASPERA_ACCESS_KEY,\n                  'Authorization': nuserauthtoken\n                }\n\n              response = await fetch(`${finalurl}`, {headers})\n              result = await response.json();\n              let resp = await response;\n\n              if(resp.status === 200){\n\n                let file_list = [{id:\"\", name:\"Choose File\"}];\n                \n                  for (var i = 0; i < result.length; i++) {\n                    let file_names = {};\n                    file_names[\"id\"] = result[i][\"name\"];\n                    file_names[\"name\"] = result[i][\"name\"];\n                    file_list.push(file_names);\n                  }\n\n                setfileobj(file_list);\n                setLoading(false);\n              }\n\n              else{\n                seterr5status(true);\n                setLoading(false);\n              }\n            }\n        }\n      \n        else{\n          let response = await fetch(\"/getfiles\");\n          let result = await response.json();\n\n           if(result[\"result\"] === \"failure\"){\n                seterr5status(true);\n                setLoading(false);\n          }\n\n          else{\n            setfileobj(result[\"result\"]);\n            setLoading(false);\n          }\n\n        }\n      }\n        catch(error){\n            setLoading(false);\n            seterr2status(true);\n        }\n\n        }\n        listfiles();\n  };\n\n  const handleSubmit2 = () => {\n\n    setLoading(true);\n\n        const listusers = async() => {\n\n        try{\n\n          if(process.env.REACT_APP_mode === \"dev\"){\n\n            let headers = {\n            'accept': 'application/json',\n            'Authorization': adminauthtoken,\n          };\n\n            let response = await fetch(`https://api.ibmaspera.com/api/v1/admin/users`, {headers})\n            let result = await response.json();\n        \n            let resp = await response;\n\n             if(resp.status === 200){\n\n            let user_arr = [{id:\"\",value:\"Choose User\"}];\n            for (var i = 0; i < result.length; i++) {\n              let user_idemail = {};\n              user_idemail[\"id\"] = result[i][\"id\"];\n              user_idemail[\"value\"] = result[i][\"email\"]\n              user_arr.push(user_idemail)\n            }\n\n            setUserobj(user_arr);\n            setLoading(false);\n          }\n\n           else if(resp.status === 401){\n              seterr1status(true);\n              setLoading(false);\n            }\n          \n          else{\n              seterr5status(true);\n              setLoading(false);\n            }\n        }\n        else{\n            let response = await fetch(\"/getusers\");\n            let result = await response.json();\n\n            if(result[\"result\"] === \"failure\"){\n              seterr5status(true);\n              setLoading(false);\n            }\n            else{\n              setUserobj(result[\"result\"]);\n              setLoading(false);\n            }\n        }\n      }\n        catch(error){\n            setLoading(false);\n            seterr2status(true);\n        }\n\n        }\n        listusers();\n\n  };\n\n  const handleSubmit3 = () => {\n\n    setLoading(true);\n\n        const listpkgs = async() => {\n\n        try{\n            \n          if(process.env.REACT_APP_mode === \"dev\"){\n\n            let headers = {\n            'accept': 'application/json',\n            'Authorization': adminauthtoken,\n          }\n\n            let response = await fetch(`https://api.ibmaspera.com/api/v1/admin/packages?package_sent=true&deleted=false&include_draft=false&received=true`, {headers})\n            let result = await response.json();\n            let resp = await response;\n        \n             if(resp.status === 200){\n\n              let pkg_arr = []\n              for (var i = 0; i < result.length; i++) {\n                let list_pkg = {};\n                list_pkg[\"id\"] = result[i][\"id\"];\n                list_pkg[\"value\"] = result[i][\"name\"]\n                pkg_arr.push(list_pkg)\n              }\n\n              setpkgobj(pkg_arr);\n              setLoading(false);\n          }\n           else if(resp.status === 401){\n              seterr1status(true);\n              setLoading(false);\n            }\n          \n          else{\n              seterr5status(true);\n              setLoading(false);\n            }\n          \n        }\n        else{\n            let response = await fetch(\"/getpackages\");\n            let result = await response.json();\n\n            if(result[\"result\"] === \"failure\"){\n              seterr5status(true);\n              setLoading(false);\n            }\n            else{\n              setpkgobj(result[\"result\"]);\n              setLoading(false);\n            }\n        }\n      }\n        catch(error){\n            setLoading(false);\n            seterr2status(true);\n        }\n\n        }\n        listpkgs();\n  };\n\n  const handlefileselect = (event) => {\n  setfile(event.target.value);\n  }\n\n  const handleuserselect = (event) => {\n  setuser(event.target.value);\n  }\n\n  const handlepkgselect = (event) => {\n  setpkg(event.target.value);\n  }\n\n  function notifystatusf() {\n    setnotifystatus(false);\n  }\n  function err1closef() {\n    seterr1status(false);\n  }\n  function err2closef() {\n    seterr2status(false);\n  }\n  function err3closef() {\n    seterr3status(false);\n  }\n  function err4closef() {\n    seterr4status(false);\n  }\n  \n  function err5closef() {\n    seterr5status(false);\n  }\n\n\n  return (\n    <>\n\n      <TextInput type = \"text\" id={'pkgname'} labelText = {'Package Name*'} placeholder = {'Package Name'} size = 'lg' value={pkgname} onChange={(e)=> setpkgname(e.target.value)} />\n      <br/>\n      <br/>\n       <Select labelText=\"Choose File*\" size = \"lg\" value={file} onChange={handlefileselect}>\n          {fileobj.map((item, i) => (\n              <SelectItem value={item.id} key={i} text = {item.name} />\n                            ))}\n      </Select>\n\n      <div className=\"TButtonArea\">\n        <Button kind=\"tertiary\" type=\"submit\" onClick={handleSubmit1} > List Files </Button>\n      </div>\n\n      <br/>\n\n      <Select labelText=\"Choose Recipient*\" size = \"lg\" value={user} onChange={handleuserselect}>\n          {userobj.map((item, i) => (\n              <SelectItem value={item.id} key={i} text = {item.value} />\n                            ))}\n      </Select>\n\n      <div className=\"TButtonArea\">\n        <Button kind=\"tertiary\" type=\"submit\" onClick={handleSubmit2} > List Users </Button>\n      </div>\n\n\n      \n      <div className=\"PButtonArea\" Style=\"padding-top: 16px;\">\n        <Button type=\"submit\" onClick={handleSubmit}> Send Package </Button>\n      </div>\n\n<br/>\n<br/>\n\n  <h2>Existing Packages</h2>\n  <br/>\n  <br/>\n\n <Select labelText=\"View Packages\" size = \"lg\" value={pkg} onChange={handlepkgselect}>\n          {pkgobj.map((item, i) => (\n              <SelectItem value={item.id} key={i} text = {item.value} />\n                            ))}\n  </Select>\n\n      <div className=\"TButtonArea\">\n        <Button kind=\"tertiary\" type=\"submit\" onClick={handleSubmit3} > List Packages </Button>\n      </div>\n\n      <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n      {notifystatus && \n        <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Package sent successfully</span>}\n        timeout={4000}\n        onClose = {notifystatusf}\n        kind = 'success'\n        title=\"Success Notification\"\n        />\n      }\n\n       {err1status && \n      <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Unauthorised credentials. Restart to refresh your tokens</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n      {err2status && \n      <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Server cannot be reached</span>}\n        timeout={3000}\n        onClose = {err2closef}\n        title=\"Error Notification\"\n      />\n      }\n      \n      {err3status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>Package could not be sent</span>}\n          timeout={3000}\n          onClose = {err3closef}\n          title=\"Error Notification\"\n        />\n      }\n      \n      {err4status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>Invalid inputs provided. Specify package name, file and recipient</span>}\n          timeout={3000}\n          onClose = {err4closef}\n          title=\"Error Notification\"\n        />\n      }\n\n     {err5status && \n      <ToastNotification\n          iconDescription=\"Close notification\"\n          subtitle={<span>Operation cannot be done</span>}\n          timeout={3000}\n          onClose = {err5closef}\n          title=\"Error Notification\"\n        />\n      }\n\n     \n    </>\n  );\n};\n\nexport default Aoc3;","import React from 'react'\nimport './App.css';\nimport {Header,HeaderName} from \"carbon-components-react/lib/components/UIShell\";\nimport Aoc1 from './components/aoc1';\nimport Aoc2 from './components/aoc2';\nimport Aoc3 from './components/aoc3';\n\nfunction App() {\n  \n  return (\n    <>\n      <Header aria-label=\"IBM\">\n        <HeaderName prefix = \"\" href=\"#\">\n          <div Style=\"white-space: nowrap;\">\n            Aspera on Cloud Sample Application\n          </div>\n          </HeaderName>\n        </Header> \n\n    <div className=\"App\">\n     <div className = \"AppContent\">\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n     <h2>Workspace Details</h2>\n      <br/>\n      <br/>\n      <Aoc1/>\n\n      <h2>Membership Details</h2>\n      <br/>\n      <br/>\n      <Aoc2/>\n\n     <h2>Workspace Packages</h2>\n      <br/>\n      <br/>\n      <Aoc3/>\n    \n    </div>\n    </div>\n\n    </>\n\n    \n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.scss\";\nimport \"./style.scss\";\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}