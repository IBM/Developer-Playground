{"version":3,"sources":["components/Fileupload.js","components/Sdataset.js","components/datainput.js","components/getresults.js","components/dataquality.js","components/Fileupload1.js","components/Sdataset1.js","components/datainput1.js","components/datasetquality.js","App.js","index.js"],"names":["lastId","uid","prefix","Fileupload","setuLabelInput","setufilepath","setufilename","ulabelerr","useState","label","setlabel","notifystatus","setnotifystatus","err1status","seterr1status","global_filename","valid","files","setFiles","handleDrop","e","preventDefault","stopPropagation","console","log","handleDragover","useEffect","document","addEventListener","removeEventListener","uploadFile","fileToUpload","a","filesize","updatedFile","status","iconDescription","invalid","errorSubject","errorBody","map","file","uuid","invalidFileType","name","fetch","method","mode","body","ok","Error","setTimeout","onAddFiles","evt","addedFiles","newFiles","size","data","FormData","append","axios","post","handleFileUploaderItemClick","useCallback","_","clickedUuid","filter","class","FileUploaderDropContainer","labelText","accept","className","style","width","rest","FileUploaderItem","onDelete","TextInput","id","invalidText","placeholder","value","onChange","target","subtitle","timeout","onClose","kind","title","Sdataset","setfilepath","setfilename","setLabelInput","labelerr","dataseterr","dataset","bcancerlabels","creditlabels","adultlabels","datasetquery","setdatasetquery","labelcol","setlabelcol","Select","event","options","selectedIndex","text","item","i","SelectItem","Datainput","setbuttonstate","setchoice","displayCOption","setdisplayCOption","displaySOption","setdisplaySOption","RadioButtonGroup","legendText","RadioButton","onClick","Results","jobid","setjobid","msg","setmsg","metric","setmetric","methodology","setmethodology","fresult","setfresult","score","setscore","isLoading","setLoading","numbercolumns","setnumbercolumns","numbersamples","setnumbersamples","datecolumns","setdatecolumns","numericalcolumns","setnumericalcolumns","stringcolumns","setstringcolumns","callResults","response","json","message","result","headers","rows","key","header","parse","Form","autoComplete","onSubmit","then","resp","JSON","stringify","toString","catch","err","Button","type","Loading","active","description","withOverlay","DataTable","getTableProps","getHeaderProps","getRowProps","TableContainer","Table","TableHead","TableRow","TableHeader","TableBody","row","cells","cell","TableCell","Dataquality","choice","LabelInput","uLabelInput","filepath","filename","ufilepath","ufilename","setulabelerr","setlabelerr","setdataseterr","callClassparity","callLabelpurity","callClassoverlap","callOutlierdetection","copyfunc","CodeSnippet","feedback","Style","Fileupload1","Sdataset1","dataseterr1","Datainput1","displayCOption1","setdisplayCOption1","displaySOption1","setdisplaySOption1","Datasetquality","setdataseterr1","callDatacompleteness","callDataduplicates","callDatahomogeneity","callDataprofile","App","buttonstate","href","Tabs","Tab","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.42eafe8d.chunk.js","sourcesContent":["import axios from 'axios';\nimport { TextInput, FileUploaderItem,FileUploaderDropContainer, ToastNotification } from 'carbon-components-react';\nimport React, { useState, useCallback, useEffect} from 'react';\nlet lastId = 0;\nfunction uid(prefix = 'id') {\n  lastId++;\n  return `${prefix}${lastId}`;\n}\n\nfunction Fileupload({setuLabelInput, setufilepath, setufilename, ulabelerr}) {\n\n    const [label , setlabel] = useState('');\n    const [notifystatus, setnotifystatus] = useState(false);\n    const [err1status, seterr1status] = useState(false); \n    \n    var global_filename = 'datafolder/data.csv';\n    let valid = true;\n\n    const onLabelSubmit = (e) => {\n\n      setlabel(e.target.value)\n      setuLabelInput(e.target.value)\n      setufilepath(global_filename);\n      setufilename('data.csv');\n    }\n\n  const [files, setFiles] = useState([]);\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n     e.stopPropagation();\n     console.log(e);\n  };\n\n  const handleDragover = (e) => {\n    e.preventDefault();\n     e.stopPropagation();\n     console.log(e);\n     \n  };\n  \n  useEffect(() => {\n    document.addEventListener('drop', handleDrop);\n    document.addEventListener('dragover', handleDragover);\n    return () => {\n      document.removeEventListener('drop', handleDrop);\n      document.removeEventListener('dragover', handleDragover);\n      \n    };\n  }, []);\n\n  \n\n  const uploadFile = async (fileToUpload) => {\n    // file size validation\n\n    if (fileToUpload.filesize <= 15000000)\n    {\n        valid = true;\n    }\n    else\n    {\n      valid = false;\n        const updatedFile = {\n            ...fileToUpload,\n            status: 'edit',\n            iconDescription: 'Delete file',\n            invalid: true,\n            errorSubject: 'File size exceeds limit',\n            errorBody: 'Max file size is 15MB. Select a new file and try again.',\n          };\n          setFiles((files) =>\n            files.map((file) =>\n              file.uuid === fileToUpload.uuid ? updatedFile : file\n            )\n          );\n          return;\n    }\n\n    // file type validation\n    if (fileToUpload.invalidFileType) {\n      const updatedFile = {\n        ...fileToUpload,\n        status: 'edit',\n        iconDescription: 'Delete file',\n        invalid: true,\n        errorSubject: 'Invalid file type',\n        errorBody: `\"${fileToUpload.name}\" does not have a valid file type.`,\n      };\n      setFiles((files) =>\n        files.map((file) =>\n          file.uuid === fileToUpload.uuid ? updatedFile : file\n        )\n      );\n      return;\n    }\n\n    else {\n            valid = true;\n        }\n\n    try {\n      const response = await fetch(\n        'https://www.mocky.io/v2/5185415ba171ea3a00704eed?mocky-delay=1000ms',\n        {\n          method: 'POST',\n          mode: 'cors',\n          body: fileToUpload,\n        }\n      );\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      // show x icon after 1 second\n      setTimeout(() => {\n        const updatedFile = {\n          ...fileToUpload,\n          status: 'edit',\n          iconDescription: 'Remove file',\n        };\n        setFiles((files) =>\n          files.map((file) =>\n            file.uuid === fileToUpload.uuid ? updatedFile : file\n          )\n        );\n      }, 1000);\n    } \n   catch (error) {\n            valid = false;\n            const updatedFile = {\n                ...fileToUpload,\n                status: \"edit\",\n                iconDescription: \"Upload failed\",\n                invalid: true,\n            };\n            setFiles((files) =>\n                files.map((file) =>\n                    file.uuid === fileToUpload.uuid ? updatedFile : file\n                )\n            );\n            //console.log(error);\n        }\n  };\n\nconst onAddFiles = async (evt, { addedFiles }) => {\n    evt.stopPropagation();\n    const newFiles = addedFiles.map((file) => ({\n        uuid: uid(),\n        name: file.name,\n        filesize: file.size,\n        status: 'uploading',\n        iconDescription: 'Uploading',\n      }));\n\n      if (addedFiles[0]) {\n        console.log(\"addedFiles[0]:\", addedFiles[0]);\n\n        setFiles([newFiles[0]]);\n        uploadFile(newFiles[0]);\n       \n        if(valid){\n          const data = new FormData()\n          data.append('file', addedFiles[0])\n          let updatedFile;\n          try{\n             const res = await axios.post(\"/upload\", data, {})\n             if(res.status === 200){\n                \n                updatedFile = {\n                        ...newFiles[0],\n                        status: \"complete\",\n                        iconDescription: \"Upload complete\",\n                    };\n                setnotifystatus(true);\n                setufilepath(global_filename);\n                setufilename('data.csv');\n                console.log(\"file uploaded\"); \n            }\n            else{\n                  console.log(\"file not uploaded\");\n                  seterr1status(true);\n              } \n\n          }\n          catch(err){\n            updatedFile = {\n                        ...newFiles[0],\n                        status: \"edit\",\n                        iconDescription: \"Upload failed\",\n                        invalid: true,\n                    };\n            console.log(\"Issue with uploaded file\");\n            seterr1status(true);\n          }\n             \n          }\n        }\n      else{\n        console.log(\"Issue with uploaded file\");\n        seterr1status(true);\n      }\n    };\n\n  const handleFileUploaderItemClick = useCallback(\n    (_, { uuid: clickedUuid }) =>\n      setFiles(files.filter(({ uuid }) => clickedUuid !== uuid)),\n    [files]\n  );\n\n  function notifystatusf() {\n    setnotifystatus(false);\n  }\n  \n  function err1closef() {\n    seterr1status(false);\n  }\n\t\n\treturn (\n  <>\n     <div class=\"bx--form-item\">\n            <strong class=\"bx--file--label\">Upload File</strong>\n            <p class=\"bx--label-description\">Max file size of 15MB allowed</p>\n            <FileUploaderDropContainer\n                labelText=\"Drag and drop here or click to upload\"\n                onAddFiles={onAddFiles}\n                accept={['.csv']}\n            />\n     <div className=\"uploaded-files\" style={{ width: \"100%\" }}>\n                {files.map(\n                    ({\n                        uuid,\n                        name,\n                        filesize,\n                        status,\n                        iconDescription,\n                        invalid,\n                        ...rest\n                    }) => (\n                        <FileUploaderItem\n                            key={uid()}\n                            uuid={uuid}\n                            name={name}\n                            filesize={filesize}\n                            size=\"lg\"\n                            status={status}\n                            iconDescription={iconDescription}\n                            invalid={invalid}\n                            onDelete={handleFileUploaderItemClick}\n                            {...rest}\n                        />))}\n            </div>\n      </div>\n<br/>\n     <div className = \"LabelArea\">\n      <TextInput id={'label'} labelText = {'Label Column*'} invalidText=\"Mandatory field\" invalid = {ulabelerr} size = \"lg\" placeholder = {'Label'} value={label} onChange={onLabelSubmit} />\n      </div>\n\n  {notifystatus && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>File Upload Successful</span>}\n        timeout={3000}\n        onClose = {notifystatusf}\n        kind = 'success'\n        title=\"Success Notification\"\n      />\n      }\n\n    {err1status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>File upload failed</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n  </>\n\n\t);\n\t\n}\n\nexport default Fileupload;","import {  Select, SelectItem } from 'carbon-components-react';\nimport React, { useState} from 'react';\n\nfunction Sdataset({setfilepath, setfilename, setLabelInput, labelerr, dataseterr}) {\n   \n  const dataset = [\n  \n    {\n    id: '',\n    value: 'Select Dataset',\n  },\n\n  {\n    id: 'adult.csv',\n    value: 'adult.csv',\n  },\n  {\n    id: 'breast-cancer.csv',\n    value: 'breast-cancer.csv',\n  },\n  {\n    id: 'credit-g.csv',\n    value: 'credit-g.csv',\n  },\n];\n\nconst bcancerlabels = [ 'Select Column',\n  'Class',       'age',\n  'menopause',   'tumor-size',\n  'inv-nodes',   'node-caps',\n  'deg-malig',   'breast',\n  'breast-quad', 'irradiat'\n];\n\nconst creditlabels = [ 'Select Column',\n  'checking_status', 'duration',\n  'credit_history',  'purpose',\n  'credit_amount',   'savings_status',\n  'employment',      'installment_commitment',\n  'personal_status', 'other_parties',\n  'residence_since', 'property_magnitude',\n  'age',             'other_payment_plans',\n  'housing',         'existing_credits',\n  'job',             'num_dependents',\n  'own_telephone',   'foreign_worker',\n  'class'\n];\n\nconst adultlabels = [ 'Select Column',\n  'age',            'workclass',\n  'fnlwgt',         'education',\n  'education-num',  'marital-status',\n  'occupation',     'relationship',\n  'race',           'sex',\n  'capital-gain',   'capital-loss',\n  'hours-per-week', 'native-country',\n  'income'\n];\n\n\nvar [datasetquery, setdatasetquery] = useState(dataset[0].id);\nvar [labelcol, setlabelcol] = useState(['']);\n\nconst handledatasetChange = (event) => \n\n{\n    \n    setdatasetquery(event.target.value);\n    setlabelcol(['']);\n    setfilepath(event.target.value);\n    setfilename(event.target.options[event.target.options.selectedIndex].text);\n    \n\n\n    setTimeout(() => {\n      if(event.target.value  === \"credit-g.csv\"){\n      setlabelcol(creditlabels);\n    }\n  \n  else if(event.target.value  === \"breast-cancer.csv\"){\n      setlabelcol(bcancerlabels);\n    }\n  else if(event.target.value  === 'adult.csv'){\n          setlabelcol(adultlabels);      \n    }\n\n    \n\n    }, 100);\n \n  };\n\n\n  \n  \n    const labelSubmit = (e) => {\n\n      setLabelInput(e.target[e.target.selectedIndex].text);      \n      console.log(\"Label: \", e.target[e.target.selectedIndex].text);\n\n    }\n\n \n\t\n\treturn (\n\n        <div>\n            <Select labelText=\"Sample Dataset*\" invalidText=\"Mandatory field\" invalid = {dataseterr}  size = \"lg\" value={datasetquery} onChange={handledatasetChange}>\n                {dataset.map((item, i) => (\n                    <SelectItem value={item.id} key={i} text = {item.value} />\n                            ))}\n            </Select>\n            <br/>\n            <br/>\n\n            <div className = \"LabelArea\">\n\n             <Select labelText=\"Label Column*\" invalidText=\"Mandatory field\" invalid = {labelerr} size = \"lg\" onChange = {labelSubmit}>\n              \n\n                {labelcol.map((item, i) => (\n                    <SelectItem value={item.id} key={i} text = {item} />\n                            ))}\n            </Select>\n        \n              </div>\n             \n\n\n      </div>\n\n\t);\n\t\n}\n\nexport default Sdataset;","import React, { useState} from 'react';\nimport Fileupload from './Fileupload';\nimport Sdataset from './Sdataset';\n\nimport { RadioButtonGroup, RadioButton  } from 'carbon-components-react';\n\n\nfunction Datainput({ setbuttonstate, setchoice, setLabelInput, setuLabelInput, setfilepath, setfilename,  setufilepath, setufilename, ulabelerr, labelerr, dataseterr}) {\n\nconst [displayCOption, setdisplayCOption] = useState('');\nconst [displaySOption, setdisplaySOption] = useState('');\n\n var showCustomOption = () => {\n    \n    setchoice('upload');\n    setdisplayCOption('Show');\n    setdisplaySOption('');\n\n\n } \n\n var showSampleOption = () => { \n    setchoice('sample');\n    setdisplaySOption('Show');\n    setdisplayCOption('');\n }\n\n  return (\n    <>\n    \n    <RadioButtonGroup legendText=\"Choose the type of Dataset\" name=\"radio-button-group\" >\n      <RadioButton labelText=\"Upload your Dataset ( < 15 MB )\" value=\"customdt\" id=\"customdt\" onClick={showCustomOption} />\n      <RadioButton labelText=\"Use Sample Datasets\" value=\"sampledt\" id=\"sampledt\" onClick={showSampleOption} />\n    </RadioButtonGroup>\n\n    <br/>\n    <br/>\n  \n\n    {displayCOption &&    \n    <div id=\"custom-dataset\">\n      <Fileupload ulabelerr = {ulabelerr} setuLabelInput = {setuLabelInput} setufilepath = {setufilepath} setufilename = {setufilename} />\n    </div>}\n\n    {displaySOption &&  \n    <div id=\"sample-dataset\">\n      <Sdataset setbuttonstate = {setbuttonstate} setLabelInput = {setLabelInput} setfilepath = {setfilepath} setfilename = {setfilename} labelerr = {labelerr} dataseterr = {dataseterr} />\n    </div>}\n    \n       <br/>        \n     \n    </>\n  );\n};\n\nexport default Datainput;\n","import React, { useState} from 'react';\nimport { Button, Loading, Form, TextInput, ToastNotification} from 'carbon-components-react';\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  TableContainer\n} from 'carbon-components-react';\nimport parse from 'html-react-parser';\n\nfunction  Results() {\n\n  const [jobid , setjobid] = useState('');\n  const [msg , setmsg] = useState('');\n  const [metric , setmetric] = useState('');\n  const [methodology , setmethodology] = useState('');\n  const [fresult , setfresult] = useState('');\n  const [score , setscore] = useState('');\n  const [isLoading,setLoading] = useState(false);\n  const [err1status, seterr1status] = useState(false); \n  const [numbercolumns, setnumbercolumns] = useState('');\n  const [numbersamples, setnumbersamples] = useState('');\n  const [datecolumns, setdatecolumns] = useState('');\n  const [numericalcolumns, setnumericalcolumns] = useState('');\n  const [stringcolumns, setstringcolumns] = useState('');\n\n\n  const onSubmit = (e) => {\n     setLoading(true);\n     e.preventDefault();\n    \n    callResults()\n    .then((resp) => {\n\n      if(JSON.stringify(resp) === JSON.stringify({})){\n        seterr1status(true);\n        setLoading(false);\n      }\n\n      else{\n      console.log(\"RES: \", resp[\"Job ID\"])\n      console.log(\"RES MSG: \", resp[\"Message\"])\n      console.log(\"RES Metric : \", resp[\"String Col\"])\n\n      if(resp[\"Metric\"] === \"Data Profiler\"){\n        setjobid(resp[\"Job ID\"]);\n        setmsg(resp[\"Message\"]);\n        setmetric(resp[\"Metric\"]);\n        setmethodology(resp[\"Methodology\"]);\n        setnumbercolumns(resp[\"Number of Columns\"]);\n        setnumbersamples(resp[\"Number of Samples\"]);\n        setdatecolumns(resp[\"Date Col\"].toString());\n        setnumericalcolumns(resp[\"Numerical Col\"].toString());\n        setstringcolumns(resp[\"String Col\"].toString());\n        setLoading(false);\n      }\n\n      else{\n      setjobid(resp[\"Job ID\"]);\n      setmsg(resp[\"Message\"]);\n      setmetric(resp[\"Metric\"]);\n      setmethodology(resp[\"Methodology\"]);\n      setfresult(resp[\"Result\"]);\n      setscore(resp[\"Score\"]);\n      setLoading(false);\n      }\n    \n    }\n\n    })\n    .catch((err) => {\n      console.log(err)\n      setLoading(false);\n    });\n     \n  }\n  \n   const callResults = async () => {\n\n      let response = await fetch('/results?jobid=' + jobid);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n  };\n\n var headers = [];\n var rows = [];\n\n  if(metric === \"Data Profiler\"){\n    headers = [\n  {\n    key: 'jobid',\n    header: 'Job ID',\n  },\n  {\n    key: 'message',\n    header: 'Message',\n  },\n  {\n    key: 'metric',\n    header: 'Metric',\n  },\n  {\n    key: 'methodology',\n    header: 'Methodology',\n  },\n  {\n    key: 'numbercolumns',\n    header: 'Number of Columns',\n  },\n    {\n    key: 'numbersamples',\n    header: 'Number of Samples',\n  },\n    {\n    key: 'datecolumns',\n    header: 'Date Columns',\n  },\n  \n  {\n    key: 'numericalcolumns',\n    header: 'Numerical Columns',\n  },\n  {\n    key: 'stringcolumns',\n    header: 'String Columns',\n  }\n  \n];\n\n rows = [\n  {\n    id: 'a',\n    jobid: jobid,\n    message: msg,\n    metric: metric,\n    methodology: methodology,\n    numbercolumns: numbercolumns,\n    numbersamples: numbersamples,\n    datecolumns: datecolumns,\n    numericalcolumns: numericalcolumns,\n    stringcolumns: stringcolumns\n  }\n];\n\n  }\n\n  else{\n    \n  headers = [\n  {\n    key: 'jobid',\n    header: 'Job ID',\n  },\n  {\n    key: 'message',\n    header: 'Message',\n  },\n  {\n    key: 'metric',\n    header: 'Metric',\n  },\n  {\n    key: 'methodology',\n    header: 'Methodology',\n  },\n  {\n    key: 'result',\n    header: 'Result',\n  },\n  {\n    key: 'score',\n    header: 'Score',\n  },\n  \n];\n\n rows = [\n  {\n    id: 'a',\n    jobid: jobid,\n    message: msg,\n    metric: metric,\n    methodology: methodology,\n    result: parse(fresult),\n    score: score\n  }\n];\n  \n  }\nfunction err1closef() {\n  seterr1status(false);\n}\n    return (\n     <div>\n\n      <Form autoComplete=\"off\" onSubmit={onSubmit}>\n\n      <h2>Fetch Processed Results </h2>\n      <br/>\n      <br/>\n      <TextInput id={'result'} labelText = {'Fetch Results'} placeholder = {'Job ID'} value={jobid} onChange={(e) => setjobid(e.target.value)} />\n      <br/>\n      <div className=\"ButtonArea\">\n          <Button className = \"parameterbutton\" kind=\"tertiary\" type=\"submit\"  > Fetch Results </Button>\n      </div>\n    </Form>\n        \n        <br/>\n        <br/>\n\n       <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n         { methodology && <DataTable rows={rows} headers={headers}>\n              {({ rows, headers, getTableProps, getHeaderProps, getRowProps }) => (\n                <TableContainer title=\"Results Analysis\">\n                <Table {...getTableProps()}>\n                  <TableHead>\n                    <TableRow>\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {rows.map((row) => (\n                      <TableRow {...getRowProps({ row })}>\n                        {row.cells.map((cell) => (\n                          <TableCell key={cell.id}>{cell.value}</TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                 </TableContainer>\n              )}\n          </DataTable>}\n\n  {err1status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Results are getting processed. Try again in a few moments</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n      </div>\n    );\n  \n}\n\nexport default Results;\n","import React, { useState} from 'react';\nimport { Button, Loading, TableContainer, CodeSnippet, ToastNotification} from 'carbon-components-react';\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n} from 'carbon-components-react';\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { CopyFile24 } from '@carbon/icons-react';\n\nfunction Dataquality({ choice, LabelInput, uLabelInput, filepath, filename, ufilepath, ufilename, setulabelerr, setlabelerr, setdataseterr}) {\n\n  const [jobid , setjobid] = useState('');\n  const [msg , setmsg] = useState('');\n  const [isLoading,setLoading] = useState(false);\n  const [err1status, seterr1status] = useState(false);\n\n  const onLPClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          seterr1status(true);\n          setLoading(false);\n        }\n\n        else{\n\n          if(!uLabelInput){\n            setulabelerr(true);\n            setLoading(false);\n          }\n          else{\n            setulabelerr(false);\n            callLabelpurity()\n              .then((resp) => {\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n          }\n        }\n    }\n\n    if(choice === \"sample\"){\n\n      if((filename === \"Select Dataset\" || filename === \"\")){\n          setdataseterr(true);\n          setLoading(false);        \n        }\n      \n      else{\n        \n        setdataseterr(false);\n        if((LabelInput === \"Select Column\" || LabelInput === \"\")){\n          setlabelerr(true);\n          setLoading(false);\n        }\n        else{\n          setlabelerr(false);\n          callLabelpurity()\n              .then((resp) => {\n\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n        }\n      }\n        \n\n    }\n\n  }\n\n  const onODClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          seterr1status(true);\n          setLoading(false);\n        }\n    \n        else{\n\n          if(!uLabelInput){\n            setulabelerr(true);\n            setLoading(false);\n          }\n          else{\n            setulabelerr(false);\n             callOutlierdetection()\n              .then((resp) => {\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n            }\n    }\n  }\n\n    if(choice === \"sample\"){\n\n      if((filename === \"Select Dataset\" || filename === \"\")){\n          setdataseterr(true);\n          setLoading(false);\n        }\n       else{\n        \n        setdataseterr(false);\n        if((LabelInput === \"Select Column\" || LabelInput === \"\")){\n          setlabelerr(true);\n          setLoading(false);\n        }\n        else{\n          setlabelerr(false);\n             callOutlierdetection()\n              .then((resp) => {\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n        }\n      }\n  }\n}\n  const onCPClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          seterr1status(true);\n          setLoading(false);\n        }\n      \n          else{\n\n          if(!uLabelInput){\n            setulabelerr(true);\n            setLoading(false);\n          }\n          else{\n            setulabelerr(false);\n              callClassparity()\n                .then((resp) => {\n                  setjobid(resp[\"JobID\"]);\n                  setmsg(resp[\"message\"]);\n                  setLoading(false);\n                })\n                .catch((err) => {\n                  console.log(err)\n                  setLoading(false);\n                });\n            }\n        }\n       \n    }\n\n    if(choice === \"sample\"){\n      \n        if((filename === \"Select Dataset\" || filename === \"\")){\n          setdataseterr(true);\n          setLoading(false);\n        }\n\n      else{\n        \n        setdataseterr(false);\n        if((LabelInput === \"Select Column\" || LabelInput === \"\")){\n          setlabelerr(true);\n          setLoading(false);\n        }\n        else{\n          setlabelerr(false);\n            callClassparity()\n                .then((resp) => {\n                  setjobid(resp[\"JobID\"]);\n                  setmsg(resp[\"message\"]);\n                  setLoading(false);\n                })\n                .catch((err) => {\n                  console.log(err)\n                  setLoading(false);\n                });\n        }\n      }\n     \n    }  \n  }\n  \n const onCOClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          seterr1status(true);\n          setLoading(false);\n        }\n       else{\n\n          if(!uLabelInput){\n            setulabelerr(true);\n            setLoading(false);\n          }\n          else{\n            setulabelerr(false);\n             callClassoverlap()\n              .then((resp) => {\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n            }\n      }  \n    }\n\n    if(choice === \"sample\"){\n      \n      if((filename === \"Select Dataset\" || filename === \"\")){\n          setdataseterr(true);\n          setLoading(false);\n        }\n      \n      else{\n        \n        setdataseterr(false);\n        if((LabelInput === \"Select Column\" || LabelInput === \"\")){\n          setlabelerr(true);\n          setLoading(false);\n        }\n        else{\n          setlabelerr(false);\n             callClassoverlap()\n              .then((resp) => {\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n        }\n      }\n     \n   \n    }\n  }\n    \n \n  const callClassparity = async () => {\n\n    if(choice === \"upload\"){\n      let response = await fetch('/classparity?label=' + uLabelInput + '&fpath=' + ufilepath + '&fname=' + ufilename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/classparity?label=' + LabelInput + '&fpath=' + filepath + '&fname=' + filename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callLabelpurity= async () => {\n\n    if(choice === \"upload\"){\n      let response = await fetch('/labelpurity?label=' + uLabelInput + '&fpath=' + ufilepath + '&fname=' + ufilename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/labelpurity?label=' + LabelInput + '&fpath=' + filepath + '&fname=' + filename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callClassoverlap = async () => {\n    if(choice === \"upload\"){\n      let response = await fetch('/classoverlap?label=' + uLabelInput + '&fpath=' + ufilepath + '&fname=' + ufilename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/classoverlap?label=' + LabelInput + '&fpath=' + filepath + '&fname=' + filename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callOutlierdetection= async () => {\n    if(choice === \"upload\"){\n      let response = await fetch('/outlierdetection?label=' + uLabelInput + '&fpath=' + ufilepath + '&fname=' + ufilename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/outlierdetection?label=' + LabelInput + '&fpath=' + filepath + '&fname=' + filename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n  };\n\n  function err1closef() {\n    seterr1status(false);\n  }\n  \n  const headers = [\n  {\n    key: 'jobid',\n    header: 'Job ID',\n  },\n  {\n    key: 'message',\n    header: 'Message',\n  },\n  {\n    key:'copyfunc',\n    header:''\n  }\n  \n];\n  const rows = [\n  {\n    id: 'a',\n    jobid: jobid,\n    message: msg,\n    copyfunc:  <CopyToClipboard text={jobid}>\n      <CodeSnippet type=\"inline\" feedback=\"Copied to clipboard\" ><CopyFile24 Style = \"width: 24px ; height: 24px\" /></CodeSnippet>\n    </CopyToClipboard> \n\n  }\n];\n  \n    return (\n     <div className = \"dqdiv\">\n         <div className=\"ButtonArea\">\n           <Button className = \"parameterbutton\" kind=\"tertiary\" type=\"submit\" onClick={onCOClickHandler} > Get Class Overlap </Button>\n           <Button className = \"parameterbutton\" kind=\"tertiary\" type=\"submit\" onClick={onLPClickHandler} > Get Label Purity </Button>\n           <Button className = \"parameterbutton\" kind=\"tertiary\" type=\"submit\" onClick={onODClickHandler} > Detect Outliers </Button>\n           <Button className = \"parameterbutton\" kind=\"tertiary\" type=\"submit\" onClick={onCPClickHandler} > Get Class Parity </Button>\n  \n         </div>\n\n  {err1status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>No File uploaded</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n      <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n         { jobid && <div className = \"TableDisplay\" >\n         { jobid && <DataTable rows={rows} headers={headers}>\n              {({ rows, headers, getTableProps, getHeaderProps, getRowProps }) => \n              (\n                <TableContainer title=\"Parameter Job\">\n                <Table {...getTableProps()}>\n                  <TableHead>\n                    <TableRow>\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {rows.map((row) => (\n                      <TableRow {...getRowProps({ row })}>\n                        {row.cells.map((cell) => (\n                          <TableCell key={cell.id}>{cell.value}</TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                 </TableContainer>\n              )}\n          </DataTable>}\n          </div>}\n          \n\n      </div>\n    );\n  \n}\n\nexport default Dataquality;","import axios from 'axios';\nimport { FileUploaderItem,FileUploaderDropContainer,ToastNotification } from 'carbon-components-react';\nimport React, { useState, useCallback, useEffect} from 'react';\n\nlet lastId = 0;\nfunction uid(prefix = 'id') {\n  lastId++;\n  return `${prefix}${lastId}`;\n}\n\nfunction Fileupload1({setufilepath, setufilename}) {\n\n    const [files, setFiles] = useState([]);\n    const [notifystatus, setnotifystatus] = useState(false);\n    const [err1status, seterr1status] = useState(false); \n\n    var global_filename = 'datafolder/data.csv';\n    let valid = true;\n\n  \n  const handleDrop = (e) => {\n    e.preventDefault();\n     e.stopPropagation();\n     console.log(e);\n  };\n\n  const handleDragover = (e) => {\n    e.preventDefault();\n     e.stopPropagation();\n     console.log(e);\n     \n  };\n  \n  useEffect(() => {\n    document.addEventListener('drop', handleDrop);\n    document.addEventListener('dragover', handleDragover);\n    return () => {\n      document.removeEventListener('drop', handleDrop);\n      document.removeEventListener('dragover', handleDragover);\n      \n    };\n  }, []);\n\n  \n\n  const uploadFile = async (fileToUpload) => {\n    // file size validation\n\n    if (fileToUpload.filesize <= 15000000)\n    {\n        valid = true;\n    }\n    else\n    {\n      valid = false;\n        const updatedFile = {\n            ...fileToUpload,\n            status: 'edit',\n            iconDescription: 'Delete file',\n            invalid: true,\n            errorSubject: 'File size exceeds limit',\n            errorBody: 'Max file size is 15MB. Select a new file and try again.',\n          };\n          setFiles((files) =>\n            files.map((file) =>\n              file.uuid === fileToUpload.uuid ? updatedFile : file\n            )\n          );\n          return;\n    }\n\n    // file type validation\n    if (fileToUpload.invalidFileType) {\n      const updatedFile = {\n        ...fileToUpload,\n        status: 'edit',\n        iconDescription: 'Delete file',\n        invalid: true,\n        errorSubject: 'Invalid file type',\n        errorBody: `\"${fileToUpload.name}\" does not have a valid file type.`,\n      };\n      setFiles((files) =>\n        files.map((file) =>\n          file.uuid === fileToUpload.uuid ? updatedFile : file\n        )\n      );\n      return;\n    }\n\n    else {\n            valid = true;\n        }\n\n    try {\n      const response = await fetch(\n        'https://www.mocky.io/v2/5185415ba171ea3a00704eed?mocky-delay=1000ms',\n        {\n          method: 'POST',\n          mode: 'cors',\n          body: fileToUpload,\n        }\n      );\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      // show x icon after 1 second\n      setTimeout(() => {\n        const updatedFile = {\n          ...fileToUpload,\n          status: 'edit',\n          iconDescription: 'Remove file',\n        };\n        setFiles((files) =>\n          files.map((file) =>\n            file.uuid === fileToUpload.uuid ? updatedFile : file\n          )\n        );\n      }, 1000);\n    } \n   catch (error) {\n            valid = false;\n            const updatedFile = {\n                ...fileToUpload,\n                status: \"edit\",\n                iconDescription: \"Upload failed\",\n                invalid: true,\n            };\n            setFiles((files) =>\n                files.map((file) =>\n                    file.uuid === fileToUpload.uuid ? updatedFile : file\n                )\n            );\n            //console.log(error);\n        }\n  };\n\n\nconst onAddFiles = async (evt, { addedFiles }) => {\n    evt.stopPropagation();\n    const newFiles = addedFiles.map((file) => ({\n        uuid: uid(),\n        name: file.name,\n        filesize: file.size,\n        status: 'uploading',\n        iconDescription: 'Uploading',\n      }));\n\n      if (addedFiles[0]) {\n        console.log(\"addedFiles[0]:\", addedFiles[0]);\n\n        setFiles([newFiles[0]]);\n        uploadFile(newFiles[0]);\n       \n        if(valid){\n          const data = new FormData()\n          data.append('file', addedFiles[0])\n          let updatedFile;\n          try{\n             const res = await axios.post(\"/upload\", data, {})\n             if(res.status === 200){\n                \n                updatedFile = {\n                        ...newFiles[0],\n                        status: \"complete\",\n                        iconDescription: \"Upload complete\",\n                    };\n                setnotifystatus(true);\n                setufilepath(global_filename);\n                setufilename('data.csv');\n                console.log(\"file uploaded\"); \n            }\n            else{\n                  console.log(\"file not uploaded\");\n                  seterr1status(true);\n              } \n\n          }\n          catch(err){\n            updatedFile = {\n                        ...newFiles[0],\n                        status: \"edit\",\n                        iconDescription: \"Upload failed\",\n                        invalid: true,\n                    };\n            console.log(\"Issue with uploaded file\");\n            seterr1status(true);\n          }\n             \n          }\n        }\n      else{\n        console.log(\"Issue with uploaded file\");\n        seterr1status(true);\n      }\n    };\n\n  const handleFileUploaderItemClick = useCallback(\n    (_, { uuid: clickedUuid }) =>\n      setFiles(files.filter(({ uuid }) => clickedUuid !== uuid)),\n    [files]\n  );\n\n\tfunction notifystatusf() {\n    setnotifystatus(false);\n  }\n  function err1closef() {\n    seterr1status(false);\n  }\n\n\treturn (\n\n   <div class=\"bx--form-item\">\n            <strong class=\"bx--file--label\">Upload File</strong>\n            <p class=\"bx--label-description\">Max file size of 15MB allowed</p>\n            <FileUploaderDropContainer\n                labelText=\"Drag and drop here or click to upload\"\n                onAddFiles={onAddFiles}\n                accept={['.csv']}\n            />\n     <div className=\"uploaded-files\" style={{ width: \"100%\" }}>\n                {files.map(\n                    ({\n                        uuid,\n                        name,\n                        filesize,\n                        status,\n                        iconDescription,\n                        invalid,\n                        ...rest\n                    }) => (\n                        <FileUploaderItem\n                            key={uid()}\n                            uuid={uuid}\n                            name={name}\n                            filesize={filesize}\n                            size=\"lg\"\n                            status={status}\n                            iconDescription={iconDescription}\n                            invalid={invalid}\n                            onDelete={handleFileUploaderItemClick}\n                            {...rest}\n                        />))}\n            </div>\n\n  {notifystatus && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>File Upload Successful</span>}\n        timeout={3000}\n        onClose = {notifystatusf}\n        kind = 'success'\n        title=\"Success Notification\"\n      />\n      }\n  {err1status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>File upload failed</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n  <br/>\n  </div>\n\n\t);\n\t\n}\n\nexport default Fileupload1;","import { Select, SelectItem} from 'carbon-components-react';\nimport React, { useState} from 'react';\n\nfunction Sdataset1({setfilepath, setfilename, dataseterr1}) {\n   \n\n  const dataset = [\n  \n    {\n    id: '',\n    value: 'Select Dataset',\n  },\n\n  {\n    id: 'adult.csv',\n    value: 'adult.csv',\n  },\n  {\n    id: 'breast-cancer.csv',\n    value: 'breast-cancer.csv',\n  },\n  {\n    id: 'credit-g.csv',\n    value: 'credit-g.csv',\n  },\n];\n\n\nvar [datasetquery, setdatasetquery] = useState(dataset[0].id);\n\nconst handledatasetChange = (event) => \n{\n    setdatasetquery(event.target.value);\n    setfilepath(event.target.value);\n    setfilename(event.target.options[event.target.options.selectedIndex].text);\n    \n    setTimeout(() => {\n      if(event.target.value  === \"credit-g.csv\"){\n    }\n  \n  else if(event.target.value  === \"breast-cancer.csv\"){\n    }\n  else if(event.target.value  === 'adult.csv'){\n    }\n\n    }, 100);\n\n  };\n\t\n\treturn (\n\n        <div className=\"tab\">\n            <Select labelText=\"Sample Dataset*\" invalidText=\"Choose Dataset\" invalid = {dataseterr1}  size = \"lg\" value={datasetquery} onChange={handledatasetChange}>\n                {dataset.map((item, i) => (\n                    <SelectItem value={item.id} key={i} text = {item.value} />\n                            ))}\n            </Select>\n\n\n            <br/>\n            <br/>\n\n      </div>\n\n\t);\n\t\n}\n\nexport default Sdataset1;","import React, { useState} from 'react';\nimport Fileupload1 from './Fileupload1';\nimport Sdataset1 from './Sdataset1';\n\nimport { RadioButtonGroup, RadioButton  } from 'carbon-components-react';\n\n\nfunction Datainput1({ setbuttonstate, setchoice, setfilepath, setfilename,  setufilepath, setufilename, ulabelerr, labelerr, dataseterr1}) {\n\nconst [displayCOption1, setdisplayCOption1] = useState('');\nconst [displaySOption1, setdisplaySOption1] = useState('');\n\n var showCustomOption1 = () => {\n    \n    setchoice('upload');\n    setdisplayCOption1('Show');\n    setdisplaySOption1('');\n\n\n } \n\n var showSampleOption1 = () => { \n    setchoice('sample');\n    setdisplaySOption1('Show');\n    setdisplayCOption1('');\n }\n\n  return (\n    <>\n    \n    <RadioButtonGroup legendText=\"Choose the type of Dataset\" name=\"radio-button-group1\" >\n      <RadioButton labelText=\"Upload your Dataset ( < 15 MB )\" value=\"customdt1\" id=\"customdt1\" onClick={showCustomOption1} />\n      <RadioButton labelText=\"Use Sample Datasets\" value=\"sampledt1\" id=\"sampledt1\" onClick={showSampleOption1} />\n    </RadioButtonGroup>\n\n    <br/>\n    <br/>\n\n    {displayCOption1 &&    \n    <div id=\"custom-dataset1\">\n      <Fileupload1 setufilepath = {setufilepath} setufilename = {setufilename} />\n    </div>}\n\n    {displaySOption1 &&  \n    <div id=\"sample-dataset1\">\n      <Sdataset1 setbuttonstate = {setbuttonstate} setfilepath = {setfilepath} setfilename = {setfilename} dataseterr1 = {dataseterr1} />\n    </div>}\n    \n       <br/>        \n    </>\n  );\n};\n\nexport default Datainput1;\n","import React, { useState} from 'react';\nimport { Button, Loading, TableContainer, CodeSnippet, ToastNotification} from 'carbon-components-react';\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n} from 'carbon-components-react';\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { CopyFile24 } from '@carbon/icons-react';\n\nfunction Datasetquality({ choice, filepath, filename, ufilepath, ufilename, setdataseterr1}) {\n\n  const [jobid , setjobid] = useState('');\n  const [msg , setmsg] = useState('');\n  const [isLoading,setLoading] = useState(false);\n  const [buttonstate, setbuttonstate] = useState(false);\n  const [err1status, seterr1status] = useState(false);\n\n  const onDCClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          seterr1status(true);\n          setLoading(false);\n        }\n      else{\n        callDatacompleteness()\n          .then((resp) => {\n            setjobid(resp[\"JobID\"]);\n            setmsg(resp[\"message\"]);\n            setLoading(false);\n          })\n          .catch((err) => {\n            console.log(err)\n            setLoading(false);\n          });\n      }\n    \n    }\n\n    if(choice === \"sample\"){\n      \n       if(filename === \"Select Dataset\" || filename === \"\"){\n          setdataseterr1(true);\n          setbuttonstate(true);\n          setLoading(false);\n        }\n\n      else{\n        setdataseterr1(false);\n        setbuttonstate(false);\n\n        callDatacompleteness()\n          .then((resp) => {\n            setjobid(resp[\"JobID\"]);\n            setmsg(resp[\"message\"]);\n            setLoading(false);\n          })\n          .catch((err) => {\n            console.log(err)\n            setLoading(false);\n          });\n      }\n\n    }\n\n  }\n\n  const onDDClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          seterr1status(true);\n          setLoading(false);\n        }\n       else{\n         callDataduplicates()\n          .then((resp) => {\n            setjobid(resp[\"JobID\"]);\n            setmsg(resp[\"message\"]);\n            setLoading(false);\n          })\n          .catch((err) => {\n            console.log(err)\n            setLoading(false);\n          });\n       }\n  \n    }\n\n    if(choice === \"sample\"){\n      \n       if(filename === \"Select Dataset\" || filename === \"\"){\n          setdataseterr1(true);\n          setbuttonstate(true);\n          setLoading(false);\n        }\n       \n      else{\n           setdataseterr1(false);\n           setbuttonstate(false)\n           callDataduplicates()\n              .then((resp) => {\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n      }\n\n\n    }\n  }\n\n  const onDHClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          seterr1status(true);\n          setLoading(false);\n        }\n       \n       else{\n          callDatahomogeneity()\n            .then((resp) => {\n              setjobid(resp[\"JobID\"]);\n              setmsg(resp[\"message\"]);\n              setLoading(false);\n            })\n            .catch((err) => {\n              console.log(err)\n              setLoading(false);\n            });\n        }\n    \n    }\n\n    if(choice === \"sample\"){\n      \n        if(filename === \"Select Dataset\" || filename === \"\"){\n          setdataseterr1(true);\n          setbuttonstate(true);\n          setLoading(false);\n        }\n\n        else{\n           setdataseterr1(false);\n           setbuttonstate(false);\n           callDatahomogeneity()\n            .then((resp) => {\n              setjobid(resp[\"JobID\"]);\n              setmsg(resp[\"message\"]);\n              setLoading(false);\n            })\n            .catch((err) => {\n              console.log(err)\n              setLoading(false);\n            });\n        }\n    }\n  }\n  \n const onDPClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          seterr1status(true);\n          setLoading(false);\n        }\n      else{\n        setdataseterr1(false);\n        setbuttonstate(false);\n         callDataprofile()\n        .then((resp) => {\n          setjobid(resp[\"JobID\"]);\n          setmsg(resp[\"message\"]);\n          setLoading(false);\n        })\n        .catch((err) => {\n          console.log(err)\n          setLoading(false);\n        });\n\n      }\n    \n\n    }\n\n    if(choice === \"sample\"){\n      \n        if(filename === \"Select Dataset\" || filename === \"\"){\n          setdataseterr1(true);\n          setbuttonstate(true);\n          setLoading(false);\n\n        }\n\n        else{\n          setdataseterr1(false);\n          setbuttonstate(false);\n          callDataprofile()\n        .then((resp) => {\n          setjobid(resp[\"JobID\"]);\n          setmsg(resp[\"message\"]);\n          setLoading(false);\n        })\n        .catch((err) => {\n          console.log(err)\n          setLoading(false);\n        });\n\n        }\n\n    }\n\n  }\n    \n \n  const callDatacompleteness = async () => {\n\n    if(choice === \"upload\"){\n      let response = await fetch('/datacompleteness?fpath=' + ufilepath + '&fname=' + ufilename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/datacompleteness?fpath=' + filepath + '&fname=' + filename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callDataduplicates = async () => {\n\n    if(choice === \"upload\"){\n      let response = await fetch('/dataduplicates?fpath=' + ufilepath + '&fname=' + ufilename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/dataduplicates?fpath=' + filepath + '&fname=' + filename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callDatahomogeneity = async () => {\n    if(choice === \"upload\"){\n      let response = await fetch('/datahomogeneity?fpath=' + ufilepath + '&fname=' + ufilename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/datahomogeneity?fpath=' + filepath + '&fname=' + filename);\n      let body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message)\n         \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callDataprofile = async () => {\n    if(choice === \"upload\"){\n      let response = await fetch('/dataprofile?fpath=' + ufilepath + '&fname=' + ufilename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/dataprofile?fpath=' + filepath + '&fname=' + filename);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n  };\n\n    function err1closef() {\n    seterr1status(false);\n  }\n\n  const headers = [\n  {\n    key: 'jobid',\n    header: 'Job ID',\n  },\n  {\n    key: 'message',\n    header: 'Message',\n  },\n    {\n    key:'copyfunc',\n    header:''\n  }\n];\n  const rows = [\n  {\n    id: 'a',\n    jobid: jobid,\n    message: msg,\n    copyfunc:  <CopyToClipboard text={jobid}>\n      <CodeSnippet type=\"inline\" feedback=\"Copied to clipboard\" ><CopyFile24 /></CodeSnippet>\n    </CopyToClipboard> \n  }\n];\n  \n    return (\n     <div className = \"dqdiv\">\n         <div className=\"ButtonArea\">\n           <Button className = \"parameterbutton\"  kind=\"tertiary\" type=\"submit\" onClick={onDCClickHandler} > Data Completeness </Button>\n           <Button className = \"parameterbutton\"  kind=\"tertiary\" type=\"submit\" onClick={onDDClickHandler} > Data Duplicates </Button>\n           <Button className = \"parameterbutton\"  kind=\"tertiary\" type=\"submit\" onClick={onDHClickHandler} > Data Homogeneity </Button>\n           <Button className = \"parameterbutton\"  kind=\"tertiary\" type=\"submit\" onClick={onDPClickHandler} > Data Profile </Button>\n\n         </div>\n\n  {err1status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>No File uploaded</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n               <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n          \n         { jobid && <div className = \"TableDisplay\" >\n         { jobid && <DataTable rows={rows} headers={headers}>\n              {({ rows, headers, getTableProps, getHeaderProps, getRowProps }) => \n              (\n                <TableContainer title=\"Parameter Job\">\n                <Table {...getTableProps()}>\n                  <TableHead>\n                    <TableRow>\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {rows.map((row) => (\n                      <TableRow {...getRowProps({ row })}>\n                        {row.cells.map((cell) => (\n                          <TableCell key={cell.id}>{cell.value}</TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                 </TableContainer>\n              )}\n          </DataTable>}\n          </div>}\n\n      </div>\n    );\n  \n}\n\nexport default Datasetquality;","import React, {useState} from 'react'\nimport './App.css';\n\nimport { Tabs, Tab } from 'carbon-components-react';\nimport {Header,HeaderName} from \"carbon-components-react/lib/components/UIShell\";\n\n\nimport Datainput from './components/datainput';\nimport Results from './components/getresults';\nimport Dataquality from './components/dataquality';\nimport Datainput1 from './components/datainput1';\nimport Datasetquality from './components/datasetquality';\n\n\nfunction App() {\n\n  const [LabelInput, setLabelInput] = useState('');\n  const [uLabelInput, setuLabelInput] = useState('');\n  const [ulabelerr, setulabelerr] = useState('');\n  const [ufilepath, setufilepath] = useState('');\n  const [ufilename, setufilename] = useState('');\n  const [filepath, setfilepath] = useState('');\n  const [filename, setfilename] = useState('');\n  const [labelerr, setlabelerr] = useState('');\n  const [dataseterr, setdataseterr] = useState('');\n  const [dataseterr1, setdataseterr1] = useState('');\n  const [choice, setchoice] = useState('upload');\n\n  const [buttonstate, setbuttonstate] = useState(true);\n\n  return (\n\n    <>\n     <Header aria-label=\"IBM\">\n       <HeaderName href=\"#\" prefix=\"\">\n            <div Style=\"white-space: nowrap;\">\n            Data Quality for AI Sample Application\n            </div>\n      </HeaderName>\n     </Header> \n\n    <div className=\"App\">\n      <div className = \"AppContent\">\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n\n       <Tabs type='container'>\n          <Tab id=\"tab-q1\" label=\"Data Quality\">\n            <h2> Data Quality Processing </h2>\n            <br/>\n            <br/>\n            <Datainput setbuttonstate = {setbuttonstate} setchoice = {setchoice} labelerr = {labelerr} dataseterr = {dataseterr} ulabelerr = {ulabelerr} setufilepath = {setufilepath} setufilename = {setufilename} setfilepath = {setfilepath} setfilename = {setfilename} setLabelInput = {setLabelInput} setuLabelInput = {setuLabelInput} />\n            \n            <h5> Check parameters </h5>\n            <br/>\n            <Dataquality buttonstate = {buttonstate} choice = {choice} setlabelerr = {setlabelerr} setulabelerr = {setulabelerr} setdataseterr = {setdataseterr} filepath = {filepath} filename = {filename} ufilepath = {ufilepath} ufilename = {ufilename} LabelInput = {LabelInput} uLabelInput = {uLabelInput} /> \n\n          </Tab>\n\n          <Tab id=\"tab-q2\" label=\"Dataset Quality\">\n            <h2> Data Quality Processing </h2>\n            <br/>\n            <br/>\n            <Datainput1 setbuttonstate = {setbuttonstate} setchoice = {setchoice} dataseterr1 = {dataseterr1}  setufilepath = {setufilepath} setufilename = {setufilename} setfilepath = {setfilepath} setfilename = {setfilename} />\n\n            <h5> Check parameters </h5>\n            <br/>\n            <Datasetquality buttonstate = {buttonstate} choice = {choice}  setdataseterr1 = {setdataseterr1} filepath = {filepath} filename = {filename} ufilepath = {ufilepath} ufilename = {ufilename} /> \n\n          </Tab>\n        </Tabs> \n      <Results />\n\n      </div>\n    </div>\n\n    </>\n\n    \n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.scss\";\nimport \"./style.scss\";\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}