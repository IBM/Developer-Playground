{"version":3,"sources":["components/Filetest.js","components/Sdataset.js","components/datainput.js","components/getresults.js","components/dataquality.js","components/Filetest1.js","components/Sdataset1.js","components/datainput1.js","components/datasetquality.js","App.js","index.js"],"names":["lastId","uid","prefix","Filetest","setuLabelInput","setufilepath","setufilename","ulabelerr","useState","selectedFile","setselectedFile","loaded","setloaded","label","setlabel","uploadbuttonstate","setuploadbuttonstate","notifystatus","setnotifystatus","global_filename","files","setFiles","handleDrop","e","preventDefault","stopPropagation","console","log","handleDragover","useEffect","document","addEventListener","removeEventListener","uploadFile","fileToUpload","a","filesize","updatedFile","status","iconDescription","invalid","errorSubject","errorBody","map","file","uuid","invalidFileType","name","fetch","method","mode","body","ok","Error","setTimeout","onAddFiles","useCallback","evt","addedFiles","newFiles","size","handleFileUploaderItemClick","_","clickedUuid","filter","className","FileUploaderDropContainer","labelText","accept","style","width","rest","FileUploaderItem","onDelete","subtitle","timeout","onClose","kind","title","Button","type","disabled","onClick","data","FormData","append","axios","post","then","res","TextInput","id","invalidText","placeholder","value","onChange","target","Sdataset","setfilepath","setfilename","setLabelInput","labelerr","dataseterr","dataset","bcancerlabels","creditlabels","adultlabels","datasetquery","setdatasetquery","labelcol","setlabelcol","Select","event","options","selectedIndex","text","item","i","SelectItem","Datainput","setbuttonstate","setchoice","displayCOption","setdisplayCOption","displaySOption","setdisplaySOption","RadioButtonGroup","legendText","RadioButton","Results","jobid","setjobid","msg","setmsg","metric","setmetric","methodology","setmethodology","fresult","setfresult","score","setscore","isLoading","setLoading","numbercolumns","setnumbercolumns","numbersamples","setnumbersamples","datecolumns","setdatecolumns","numericalcolumns","setnumericalcolumns","stringcolumns","setstringcolumns","callResults","response","json","message","result","headers","rows","key","header","parse","Form","autoComplete","onSubmit","resp","toString","catch","err","Loading","active","description","withOverlay","DataTable","getTableProps","getHeaderProps","getRowProps","TableContainer","Table","TableHead","TableRow","TableHeader","TableBody","row","cells","cell","TableCell","Dataquality","choice","LabelInput","uLabelInput","filepath","filename","ufilepath","ufilename","setulabelerr","setlabelerr","setdataseterr","err1status","seterr1status","callClassparity","callLabelpurity","callClassoverlap","callOutlierdetection","copyfunc","CodeSnippet","feedback","Style","Filetest1","Sdataset1","dataseterr1","Datainput1","displayCOption1","setdisplayCOption1","displaySOption1","setdisplaySOption1","Datasetquality","setdataseterr1","callDatacompleteness","callDataduplicates","callDatahomogeneity","callDataprofile","App","buttonstate","href","Tabs","Tab","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c1842f45.chunk.js","sourcesContent":["import axios from 'axios';\nimport { Button,TextInput, ToastNotification } from 'carbon-components-react';\n// import { settings } from 'carbon-components';\nimport {\n  FileUploaderItem,\n  FileUploaderDropContainer,\n} from 'carbon-components-react';\nimport React, { useState, useCallback, useEffect} from 'react';\nlet lastId = 0;\nfunction uid(prefix = 'id') {\n  lastId++;\n  return `${prefix}${lastId}`;\n}\n\n// const { prefix } = settings;\n\nfunction Filetest({setuLabelInput, setufilepath, setufilename, ulabelerr}) {\n\n    const [selectedFile, setselectedFile] = useState({});\n    const [loaded, setloaded] = useState(1);\n    const [label , setlabel] = useState('');\n    const [uploadbuttonstate, setuploadbuttonstate] = useState(false);\n    const [notifystatus, setnotifystatus] = useState(false);\n\n    \n    var global_filename = 'datafolder/data.csv';\n\n    const onLabelSubmit = (e) => {\n\n      setlabel(e.target.value)\n      setuLabelInput(e.target.value)\n      setufilepath(global_filename);\n      setufilename('data.csv');\n    }\n\n    const onChangeHandler = (event) => {\n\n      setselectedFile(event.target.files[0]);\n      setloaded(0);\n    }\n\n  const onClickHandler = () => {\n    // console.log(\"click handler \",selectedFile);\n\n   const data = new FormData()\n   data.append('file', selectedFile)\n   axios.post(\"/upload\", data, { \n  })\n  .then(res => { \n    console.log(\"file response:\", res);\n\n   if(res.status === 200 && loaded === 0){\n      //alert(\"File Upload Successful\");\n      setnotifystatus(true);\n      setufilepath(global_filename);\n      setufilename('data.csv');\n    }\n\n\n })\n}\n  const [files, setFiles] = useState([]);\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n     e.stopPropagation();\n     console.log(e);\n  };\n\n  const handleDragover = (e) => {\n    e.preventDefault();\n     e.stopPropagation();\n     console.log(e);\n     \n  };\n  \n  useEffect(() => {\n    document.addEventListener('drop', handleDrop);\n    document.addEventListener('dragover', handleDragover);\n    return () => {\n      document.removeEventListener('drop', handleDrop);\n      document.removeEventListener('dragover', handleDragover);\n      \n    };\n  }, []);\n\n  \n\n  const uploadFile = async (fileToUpload) => {\n    // file size validation\n\nif (fileToUpload.filesize <= 15000000)\n{\n    setuploadbuttonstate(false);\n}\nelse\n{\n     const updatedFile = {\n        ...fileToUpload,\n        status: 'edit',\n        iconDescription: 'Delete file',\n        invalid: true,\n        errorSubject: 'File size exceeds limit',\n        errorBody: 'Max file size is 15MB. Select a new file and try again.',\n      };\n      setuploadbuttonstate(true);\n      setFiles((files) =>\n        files.map((file) =>\n          file.uuid === fileToUpload.uuid ? updatedFile : file\n        )\n      );\n      return;\n}\n\n\n\n\n    // file type validation\n    if (fileToUpload.invalidFileType) {\n      const updatedFile = {\n        ...fileToUpload,\n        status: 'edit',\n        iconDescription: 'Delete file',\n        invalid: true,\n        errorSubject: 'Invalid file type',\n        errorBody: `\"${fileToUpload.name}\" does not have a valid file type.`,\n      };\n      setFiles((files) =>\n        files.map((file) =>\n          file.uuid === fileToUpload.uuid ? updatedFile : file\n        )\n      );\n      return;\n    }\n    try {\n      const response = await fetch(\n        'https://www.mocky.io/v2/5185415ba171ea3a00704eed?mocky-delay=1000ms',\n        {\n          method: 'POST',\n          mode: 'cors',\n          body: fileToUpload,\n        }\n      );\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const updatedFile = {\n        ...fileToUpload,\n        status: 'complete',\n        iconDescription: 'Upload complete',\n      };\n      setFiles((files) =>\n        files.map((file) =>\n          file.uuid === fileToUpload.uuid ? updatedFile : file\n        )\n      );\n\n      // show x icon after 1 second\n      setTimeout(() => {\n        const updatedFile = {\n          ...fileToUpload,\n          status: 'edit',\n          iconDescription: 'Remove file',\n        };\n        setFiles((files) =>\n          files.map((file) =>\n            file.uuid === fileToUpload.uuid ? updatedFile : file\n          )\n        );\n      }, 1000);\n    } catch (error) {\n      const updatedFile = {\n        ...fileToUpload,\n        status: 'edit',\n        iconDescription: 'Upload failed',\n        invalid: true,\n      };\n      setFiles((files) =>\n        files.map((file) =>\n          file.uuid === fileToUpload.uuid ? updatedFile : file\n        )\n      );\n      console.log(error);\n    }\n  };\n\n\nconst onAddFiles = useCallback((evt, { addedFiles }) => {\n    evt.stopPropagation();\n    const newFiles = addedFiles.map((file) => ({\n        uuid: uid(),\n        name: file.name,\n        filesize: file.size,\n        status: 'uploading',\n        iconDescription: 'Uploading',\n      }));\n    console.log(\"addedFiles[0]\")\n      if (addedFiles[0]) {\n        console.log(\"addedFiles[0]:\", addedFiles[0]);\n        setloaded(0);\n        setFiles([newFiles[0]]);\n        uploadFile(newFiles[0]);\n        setselectedFile(addedFiles[0]);\n        \n        }\n      else{\n        console.log(\"No file uploaded : filetest\");\n      }\n    }\n  );\n\n  const handleFileUploaderItemClick = useCallback(\n    (_, { uuid: clickedUuid }) =>\n      setFiles(files.filter(({ uuid }) => clickedUuid !== uuid)),\n    [files]\n  );\n\n  function notifystatusf() {\n    setnotifystatus(false);\n  }\n\n\t\n\treturn (\n\n    <div className=\"bx--file__container\" >\n\n      <FileUploaderDropContainer\n        // name=\"productLogo\"\n        labelText=\"Drag and drop here or click to upload\"\n        onAddFiles={onAddFiles}\n        accept={['.csv']}\n         />\n\n       {/* <FileUploaderDropContainer accept={['.csv']} onAddFiles={onAddFiles} /> */}\n      <div className=\"uploaded-files\" style={{ width: '100%' }}>\n        {files.map(\n          ({\n            uuid,\n            name,\n            filesize,\n            status,\n            iconDescription,\n            invalid,\n            ...rest\n          }) => (\n            <FileUploaderItem\n              key={uid()}\n              uuid={uuid}\n              name={name}\n              filesize={filesize}\n              size=\"lg\"\n              status={status}\n              iconDescription={iconDescription}\n              invalid={invalid}\n              onDelete={handleFileUploaderItemClick}\n              {...rest}\n            />\n          )\n        )}\n      </div>\n\n  {notifystatus && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>File Upload Successful</span>}\n        timeout={3000}\n        onClose = {notifystatusf}\n        kind = 'success'\n        title=\"Success Notification\"\n      />\n      }\n\n      <div className=\"ButtonArea\">\n         <Button type=\"submit\" disabled = {uploadbuttonstate} onClick= {onClickHandler} >Upload </Button>\n      </div>\n\n    \n    <div className = \"LabelArea\">\n      <TextInput id={'label'} labelText = {'Label Column*'} invalidText=\"Mandatory field\" invalid = {ulabelerr} size = \"lg\" placeholder = {'Label'} value={label} onChange={onLabelSubmit} />\n      </div>\n\n      </div>\n\n\t);\n\t\n}\n\nexport default Filetest;","import {  Select, SelectItem } from 'carbon-components-react';\nimport React, { useState} from 'react';\n\nfunction Sdataset({setfilepath, setfilename, setLabelInput, labelerr, dataseterr}) {\n   \n//const [sdataseterr, setsdataseterr] = useState('');\n\n  const dataset = [\n  \n    {\n    id: '',\n    value: 'Select Dataset',\n  },\n\n  {\n    id: 'adult.csv',\n    value: 'adult.csv',\n  },\n  {\n    id: 'breast-cancer.csv',\n    value: 'breast-cancer.csv',\n  },\n  {\n    id: 'credit-g.csv',\n    value: 'credit-g.csv',\n  },\n];\n\nconst bcancerlabels = [ 'Select Column',\n  'Class',       'age',\n  'menopause',   'tumor-size',\n  'inv-nodes',   'node-caps',\n  'deg-malig',   'breast',\n  'breast-quad', 'irradiat'\n];\n\nconst creditlabels = [ 'Select Column',\n  'checking_status', 'duration',\n  'credit_history',  'purpose',\n  'credit_amount',   'savings_status',\n  'employment',      'installment_commitment',\n  'personal_status', 'other_parties',\n  'residence_since', 'property_magnitude',\n  'age',             'other_payment_plans',\n  'housing',         'existing_credits',\n  'job',             'num_dependents',\n  'own_telephone',   'foreign_worker',\n  'class'\n];\n\nconst adultlabels = [ 'Select Column',\n  'age',            'workclass',\n  'fnlwgt',         'education',\n  'education-num',  'marital-status',\n  'occupation',     'relationship',\n  'race',           'sex',\n  'capital-gain',   'capital-loss',\n  'hours-per-week', 'native-country',\n  'income'\n];\n\n\nvar [datasetquery, setdatasetquery] = useState(dataset[0].id);\nvar [labelcol, setlabelcol] = useState(['']);\n\nconst handledatasetChange = (event) => \n\n{\n    \n    setdatasetquery(event.target.value);\n    setlabelcol(['']);\n    setfilepath(event.target.value);\n    setfilename(event.target.options[event.target.options.selectedIndex].text);\n    \n\n\n    setTimeout(() => {\n      if(event.target.value  === \"credit-g.csv\"){\n      setlabelcol(creditlabels);\n    }\n  \n  else if(event.target.value  === \"breast-cancer.csv\"){\n      setlabelcol(bcancerlabels);\n    }\n  else if(event.target.value  === 'adult.csv'){\n          setlabelcol(adultlabels);      \n    }\n\n    \n\n    }, 100);\n\n    // if(event.target.options[event.target.options.selectedIndex].text === \"Select Dataset\"){\n\n    //   setsdataseterr(true);\n    // }\n    // else{\n    //   setsdataseterr(false);\n    // }\n    console.log(\"(On dataset change): Sample file chosen: \", event.target.options[event.target.options.selectedIndex].text);\n    // console.log(\"(On dataset change): F1 Index value: \", event.target.options.selectedIndex);\n\n\n    // console.log(\"TESTING (On dataset change): Label applied for Metric: \", LabelInput);\n\n \n  };\n\n\n  \n  \n    const labelSubmit = (e) => {\n\n      setLabelInput(e.target[e.target.selectedIndex].text);      \n      console.log(\"Label: \", e.target[e.target.selectedIndex].text);\n\n    }\n\n \n\t\n\treturn (\n\n        <div>\n            <Select labelText=\"Sample Dataset*\" invalidText=\"Mandatory field\" invalid = {dataseterr}  size = \"lg\" value={datasetquery} onChange={handledatasetChange}>\n                {dataset.map((item, i) => (\n                    <SelectItem value={item.id} key={i} text = {item.value} />\n                            ))}\n            </Select>\n            <br/>\n            <br/>\n\n            <div className = \"LabelArea\">\n\n             <Select labelText=\"Label Column*\" invalidText=\"Mandatory field\" invalid = {labelerr} size = \"lg\" onChange = {labelSubmit}>\n              \n\n                {labelcol.map((item, i) => (\n                    <SelectItem value={item.id} key={i} text = {item} />\n                            ))}\n            </Select>\n        \n              </div>\n             \n\n\n      </div>\n\n\t);\n\t\n}\n\nexport default Sdataset;","import React, { useState} from 'react';\nimport FileTest from './Filetest';\nimport Sdataset from './Sdataset';\n\nimport { RadioButtonGroup, RadioButton  } from 'carbon-components-react';\n\n\nfunction Datainput({ setbuttonstate, setchoice, setLabelInput, setuLabelInput, setfilepath, setfilename,  setufilepath, setufilename, ulabelerr, labelerr, dataseterr}) {\n\nconst [displayCOption, setdisplayCOption] = useState('');\nconst [displaySOption, setdisplaySOption] = useState('');\n\n var showCustomOption = () => {\n    \n    setchoice('upload');\n    setdisplayCOption('Show');\n    setdisplaySOption('');\n\n\n } \n\n var showSampleOption = () => { \n    setchoice('sample');\n    setdisplaySOption('Show');\n    setdisplayCOption('');\n }\n\n  return (\n    <>\n    \n    <RadioButtonGroup legendText=\"Choose the type of Dataset\" name=\"radio-button-group\" >\n      <RadioButton labelText=\"Upload your Dataset ( < 15 MB )\" value=\"customdt\" id=\"customdt\" onClick={showCustomOption} />\n      <RadioButton labelText=\"Use Sample Datasets\" value=\"sampledt\" id=\"sampledt\" onClick={showSampleOption} />\n    </RadioButtonGroup>\n\n    <br/>\n    <br/>\n  \n\n    {displayCOption &&    \n    <div id=\"custom-dataset\">\n      <FileTest ulabelerr = {ulabelerr} setuLabelInput = {setuLabelInput} setufilepath = {setufilepath} setufilename = {setufilename} />\n    </div>}\n\n    {displaySOption &&  \n    <div id=\"sample-dataset\">\n      <Sdataset setbuttonstate = {setbuttonstate} setLabelInput = {setLabelInput} setfilepath = {setfilepath} setfilename = {setfilename} labelerr = {labelerr} dataseterr = {dataseterr} />\n    </div>}\n    \n       <br/>        \n     \n    </>\n  );\n};\n\nexport default Datainput;\n","import React, { useState} from 'react';\nimport { Button, Loading, Form, TextInput} from 'carbon-components-react';\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  TableContainer\n} from 'carbon-components-react';\nimport parse from 'html-react-parser';\n\nfunction  Results() {\n\n  const [jobid , setjobid] = useState('');\n  const [msg , setmsg] = useState('');\n  const [metric , setmetric] = useState('');\n  const [methodology , setmethodology] = useState('');\n  const [fresult , setfresult] = useState('');\n  const [score , setscore] = useState('');\n  const [isLoading,setLoading] = useState(false);\n\n  const [numbercolumns, setnumbercolumns] = useState('');\n  const [numbersamples, setnumbersamples] = useState('');\n  const [datecolumns, setdatecolumns] = useState('');\n  const [numericalcolumns, setnumericalcolumns] = useState('');\n  const [stringcolumns, setstringcolumns] = useState('');\n\n\n  const onSubmit = (e) => {\n     setLoading(true);\n     e.preventDefault();\n    \n    callResults()\n    .then((resp) => {\n      \n      console.log(\"RES: \", resp[\"Job ID\"])\n      console.log(\"RES MSG: \", resp[\"Message\"])\n      console.log(\"RES Metric : \", resp[\"String Col\"])\n\n      if(resp[\"Metric\"] === \"Data Profiler\"){\n        setjobid(resp[\"Job ID\"]);\n        setmsg(resp[\"Message\"]);\n        setmetric(resp[\"Metric\"]);\n        setmethodology(resp[\"Methodology\"]);\n        setnumbercolumns(resp[\"Number of Columns\"]);\n        setnumbersamples(resp[\"Number of Samples\"]);\n        setdatecolumns(resp[\"Date Col\"].toString());\n        setnumericalcolumns(resp[\"Numerical Col\"].toString());\n        setstringcolumns(resp[\"String Col\"].toString());\n        setLoading(false);\n      }\n\n      else{\n      setjobid(resp[\"Job ID\"]);\n      setmsg(resp[\"Message\"]);\n      setmetric(resp[\"Metric\"]);\n      setmethodology(resp[\"Methodology\"]);\n      setfresult(resp[\"Result\"]);\n      setscore(resp[\"Score\"]);\n      setLoading(false);\n      }\n      \n    })\n    .catch((err) => {\n      console.log(err)\n      setLoading(false);\n    });\n     \n  }\n  \n   const callResults = async () => {\n\n      let response = await fetch('/results?jobid=' + jobid);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n  };\n\n var headers = [];\n var rows = [];\n\n  if(metric === \"Data Profiler\"){\n    headers = [\n  {\n    key: 'jobid',\n    header: 'Job ID',\n  },\n  {\n    key: 'message',\n    header: 'Message',\n  },\n  {\n    key: 'metric',\n    header: 'Metric',\n  },\n  {\n    key: 'methodology',\n    header: 'Methodology',\n  },\n  {\n    key: 'numbercolumns',\n    header: 'Number of Columns',\n  },\n    {\n    key: 'numbersamples',\n    header: 'Number of Samples',\n  },\n    {\n    key: 'datecolumns',\n    header: 'Date Columns',\n  },\n  \n  {\n    key: 'numericalcolumns',\n    header: 'Numerical Columns',\n  },\n  {\n    key: 'stringcolumns',\n    header: 'String Columns',\n  }\n  \n];\n\n rows = [\n  {\n    id: 'a',\n    jobid: jobid,\n    message: msg,\n    metric: metric,\n    methodology: methodology,\n    numbercolumns: numbercolumns,\n    numbersamples: numbersamples,\n    datecolumns: datecolumns,\n    numericalcolumns: numericalcolumns,\n    stringcolumns: stringcolumns\n  }\n];\n\n  }\n\n  else{\n    \n  headers = [\n  {\n    key: 'jobid',\n    header: 'Job ID',\n  },\n  {\n    key: 'message',\n    header: 'Message',\n  },\n  {\n    key: 'metric',\n    header: 'Metric',\n  },\n  {\n    key: 'methodology',\n    header: 'Methodology',\n  },\n  {\n    key: 'result',\n    header: 'Result',\n  },\n  {\n    key: 'score',\n    header: 'Score',\n  },\n  \n];\n\n rows = [\n  {\n    id: 'a',\n    jobid: jobid,\n    message: msg,\n    metric: metric,\n    methodology: methodology,\n    result: parse(fresult),\n    score: score\n  }\n];\n  \n  }\n  \n \n\n  \n    return (\n     <div>\n\n      <Form autoComplete=\"off\" onSubmit={onSubmit}>\n\n      <h2>Fetch Processed Results </h2>\n      <br/>\n      <br/>\n      <TextInput id={'result'} labelText = {'Fetch Results'} placeholder = {'Job ID'} value={jobid} onChange={(e) => setjobid(e.target.value)} />\n      <br/>\n      <div className=\"ButtonArea\">\n          <Button className = \"parameterbutton\" kind=\"tertiary\" type=\"submit\"  > Fetch Results </Button>\n      </div>\n    </Form>\n        \n        {/* <Button type=\"submit\" onClick={testingHandler} > Testing for Label and Dataset </Button> */}\n        <br/>\n        <br/>\n        {/* <Button className = \"parameterbutton\" disabled = {buttonstate} kind=\"ghost\" type=\"submit\" onClick={onClickHandler} > Fetch Results </Button> */}\n      \n\n\n\n       <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n\n\n\n         { methodology && <DataTable rows={rows} headers={headers}>\n              {({ rows, headers, getTableProps, getHeaderProps, getRowProps }) => (\n                <TableContainer title=\"Results Analysis\">\n                <Table {...getTableProps()}>\n                  <TableHead>\n                    <TableRow>\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {rows.map((row) => (\n                      <TableRow {...getRowProps({ row })}>\n                        {row.cells.map((cell) => (\n                          <TableCell key={cell.id}>{cell.value}</TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                 </TableContainer>\n              )}\n          </DataTable>}\n\n\n      </div>\n    );\n  \n}\n\nexport default Results;\n\n//a0d2ba00-ed7f-4966-b4c8-a4cb87ab42f7","import React, { useState} from 'react';\nimport { Button, Loading, TableContainer, CodeSnippet, ToastNotification} from 'carbon-components-react';\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n} from 'carbon-components-react';\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { CopyFile24 } from '@carbon/icons-react';\n\nfunction Dataquality({ choice, LabelInput, uLabelInput, filepath, filename, ufilepath, ufilename, setulabelerr, setlabelerr, setdataseterr}) {\n\n  const [jobid , setjobid] = useState('');\n  const [msg , setmsg] = useState('');\n  const [isLoading,setLoading] = useState(false);\n  const [buttonstate, setbuttonstate] = useState(false);\n  const [err1status, seterr1status] = useState(false);\n\n  const onLPClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       console.log(\"TESTING (API End): Upload file chosen: \", ufilename);\n       console.log(\"TESTING (API End): Upload Label applied for Metric: \", uLabelInput);\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          //alert(\"No File uploaded\");\n          seterr1status(true);\n          setLoading(false);\n          //setbuttonstate(true)\n        }\n\n        else{\n\n          if(!uLabelInput){\n            setulabelerr(true);\n            setLoading(false);\n          }\n          else{\n            setulabelerr(false);\n            callLabelpurity()\n              .then((resp) => {\n                // console.log(\"RES: \", resp[\"JobID\"])\n                // console.log(\"RES MSG: \", resp[\"message\"])\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n          }\n        }\n    }\n\n    if(choice === \"sample\"){\n\n      console.log(\"TESTING (API End): Sample file chosen: \", filename);\n      console.log(\"TESTING (API End): Label applied for Metric: \", LabelInput);\n      \n      if((filename === \"Select Dataset\" || filename === \"\")){\n          console.log('select dataset chosen');\n          setdataseterr(true);\n          setLoading(false);\n          //setbuttonstate(true);\n        \n        }\n      \n      else{\n        \n        setdataseterr(false);\n        if((LabelInput === \"Select Column\" || LabelInput === \"\")){\n          setlabelerr(true);\n          // seterr2status(true);\n          setLoading(false);\n        }\n        else{\n          setlabelerr(false);\n          callLabelpurity()\n              .then((resp) => {\n                // console.log(\"RES: \", resp[\"JobID\"])\n                // console.log(\"RES MSG: \", resp[\"message\"])\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n        }\n      }\n        \n\n    }\n\n  }\n\n  const onODClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       console.log(\"TESTING (API End): Upload file chosen: \", ufilename);\n       console.log(\"TESTING (API End): Upload Label applied for Metric: \", uLabelInput);\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          //alert(\"No File uploaded\");\n          seterr1status(true);\n          setLoading(false);\n          //setbuttonstate(true)\n        }\n    \n        else{\n\n          if(!uLabelInput){\n            setulabelerr(true);\n            setLoading(false);\n          }\n          else{\n            setulabelerr(false);\n             callOutlierdetection()\n              .then((resp) => {\n                // console.log(\"RES: \", resp[\"JobID\"])\n                // console.log(\"RES MSG: \", resp[\"message\"])\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n            }\n    }\n  }\n\n    if(choice === \"sample\"){\n\n      console.log(\"TESTING (API End): Sample file chosen: \", filename);\n      console.log(\"TESTING (API End): Label applied for Metric: \", LabelInput);\n      \n      if((filename === \"Select Dataset\" || filename === \"\")){\n          setdataseterr(true);\n          // setbuttonstate(true)\n          setLoading(false);\n        }\n       else{\n        \n        setdataseterr(false);\n        if((LabelInput === \"Select Column\" || LabelInput === \"\")){\n          setlabelerr(true);\n          // seterr2status(true);\n          setLoading(false);\n        }\n        else{\n          setlabelerr(false);\n             callOutlierdetection()\n              .then((resp) => {\n                // console.log(\"RES: \", resp[\"JobID\"])\n                // console.log(\"RES MSG: \", resp[\"message\"])\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n        }\n      }\n  }\n}\n  const onCPClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       console.log(\"TESTING (API End): Upload file chosen: \", ufilename);\n       console.log(\"TESTING (API End): Upload Label applied for Metric: \", uLabelInput);\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          //alert(\"No File uploaded\");\n          seterr1status(true);\n          setLoading(false);\n          //setbuttonstate(true)\n        }\n      \n          else{\n\n          if(!uLabelInput){\n            setulabelerr(true);\n            setLoading(false);\n          }\n          else{\n            setulabelerr(false);\n              callClassparity()\n                .then((resp) => {\n                  // console.log(\"RES: \", resp[\"JobID\"])\n                  // console.log(\"RES MSG: \", resp[\"message\"])\n                  setjobid(resp[\"JobID\"]);\n                  setmsg(resp[\"message\"]);\n                  setLoading(false);\n                })\n                .catch((err) => {\n                  console.log(err)\n                  setLoading(false);\n                });\n            }\n        }\n       \n    }\n\n    if(choice === \"sample\"){\n\n      console.log(\"TESTING (API End): Sample file chosen: \", filename);\n      console.log(\"TESTING (API End): Label applied for Metric: \", LabelInput);\n      \n        if((filename === \"Select Dataset\" || filename === \"\")){\n          setdataseterr(true);\n          // setbuttonstate(true)\n          setLoading(false);\n        }\n\n      else{\n        \n        setdataseterr(false);\n        if((LabelInput === \"Select Column\" || LabelInput === \"\")){\n          setlabelerr(true);\n          // seterr2status(true);\n          setLoading(false);\n        }\n        else{\n          setlabelerr(false);\n            callClassparity()\n                .then((resp) => {\n                  // console.log(\"RES: \", resp[\"JobID\"])\n                  // console.log(\"RES MSG: \", resp[\"message\"])\n                  setjobid(resp[\"JobID\"]);\n                  setmsg(resp[\"message\"]);\n                  setLoading(false);\n                })\n                .catch((err) => {\n                  console.log(err)\n                  setLoading(false);\n                });\n        }\n      }\n     \n    }  \n  }\n  \n const onCOClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       console.log(\"TESTING (API End): Upload file chosen: \", ufilename);\n       console.log(\"TESTING (API End): Upload Label applied for Metric: \", uLabelInput);\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          //alert(\"No File uploaded\");\n          seterr1status(true);\n          setLoading(false);\n          //setbuttonstate(true)\n        }\n       else{\n\n          if(!uLabelInput){\n            setulabelerr(true);\n            setLoading(false);\n          }\n          else{\n            setulabelerr(false);\n             callClassoverlap()\n              .then((resp) => {\n                // console.log(\"RES: \", resp[\"JobID\"])\n                // console.log(\"RES MSG: \", resp[\"message\"])\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n            }\n      }  \n    }\n\n    if(choice === \"sample\"){\n\n      console.log(\"TESTING (API End): Sample file chosen: \", filename);\n      console.log(\"TESTING (API End): Label applied for Metric: \", LabelInput);\n      \n      if((filename === \"Select Dataset\" || filename === \"\")){\n          setdataseterr(true);\n          // setbuttonstate(true)\n          setLoading(false);\n        }\n      \n      else{\n        \n        setdataseterr(false);\n        if((LabelInput === \"Select Column\" || LabelInput === \"\")){\n          setlabelerr(true);\n          // seterr2status(true);\n          setLoading(false);\n        }\n        else{\n          setlabelerr(false);\n             callClassoverlap()\n              .then((resp) => {\n                // console.log(\"RES: \", resp[\"JobID\"])\n                // console.log(\"RES MSG: \", resp[\"message\"])\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n        }\n      }\n     \n   \n    }\n  }\n    \n \n  const callClassparity = async () => {\n\n    if(choice === \"upload\"){\n      let response = await fetch('/classparity?label=' + uLabelInput + '&fpath=' + ufilepath + '&fname=' + ufilename);\n      console.log(\"upload req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/classparity?label=' + LabelInput + '&fpath=' + filepath + '&fname=' + filename);\n      console.log(\"sample req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callLabelpurity= async () => {\n\n    if(choice === \"upload\"){\n      let response = await fetch('/labelpurity?label=' + uLabelInput + '&fpath=' + ufilepath + '&fname=' + ufilename);\n      console.log(\"upload req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/labelpurity?label=' + LabelInput + '&fpath=' + filepath + '&fname=' + filename);\n      console.log(\"sample req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callClassoverlap = async () => {\n    if(choice === \"upload\"){\n      let response = await fetch('/classoverlap?label=' + uLabelInput + '&fpath=' + ufilepath + '&fname=' + ufilename);\n      console.log(\"upload req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/classoverlap?label=' + LabelInput + '&fpath=' + filepath + '&fname=' + filename);\n      console.log(\"sample req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      console.log(\"sample response:  \", body);\n\n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callOutlierdetection= async () => {\n    if(choice === \"upload\"){\n      let response = await fetch('/outlierdetection?label=' + uLabelInput + '&fpath=' + ufilepath + '&fname=' + ufilename);\n      console.log(\"upload req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/outlierdetection?label=' + LabelInput + '&fpath=' + filepath + '&fname=' + filename);\n      console.log(\"sample req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n  };\n\n  function err1closef() {\n    seterr1status(false);\n  }\n  \n  const headers = [\n  {\n    key: 'jobid',\n    header: 'Job ID',\n  },\n  {\n    key: 'message',\n    header: 'Message',\n  },\n  {\n    key:'copyfunc',\n    header:''\n  }\n  \n];\n  const rows = [\n  {\n    id: 'a',\n    jobid: jobid,\n    message: msg,\n    copyfunc:  <CopyToClipboard text={jobid}>\n      <CodeSnippet type=\"inline\" feedback=\"Copied to clipboard\" ><CopyFile24 Style = \"width: 24px ; height: 24px\" /></CodeSnippet>\n    </CopyToClipboard> \n\n  }\n];\n  \n    return (\n     <div className = \"dqdiv\">\n         <div className=\"ButtonArea\">\n           <Button className = \"parameterbutton\" kind=\"tertiary\" type=\"submit\" onClick={onCOClickHandler} > Get Class Overlap </Button>\n           <Button className = \"parameterbutton\" kind=\"tertiary\" type=\"submit\" onClick={onLPClickHandler} > Get Label Purity </Button>\n           <Button className = \"parameterbutton\" kind=\"tertiary\" type=\"submit\" onClick={onODClickHandler} > Detect Outliers </Button>\n           <Button className = \"parameterbutton\" kind=\"tertiary\" type=\"submit\" onClick={onCPClickHandler} > Get Class Parity </Button>\n            \n            {/* <Button className = \"parameterbutton\" disabled = {buttonstate} kind=\"tertiary\" type=\"submit\" onClick={onCPClickHandler} > Get Class Parity </Button> */}\n\n         </div>\n\n  {err1status && \n    <ToastNotification\n        // caption=\"00:00:00 AM\"\n        iconDescription=\"Close notification\"\n        subtitle={<span>No File uploaded</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n      <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n         { jobid && <div className = \"TableDisplay\" >\n         { jobid && <DataTable rows={rows} headers={headers}>\n              {({ rows, headers, getTableProps, getHeaderProps, getRowProps }) => \n              (\n                <TableContainer title=\"Parameter Job\">\n                <Table {...getTableProps()}>\n                  <TableHead>\n                    <TableRow>\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {rows.map((row) => (\n                      <TableRow {...getRowProps({ row })}>\n                        {row.cells.map((cell) => (\n                          <TableCell key={cell.id}>{cell.value}</TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                 </TableContainer>\n              )}\n          </DataTable>}\n          </div>}\n          \n\n      </div>\n    );\n  \n}\n\nexport default Dataquality;","import axios from 'axios';\nimport { Button, ToastNotification } from 'carbon-components-react';\n// import { settings } from 'carbon-components';\nimport {\n  FileUploaderItem,\n  FileUploaderDropContainer\n} from 'carbon-components-react';\nimport React, { useState, useCallback, useEffect} from 'react';\nlet lastId = 0;\nfunction uid(prefix = 'id') {\n  lastId++;\n  return `${prefix}${lastId}`;\n}\n\n// const { prefix } = settings;\n\nfunction Filetest1({setufilepath, setufilename}) {\n\n    const [selectedFile, setselectedFile] = useState({});\n    const [loaded, setloaded] = useState(1);\n    const [uploadbuttonstate, setuploadbuttonstate] = useState(false);\n    const [notifystatus, setnotifystatus] = useState(false);\n\n  var global_filename = 'datafolder/data.csv';\n\n  const onClickHandler = () => {\n    // console.log(\"click handler \",selectedFile);\n\n   const data = new FormData()\n   data.append('file', selectedFile)\n   axios.post(\"/upload\", data, { \n  })\n  .then(res => { \n    console.log(\"file response:\", res);\n   if(res.status === 200 && loaded === 0){\n      //alert(\"File Upload Successful\");\n      setnotifystatus(true);\n      setufilepath(global_filename);\n      setufilename('data.csv');\n    }\n\n\n })\n}\n  const [files, setFiles] = useState([]);\n\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n     e.stopPropagation();\n     console.log(e);\n  };\n\n  const handleDragover = (e) => {\n    e.preventDefault();\n     e.stopPropagation();\n     console.log(e);\n     \n  };\n  \n  useEffect(() => {\n    document.addEventListener('drop', handleDrop);\n    document.addEventListener('dragover', handleDragover);\n    return () => {\n      document.removeEventListener('drop', handleDrop);\n      document.removeEventListener('dragover', handleDragover);\n      \n    };\n  }, []);\n\n  \n\n  const uploadFile = async (fileToUpload) => {\n    // file size validation\n\n    if (fileToUpload.filesize <= 15000000)\n    {\n        setuploadbuttonstate(false);\n    }\n    else\n    {\n        const updatedFile = {\n            ...fileToUpload,\n            status: 'edit',\n            iconDescription: 'Delete file',\n            invalid: true,\n            errorSubject: 'File size exceeds limit',\n            errorBody: 'Max file size is 15MB. Select a new file and try again.',\n          };\n          setuploadbuttonstate(true);\n          setFiles((files) =>\n            files.map((file) =>\n              file.uuid === fileToUpload.uuid ? updatedFile : file\n            )\n          );\n          return;\n    }\n\n    // file type validation\n    if (fileToUpload.invalidFileType) {\n      const updatedFile = {\n        ...fileToUpload,\n        status: 'edit',\n        iconDescription: 'Delete file',\n        invalid: true,\n        errorSubject: 'Invalid file type',\n        errorBody: `\"${fileToUpload.name}\" does not have a valid file type.`,\n      };\n      setFiles((files) =>\n        files.map((file) =>\n          file.uuid === fileToUpload.uuid ? updatedFile : file\n        )\n      );\n      return;\n    }\n    try {\n      const response = await fetch(\n        'https://www.mocky.io/v2/5185415ba171ea3a00704eed?mocky-delay=1000ms',\n        {\n          method: 'POST',\n          mode: 'cors',\n          body: fileToUpload,\n        }\n      );\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const updatedFile = {\n        ...fileToUpload,\n        status: 'complete',\n        iconDescription: 'Upload complete',\n      };\n      setFiles((files) =>\n        files.map((file) =>\n          file.uuid === fileToUpload.uuid ? updatedFile : file\n        )\n      );\n\n      // show x icon after 1 second\n      setTimeout(() => {\n        const updatedFile = {\n          ...fileToUpload,\n          status: 'edit',\n          iconDescription: 'Remove file',\n        };\n        setFiles((files) =>\n          files.map((file) =>\n            file.uuid === fileToUpload.uuid ? updatedFile : file\n          )\n        );\n      }, 1000);\n    } catch (error) {\n      const updatedFile = {\n        ...fileToUpload,\n        status: 'edit',\n        iconDescription: 'Upload failed',\n        invalid: true,\n      };\n      setFiles((files) =>\n        files.map((file) =>\n          file.uuid === fileToUpload.uuid ? updatedFile : file\n        )\n      );\n      console.log(error);\n    }\n  };\n\n  // const onAddFiles = \n  //   (evt, { addedFiles }) => {\n  //     evt.stopPropagation();\n      // const newFiles = addedFiles.map((file) => ({\n      //   uuid: uid(),\n      //   name: file.name,\n      //   filesize: file.size,\n      //   status: 'uploading',\n      //   iconDescription: 'Uploading',\n      // }));\n\n  //     if (newFiles[0]) {\n  //       setFiles([newFiles[0]]);\n  //       uploadFile(newFiles[0]);\n\n  //       //setselectedFile(evt.target.files[0]); // rn both methods work but NO FILE STORED\n  //       }\n\n  //      console.log(\"onaddfiles evoked\");\n\n    //  if (newFiles[0]) {\n    //     setFiles([newFiles[0]]);\n    //     uploadFile(newFiles[0]);\n        // setloaded(0);\n      // }\n        // setselectedFile(evt.target.files[0]); manual add works with this + file gets stored\n\n      \n    // }\n\nconst onAddFiles = useCallback((evt, { addedFiles }) => {\n    evt.stopPropagation();\n    const newFiles = addedFiles.map((file) => ({\n        uuid: uid(),\n        name: file.name,\n        filesize: file.size,\n        status: 'uploading',\n        iconDescription: 'Uploading',\n      }));\n    console.log(\"addedFiles[0]\")\n      if (addedFiles[0]) {\n        console.log(\"addedFiles[0]:\", addedFiles[0]);\n        setloaded(0);\n        setFiles([newFiles[0]]);\n        uploadFile(newFiles[0]);\n        setselectedFile(addedFiles[0]);\n        }\n      else{\n        console.log(\"No file uploaded : filetest\");\n      }\n    }\n  );\n\n  const handleFileUploaderItemClick = useCallback(\n    (_, { uuid: clickedUuid }) =>\n      setFiles(files.filter(({ uuid }) => clickedUuid !== uuid)),\n    [files]\n  );\n\n\tfunction notifystatusf() {\n    setnotifystatus(false);\n  }\n\n\treturn (\n\n    <div className=\"bx--file__container\" >\n\n      <FileUploaderDropContainer\n        // name=\"productLogo\"\n        labelText=\"Drag and drop here or click to upload\"\n        onAddFiles={onAddFiles}\n        accept={['.csv']}\n         />\n\n       {/* <FileUploaderDropContainer accept={['.csv']} onAddFiles={onAddFiles} /> */}\n      <div className=\"uploaded-files\" style={{ width: '100%' }}>\n        {files.map(\n          ({\n            uuid,\n            name,\n            filesize,\n            status,\n            iconDescription,\n            invalid,\n            ...rest\n          }) => (\n            <FileUploaderItem\n              key={uid()}\n              uuid={uuid}\n              name={name}\n              filesize={filesize}\n              size=\"lg\"\n              status={status}\n              iconDescription={iconDescription}\n              invalid={invalid}\n              onDelete={handleFileUploaderItemClick}\n              {...rest}\n            />\n          )\n        )}\n      </div>\n\n      <div className=\"ButtonArea\">\n         <Button type=\"submit\" disabled = {uploadbuttonstate} onClick= {onClickHandler} >Upload </Button>\n      </div>\n\n  {notifystatus && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>File Upload Successful</span>}\n        timeout={3000}\n        onClose = {notifystatusf}\n        kind = 'success'\n        title=\"Success Notification\"\n      />\n      }\n\n      </div>\n\n\t);\n\t\n}\n\nexport default Filetest1;","import { Select, SelectItem} from 'carbon-components-react';\nimport React, { useState} from 'react';\n\nfunction Sdataset1({setfilepath, setfilename, dataseterr1}) {\n   \n\n  const dataset = [\n  \n    {\n    id: '',\n    value: 'Select Dataset',\n  },\n\n  {\n    id: 'adult.csv',\n    value: 'adult.csv',\n  },\n  {\n    id: 'breast-cancer.csv',\n    value: 'breast-cancer.csv',\n  },\n  {\n    id: 'credit-g.csv',\n    value: 'credit-g.csv',\n  },\n];\n\n// const bcancerlabels = [ 'Select Column',\n//   'Class',       'age',\n//   'menopause',   'tumor-size',\n//   'inv-nodes',   'node-caps',\n//   'deg-malig',   'breast',\n//   'breast-quad', 'irradiat'\n// ];\n\n// const creditlabels = [ 'Select Column',\n//   'checking_status', 'duration',\n//   'credit_history',  'purpose',\n//   'credit_amount',   'savings_status',\n//   'employment',      'installment_commitment',\n//   'personal_status', 'other_parties',\n//   'residence_since', 'property_magnitude',\n//   'age',             'other_payment_plans',\n//   'housing',         'existing_credits',\n//   'job',             'num_dependents',\n//   'own_telephone',   'foreign_worker',\n//   'class'\n// ];\n\n// const adultlabels = [ 'Select Column',\n//   'age',            'workclass',\n//   'fnlwgt',         'education',\n//   'education-num',  'marital-status',\n//   'occupation',     'relationship',\n//   'race',           'sex',\n//   'capital-gain',   'capital-loss',\n//   'hours-per-week', 'native-country',\n//   'income'\n// ];\n\n\nvar [datasetquery, setdatasetquery] = useState(dataset[0].id);\n// var [labelcol, setlabelcol] = useState(['']);\n\nconst handledatasetChange = (event) => \n\n{\n    \n    setdatasetquery(event.target.value);\n    // setlabelcol(['']);\n    setfilepath(event.target.value);\n    setfilename(event.target.options[event.target.options.selectedIndex].text);\n    \n\n\n    setTimeout(() => {\n      if(event.target.value  === \"credit-g.csv\"){\n    //   setlabelcol(creditlabels);\n    }\n  \n  else if(event.target.value  === \"breast-cancer.csv\"){\n    //   setlabelcol(bcancerlabels);\n    }\n  else if(event.target.value  === 'adult.csv'){\n        //   setlabelcol(adultlabels);      \n    }\n\n    }, 100);\n\n    console.log(\"(On dataset change): Sample file chosen: \", event.target.options[event.target.options.selectedIndex].text);\n    // console.log(\"(On dataset change): F1 Index value: \", event.target.options.selectedIndex);\n    // console.log(\"TESTING (On dataset change): Label applied for Metric: \", LabelInput);\n  };\n\n\n  \n  \n    // const labelSubmit = (e) => {\n\n    //   setLabelInput(e.target[e.target.selectedIndex].text);      \n    //   console.log(\"Label: \", e.target[e.target.selectedIndex].text);\n\n    // }\n\n \n\t\n\treturn (\n\n        <div className=\"tab\">\n            <Select labelText=\"Sample Dataset*\" invalidText=\"Choose Dataset\" invalid = {dataseterr1}  size = \"lg\" value={datasetquery} onChange={handledatasetChange}>\n                {dataset.map((item, i) => (\n                    <SelectItem value={item.id} key={i} text = {item.value} />\n                            ))}\n            </Select>\n\n\n            <br/>\n            <br/>\n\n             {/* <Select labelText=\"Label Column\" invalidText=\"Choose Dataset and Label Column\" invalid = {labelerr} size = \"lg\" onChange = {labelSubmit}> */}\n              \n              {/* <SelectItem text=\"Choose a Label Column\"  /> */}\n\n                {/* {labelcol.map((item, i) => (\n                    <SelectItem value={item.id} key={i} text = {item} />\n                            ))}\n            </Select> */}\n        \n              \n\n\n      </div>\n\n\t);\n\t\n}\n\nexport default Sdataset1;","import React, { useState} from 'react';\nimport FileTest1 from './Filetest1';\nimport Sdataset1 from './Sdataset1';\n\nimport { RadioButtonGroup, RadioButton  } from 'carbon-components-react';\n\n\nfunction Datainput1({ setbuttonstate, setchoice, setfilepath, setfilename,  setufilepath, setufilename, ulabelerr, labelerr, dataseterr1}) {\n\nconst [displayCOption1, setdisplayCOption1] = useState('');\nconst [displaySOption1, setdisplaySOption1] = useState('');\n\n var showCustomOption1 = () => {\n    \n    setchoice('upload');\n    setdisplayCOption1('Show');\n    setdisplaySOption1('');\n\n\n } \n\n var showSampleOption1 = () => { \n    setchoice('sample');\n    setdisplaySOption1('Show');\n    setdisplayCOption1('');\n }\n\n  return (\n    <>\n    \n    <RadioButtonGroup legendText=\"Choose the type of Dataset\" name=\"radio-button-group1\" >\n      <RadioButton labelText=\"Upload your Dataset ( < 15 MB )\" value=\"customdt1\" id=\"customdt1\" onClick={showCustomOption1} />\n      <RadioButton labelText=\"Use Sample Datasets\" value=\"sampledt1\" id=\"sampledt1\" onClick={showSampleOption1} />\n    </RadioButtonGroup>\n\n    <br/>\n    <br/>\n\n    {displayCOption1 &&    \n    <div id=\"custom-dataset1\">\n      <FileTest1 setufilepath = {setufilepath} setufilename = {setufilename} />\n    </div>}\n\n    {displaySOption1 &&  \n    <div id=\"sample-dataset1\">\n      <Sdataset1 setbuttonstate = {setbuttonstate} setfilepath = {setfilepath} setfilename = {setfilename} dataseterr1 = {dataseterr1} />\n    </div>}\n    \n       <br/>        \n      {/* <br/> */}\n    </>\n  );\n};\n\nexport default Datainput1;\n","import React, { useState} from 'react';\nimport { Button, Loading, TableContainer, CodeSnippet, ToastNotification} from 'carbon-components-react';\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n} from 'carbon-components-react';\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { CopyFile24 } from '@carbon/icons-react';\n\nfunction Datasetquality({ choice, filepath, filename, ufilepath, ufilename, setdataseterr1}) {\n\n  const [jobid , setjobid] = useState('');\n  const [msg , setmsg] = useState('');\n  const [isLoading,setLoading] = useState(false);\n  const [buttonstate, setbuttonstate] = useState(false);\n  const [err1status, seterr1status] = useState(false);\n\n  const onDCClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       console.log(\"TESTING (API End): Upload file chosen: \", ufilename);\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          //alert(\"No File uploaded\");\n          seterr1status(true);\n          setLoading(false);\n          //setbuttonstate(true)\n        }\n      else{\n        //console.log('file uploaded: ', ufilepath);\n        callDatacompleteness()\n          .then((resp) => {\n            // console.log(\"RES: \", resp[\"JobID\"])\n            // console.log(\"RES MSG: \", resp[\"message\"])\n            setjobid(resp[\"JobID\"]);\n            setmsg(resp[\"message\"]);\n            setLoading(false);\n          })\n          .catch((err) => {\n            console.log(err)\n            setLoading(false);\n          });\n      }\n    \n    }\n\n    if(choice === \"sample\"){\n\n      console.log(\"TESTING (API End): Sample file chosen: \", filename);\n      \n       if(filename === \"Select Dataset\" || filename === \"\"){\n          setdataseterr1(true);\n          setbuttonstate(true);\n          setLoading(false);\n          //console.log(\"DATASET NOT CHOSEN\");\n        }\n\n      else{\n        setdataseterr1(false);\n        setbuttonstate(false);\n\n        callDatacompleteness()\n          .then((resp) => {\n            // console.log(\"RES: \", resp[\"JobID\"])\n            // console.log(\"RES MSG: \", resp[\"message\"])\n            setjobid(resp[\"JobID\"]);\n            setmsg(resp[\"message\"]);\n            setLoading(false);\n          })\n          .catch((err) => {\n            console.log(err)\n            setLoading(false);\n          });\n      }\n\n    }\n\n  }\n\n  const onDDClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       console.log(\"TESTING (API End): Upload file chosen: \", ufilename);\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          //alert(\"No File uploaded\");\n          seterr1status(true);\n          setLoading(false);\n          //setbuttonstate(true)\n        }\n       else{\n         callDataduplicates()\n          .then((resp) => {\n            // console.log(\"RES: \", resp[\"JobID\"])\n            // console.log(\"RES MSG: \", resp[\"message\"])\n            setjobid(resp[\"JobID\"]);\n            setmsg(resp[\"message\"]);\n            setLoading(false);\n          })\n          .catch((err) => {\n            console.log(err)\n            setLoading(false);\n          });\n       }\n  \n    }\n\n    if(choice === \"sample\"){\n\n      console.log(\"TESTING (API End): Sample file chosen: \", filename);\n      \n       if(filename === \"Select Dataset\" || filename === \"\"){\n          setdataseterr1(true);\n          setbuttonstate(true);\n          setLoading(false);\n        }\n       \n      else{\n           setdataseterr1(false);\n           setbuttonstate(false)\n           callDataduplicates()\n              .then((resp) => {\n                // console.log(\"RES: \", resp[\"JobID\"])\n                // console.log(\"RES MSG: \", resp[\"message\"])\n                setjobid(resp[\"JobID\"]);\n                setmsg(resp[\"message\"]);\n                setLoading(false);\n              })\n              .catch((err) => {\n                console.log(err)\n                setLoading(false);\n              });\n      }\n\n\n    }\n  }\n\n  const onDHClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       console.log(\"TESTING (API End): Upload file chosen: \", ufilename);       \n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          //alert(\"No File uploaded\");\n          seterr1status(true);\n          setLoading(false);\n          //setbuttonstate(true)\n        }\n       \n       else{\n          callDatahomogeneity()\n            .then((resp) => {\n              // console.log(\"RES: \", resp[\"JobID\"])\n              // console.log(\"RES MSG: \", resp[\"message\"])\n              setjobid(resp[\"JobID\"]);\n              setmsg(resp[\"message\"]);\n              setLoading(false);\n            })\n            .catch((err) => {\n              console.log(err)\n              setLoading(false);\n            });\n        }\n    \n    }\n\n    if(choice === \"sample\"){\n\n      console.log(\"TESTING (API End): Sample file chosen: \", filename);\n      \n        if(filename === \"Select Dataset\" || filename === \"\"){\n          setdataseterr1(true);\n          setbuttonstate(true);\n          setLoading(false);\n        }\n\n        else{\n           setdataseterr1(false);\n           setbuttonstate(false);\n           callDatahomogeneity()\n            .then((resp) => {\n              // console.log(\"RES: \", resp[\"JobID\"])\n              // console.log(\"RES MSG: \", resp[\"message\"])\n              setjobid(resp[\"JobID\"]);\n              setmsg(resp[\"message\"]);\n              setLoading(false);\n            })\n            .catch((err) => {\n              console.log(err)\n              setLoading(false);\n            });\n        }\n    }\n  }\n  \n const onDPClickHandler = (e) => {\n\n    setLoading(true);\n    if(choice === \"upload\"){\n\n       console.log(\"TESTING (API End): Upload file chosen: \", ufilename);\n       \n       if(ufilename === \"\"){\n          console.log('No file uploaded');\n          //alert(\"No File uploaded\");\n          seterr1status(true);\n          setLoading(false);\n          //setbuttonstate(true)\n        }\n      else{\n        setdataseterr1(false);\n        setbuttonstate(false);\n         callDataprofile()\n        .then((resp) => {\n          // console.log(\"RES: \", resp[\"JobID\"])\n          // console.log(\"RES MSG: \", resp[\"message\"])\n          setjobid(resp[\"JobID\"]);\n          setmsg(resp[\"message\"]);\n          setLoading(false);\n        })\n        .catch((err) => {\n          console.log(err)\n          setLoading(false);\n        });\n\n      }\n    \n\n    }\n\n    if(choice === \"sample\"){\n\n      console.log(\"TESTING (API End): Sample file chosen: \", filename);\n      \n        if(filename === \"Select Dataset\" || filename === \"\"){\n          setdataseterr1(true);\n          setbuttonstate(true);\n          setLoading(false);\n\n        }\n\n        else{\n          setdataseterr1(false);\n          setbuttonstate(false);\n          callDataprofile()\n        .then((resp) => {\n          // console.log(\"RES: \", resp[\"JobID\"])\n          // console.log(\"RES MSG: \", resp[\"message\"])\n          setjobid(resp[\"JobID\"]);\n          setmsg(resp[\"message\"]);\n          setLoading(false);\n        })\n        .catch((err) => {\n          console.log(err)\n          setLoading(false);\n        });\n\n        }\n\n    }\n\n  }\n    \n \n  const callDatacompleteness = async () => {\n\n    if(choice === \"upload\"){\n      let response = await fetch('/datacompleteness?fpath=' + ufilepath + '&fname=' + ufilename);\n      console.log(\"upload req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/datacompleteness?fpath=' + filepath + '&fname=' + filename);\n      console.log(\"sample req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callDataduplicates = async () => {\n\n    if(choice === \"upload\"){\n      let response = await fetch('/dataduplicates?fpath=' + ufilepath + '&fname=' + ufilename);\n      console.log(\"upload req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/dataduplicates?fpath=' + filepath + '&fname=' + filename);\n      console.log(\"sample req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callDatahomogeneity = async () => {\n    if(choice === \"upload\"){\n      let response = await fetch('/datahomogeneity?fpath=' + ufilepath + '&fname=' + ufilename);\n      console.log(\"upload req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/datahomogeneity?fpath=' + filepath + '&fname=' + filename);\n      console.log(\"sample req api:  \", response[\"url\"]);\n      let body = await response.json();\n\n     console.log(\"BODY: \", body);\n\n\n      if (response.status !== 200) {\n        throw Error(body.message)\n         \n      }\n      return body.result;\n\n    }\n\n\n  };\n\n  const callDataprofile = async () => {\n    if(choice === \"upload\"){\n      let response = await fetch('/dataprofile?fpath=' + ufilepath + '&fname=' + ufilename);\n      console.log(\"upload req api:  \", response[\"url\"]);\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n    \n    }\n\n    if(choice === \"sample\"){\n\n      let response = await fetch('/dataprofile?fpath=' + filepath + '&fname=' + filename);\n      console.log(\"sample req api:  \", response[\"url\"]);\n\n      let body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      return body.result;\n\n    }\n  };\n\n    function err1closef() {\n    seterr1status(false);\n  }\n\n  const headers = [\n  {\n    key: 'jobid',\n    header: 'Job ID',\n  },\n  {\n    key: 'message',\n    header: 'Message',\n  },\n    {\n    key:'copyfunc',\n    header:''\n  }\n];\n  const rows = [\n  {\n    id: 'a',\n    jobid: jobid,\n    message: msg,\n    copyfunc:  <CopyToClipboard text={jobid}>\n      <CodeSnippet type=\"inline\" feedback=\"Copied to clipboard\" ><CopyFile24 /></CodeSnippet>\n    </CopyToClipboard> \n  }\n];\n  \n    return (\n     <div className = \"dqdiv\">\n         <div className=\"ButtonArea\">\n           <Button className = \"parameterbutton\"  kind=\"tertiary\" type=\"submit\" onClick={onDCClickHandler} > Data Completeness </Button>\n           <Button className = \"parameterbutton\"  kind=\"tertiary\" type=\"submit\" onClick={onDDClickHandler} > Data Duplicates </Button>\n           <Button className = \"parameterbutton\"  kind=\"tertiary\" type=\"submit\" onClick={onDHClickHandler} > Data Homogeneity </Button>\n           <Button className = \"parameterbutton\"  kind=\"tertiary\" type=\"submit\" onClick={onDPClickHandler} > Data Profile </Button>\n          {/* <Button className = \"parameterbutton\" disabled = {buttonstate} kind=\"tertiary\" type=\"submit\" onClick={onDPClickHandler} > Data Profile </Button> */}\n\n         </div>\n\n  {err1status && \n    <ToastNotification\n        // caption=\"00:00:00 AM\"\n        iconDescription=\"Close notification\"\n        subtitle={<span>No File uploaded</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n               <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n          \n         { jobid && <div className = \"TableDisplay\" >\n         { jobid && <DataTable rows={rows} headers={headers}>\n              {({ rows, headers, getTableProps, getHeaderProps, getRowProps }) => \n              (\n                <TableContainer title=\"Parameter Job\">\n                <Table {...getTableProps()}>\n                  <TableHead>\n                    <TableRow>\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {rows.map((row) => (\n                      <TableRow {...getRowProps({ row })}>\n                        {row.cells.map((cell) => (\n                          <TableCell key={cell.id}>{cell.value}</TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                 </TableContainer>\n              )}\n          </DataTable>}\n          </div>}\n\n      </div>\n    );\n  \n}\n\nexport default Datasetquality;\n\n      // if((filename === \"Select Dataset\" || \" \") || (filepath === \"\") || (LabelInput === \"Select Column\" || \"\"))\n      // {\n      //     setdataseterr(true);\n      //     setbuttonstate(true)\n      // }","import React, {useState} from 'react'\nimport './App.css';\n\nimport { Tabs, Tab } from 'carbon-components-react';\nimport {Header,HeaderName} from \"carbon-components-react/lib/components/UIShell\";\n\n\nimport Datainput from './components/datainput';\nimport Results from './components/getresults';\nimport Dataquality from './components/dataquality';\nimport Datainput1 from './components/datainput1';\nimport Datasetquality from './components/datasetquality';\n\n\nfunction App() {\n\n  const [LabelInput, setLabelInput] = useState('');\n  const [uLabelInput, setuLabelInput] = useState('');\n  const [ulabelerr, setulabelerr] = useState('');\n  const [ufilepath, setufilepath] = useState('');\n  const [ufilename, setufilename] = useState('');\n  const [filepath, setfilepath] = useState('');\n  const [filename, setfilename] = useState('');\n  const [labelerr, setlabelerr] = useState('');\n  const [dataseterr, setdataseterr] = useState('');\n  const [dataseterr1, setdataseterr1] = useState('');\n  const [choice, setchoice] = useState('upload');\n\n  const [buttonstate, setbuttonstate] = useState(true);\n\n  return (\n\n    <>\n     <Header aria-label=\"IBM\">\n       <HeaderName href=\"#\" prefix=\"\">\n            <div Style=\"white-space: nowrap;\">\n            Data Quality for AI Sample Application\n            </div>\n      </HeaderName>\n     </Header> \n\n    <div className=\"App\">\n      <div className = \"AppContent\">\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n\n       <Tabs type='container'>\n          <Tab id=\"tab-q1\" label=\"Data Quality\">\n            <h2> Data Quality Processing </h2>\n            <br/>\n            <br/>\n            <Datainput setbuttonstate = {setbuttonstate} setchoice = {setchoice} labelerr = {labelerr} dataseterr = {dataseterr} ulabelerr = {ulabelerr} setufilepath = {setufilepath} setufilename = {setufilename} setfilepath = {setfilepath} setfilename = {setfilename} setLabelInput = {setLabelInput} setuLabelInput = {setuLabelInput} />\n            \n            <h5> Check parameters </h5>\n            <br/>\n            <Dataquality buttonstate = {buttonstate} choice = {choice} setlabelerr = {setlabelerr} setulabelerr = {setulabelerr} setdataseterr = {setdataseterr} filepath = {filepath} filename = {filename} ufilepath = {ufilepath} ufilename = {ufilename} LabelInput = {LabelInput} uLabelInput = {uLabelInput} /> \n\n          </Tab>\n\n          <Tab id=\"tab-q2\" label=\"Dataset Quality\">\n            <h2> Data Quality Processing </h2>\n            <br/>\n            <br/>\n            <Datainput1 setbuttonstate = {setbuttonstate} setchoice = {setchoice} dataseterr1 = {dataseterr1}  setufilepath = {setufilepath} setufilename = {setufilename} setfilepath = {setfilepath} setfilename = {setfilename} />\n\n            <h5> Check parameters </h5>\n            <br/>\n            <Datasetquality buttonstate = {buttonstate} choice = {choice}  setdataseterr1 = {setdataseterr1} filepath = {filepath} filename = {filename} ufilepath = {ufilepath} ufilename = {ufilename} /> \n\n          </Tab>\n        </Tabs> \n\n        \n\n\n      {/* <Sdataset setSelectedcsv = {setSelectedcsv} setLabelInput = {setLabelInput}/> */}\n      {/* <Coverlap ufilepath = {ufilepath} ufilename = {ufilename} filepath = {filepath} filename = {filename} Selectedcsv = {Selectedcsv} LabelInput = {LabelInput} /> */}\n      {/* <FileTest setuLabelInput = {setuLabelInput} setufilepath = {setufilepath} setufilename = {setufilename} /> */}\n      {/* <Sdataset setLabelInput = {setLabelInput} setfilepath = {setfilepath} setfilename = {setfilename} labelerr = {labelerr} dataseterr = {dataseterr} /> */}\n      {/* <Coverlap ufilepath = {ufilepath} ufilename = {ufilename} filepath = {filepath} filename = {filename} LabelInput = {LabelInput} uLabelInput = {uLabelInput} /> */}\n      {/* <Classoverlap buttonstate = {buttonstate} choice = {choice} setlabelerr = {setlabelerr} setulabelerr = {setulabelerr} setdataseterr = {setdataseterr} filepath = {filepath} filename = {filename} ufilepath = {ufilepath} ufilename = {ufilename} LabelInput = {LabelInput} uLabelInput = {uLabelInput} />  */}\n      {/* <Demo/> */ }\n\n\n      <Results />\n\n      </div>\n    </div>\n\n    </>\n\n    \n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.scss\";\nimport \"./style.scss\";\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}