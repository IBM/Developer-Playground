<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">

  <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />
  <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-core.js"></script>
  <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-service.js"></script>
  <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-ui.js"></script>
  <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js"></script>

  
     <meta http-equiv="Content-type" content="text/html;charset=UTF-8">  
     <style type="text/css">
       .directions li span.arrow {
         display:inline-block;
         min-width:28px;
         min-height:28px;
         background-position:0px;
         background-image: url("https://heremaps.github.io/maps-api-for-javascript-examples/map-with-route-from-a-to-b/img/arrows.png");
         position:relative;
         top:8px;
       }
       .directions li span.depart  {
         background-position:-28px;
       }
       .directions li span.rightturn  {
         background-position:-224px;
       }
       .directions li span.leftturn{
         background-position:-252px;
       }
       .directions li span.arrive  {
         background-position:-1288px;
       }

       #map {
        width: 95%;
        height: 450px;
        /* background: grey; */
      }

      #panel {
        width: 100%;
        /* height: 400px; */
      }

       </style>
   
</head>

<script>

function openGC(evt, api) {
  var i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById(api).style.display = "block";
  evt.currentTarget.className += " active";
}

function openSS(evt, api1) {
  var i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("tabcontent1");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks1");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById(api1).style.display = "block";
  evt.currentTarget.className += " active";
}

function openPT(evt, api) {
  var i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById(api).style.display = "block";
  evt.currentTarget.className += " active";
}


  async function addrgeocode() {

  let query = document.getElementById("gquery").value;

  if (query === "") {
      window.alert("Required data values are missing");
    }
  else{

  query = query.replace(" ","+"); 
  document.getElementById("overlay").style.display = "block";

  let response = await fetch('/addrgeocode?query=' + query);
  let result = await response.json();

  console.log("RES: ", response);

  var table4 = document.getElementById("address-geocode");
  table4.style.display = "";

  var tbodyRef4 = document.getElementById('address-geocode').getElementsByClassName('tbody4')[0];
  tbodyRef4.innerHTML = '';
  tbodyRef4 = document.getElementById('address-geocode').getElementsByClassName('tbody4')[0];

    
    document.getElementById("stores").style.display = 'none';
    document.getElementById('closest-addr').style.display = 'none';

    document.getElementById("departures").style.display = 'none';
    document.getElementById("sub-departures").style.display = 'none';
    document.getElementById("stations").style.display = 'none';

    document.getElementById("overlay").style.display = "none";

    if(JSON.stringify(result) === JSON.stringify({})){
        //console.log("Results unavailable");
        window.alert("Results not found");
      }


  for (var key in result) {
    if (result.hasOwnProperty(key)){
      var val = result[key];

    var row = tbodyRef4.insertRow();
    var cell1 = row.insertCell(0);
    var cell2 = row.insertCell(1);
    var cell3 = row.insertCell(2);
    // var cell4 = row.insertCell(3);

    cell1.innerHTML = val["title"];
    cell2.innerHTML = val["address"];
    cell3.innerHTML = val["position"];
    // cell4.innerHTML = val["mapview"];

    }

  }
 }
}

  async function liststores() {

    let query = document.getElementById("g1query").value;
    let storequery = document.getElementById("squery").value;

    if ((query === "") || (storequery === "")) {
      window.alert("Required data values are missing");
    }
    else{

    query = storequery.concat(" ").concat(query)
    query = query.replace(" ","+"); 

    //console.log("Query:",query);
    document.getElementById("overlay").style.display = "block";
    
    let response = await fetch('/liststores?query=' + query);
    let result = await response.json();

    var table5 = document.getElementById("stores");
    table5.style.display = "";

    var tbodyRef5 = document.getElementById('stores').getElementsByClassName('tbody5')[0];
    tbodyRef5.innerHTML = '';
    tbodyRef5 = document.getElementById('stores').getElementsByClassName('tbody5')[0];

    
    document.getElementById("address-geocode").style.display = 'none';
    document.getElementById('closest-addr').style.display = 'none';

    document.getElementById("departures").style.display = 'none';
    document.getElementById("sub-departures").style.display = 'none';
    document.getElementById("stations").style.display = 'none';

    document.getElementById("overlay").style.display = "none";

    if(JSON.stringify(result) === JSON.stringify({})){
        //console.log("Results unavailable");
        window.alert("Results not found");
      }


    for (var key in result) {
      if (result.hasOwnProperty(key)){
        var val = result[key];

      var row = tbodyRef5.insertRow();
      var cell1 = row.insertCell(0);
      var cell2 = row.insertCell(1);
      var cell3 = row.insertCell(2);
    

      cell1.innerHTML = val["title"];
      cell2.innerHTML = val["address"];
      cell3.innerHTML = val["position"];
      

      }

    }
  }
}

  async function revaddrgeocode() {

    let lat = document.getElementById("latitude0").value;
    let long = document.getElementById("longitude0").value;


    if ((lat === "") || (long === "")) {
      window.alert("Required data values are missing");
    }
    else{

    let location = lat.concat(",").concat(long);

    document.getElementById("overlay").style.display = "block";

    let response = await fetch('/revaddrgeocode?location='+ location);
    let result = await response.json();

    var table6 = document.getElementById("closest-addr");
    table6.style.display = "";

    var tbodyRef6 = document.getElementById('closest-addr').getElementsByClassName('tbody6')[0];
    tbodyRef6.innerHTML = '';
    tbodyRef6 = document.getElementById('closest-addr').getElementsByClassName('tbody6')[0];

   
    document.getElementById("address-geocode").style.display = 'none';
    document.getElementById("stores").style.display = 'none';

    document.getElementById("departures").style.display = 'none';
    document.getElementById("sub-departures").style.display = 'none';
    document.getElementById("stations").style.display = 'none';
    

    document.getElementById("overlay").style.display = "none";

    if(JSON.stringify(result) === JSON.stringify({})){
        //console.log("Results unavailable");
        window.alert("Results not found");
      }

        var val = result;
        var row = tbodyRef6.insertRow();
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        // var cell4 = row.insertCell(3);

        cell1.innerHTML = val["address"];
        cell2.innerHTML = val["position"];
        cell3.innerHTML = val["distance"];
        // cell4.innerHTML = val["mapview"];

}

}


  async function getstations() {

    let lat = document.getElementById("tlatitude0").value;
    let long = document.getElementById("tlongitude0").value;

    if ((lat === "") || (long === "")) {
    window.alert("Required data values are missing");
    }
    else{

    let location = lat.concat(",").concat(long);

    document.getElementById("overlay").style.display = "block";

    let response = await fetch('/getstations?location='+ location);
    let result = await response.json();

    var table0 = document.getElementById("stations");
    table0.style.display = "";

    var tbodyRef0 = document.getElementById('stations').getElementsByClassName('ptbody0')[0];
    tbodyRef0.innerHTML = '';
    tbodyRef0 = document.getElementById('stations').getElementsByClassName('ptbody0')[0];

    document.getElementById("departures").style.display = 'none';
    document.getElementById("sub-departures").style.display = 'none';

    document.getElementById('closest-addr').style.display = 'none';
    document.getElementById("address-geocode").style.display = 'none';
    document.getElementById("stores").style.display = 'none';


    document.getElementById("overlay").style.display = "none";

    if(JSON.stringify(result) === JSON.stringify({})){
        //console.log("Results unavailable");
        window.alert("Results not found");
        document.getElementById("stations").style.display = 'none';
    }

    for (var key in result) {
        if (result.hasOwnProperty(key)){
        var val = result[key];

        var row = tbodyRef0.insertRow();
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);

        cell1.innerHTML = val["id"];
        cell2.innerHTML = val["name"];
        cell3.innerHTML = val["location"];

        }
    }
    }
}

  async function getdepartures() {

      let lat = document.getElementById("tlatitude1").value;
      let long = document.getElementById("tlongitude1").value;
      let radius = document.getElementById("tradius").value;

      if ((lat === "") || (long === "") || (radius === "")) {
      window.alert("Required data values are missing");
      }
      else{

      let location = lat.concat(",").concat(long).concat(";r=").concat(radius);

      document.getElementById("overlay").style.display = "block";

      let response = await fetch('/getdepartures?location='+ location);
      let result = await response.json();

      var table1 = document.getElementById("departures");
      table1.style.display = "";

      var tbodyRef1 = document.getElementById('departures').getElementsByClassName('ptbody1')[0];
      tbodyRef1.innerHTML = '';
      tbodyRef1 = document.getElementById('departures').getElementsByClassName('ptbody1')[0];


      document.getElementById("stations").style.display = 'none';
      document.getElementById("sub-departures").style.display = 'none';

      document.getElementById('closest-addr').style.display = 'none';
      document.getElementById("address-geocode").style.display = 'none';
      document.getElementById("stores").style.display = 'none';


      document.getElementById("overlay").style.display = "none";



      if(JSON.stringify(result) === JSON.stringify({})){
          //console.log("Results unavailable");
          document.getElementById("departures").style.display = 'none';
          document.getElementById("sub-departures").style.display = 'none';
          window.alert("Results not found");
      }

      for(var i=0;i<Object.keys(result).length;i++){

          var val = result[i];
          var row = tbodyRef1.insertRow();
          var cell1 = row.insertCell(0);
          var cell2 = row.insertCell(1);
          var cell3 = row.insertCell(2);

          cell1.innerHTML = val["name"];
          cell2.innerHTML = val["location"];
          cell3.innerHTML = `<input type='button' value='List Departures' onclick='displaydeparture(${i})' > `;

      }
      }
}

  async function displaydeparture(depvalue){

  let lat = document.getElementById("tlatitude1").value;
  let long = document.getElementById("tlongitude1").value;
  let radius = document.getElementById("tradius").value;

  let location = lat.concat(",").concat(long).concat(";r=").concat(radius);

  document.getElementById("overlay").style.display = "block";

  let response = await fetch('/displaydeparture?location='+ location);
  let result = await response.json();

  if (result[depvalue] === undefined){
      document.getElementById("sub-departures").style.display = 'none';
    }
    else{

  var subtable1 = document.getElementById("sub-departures");
  subtable1.style.display = "";

  var subtbodyRef1 = document.getElementById('sub-departures').getElementsByClassName('subptbody1')[0];
  subtbodyRef1.innerHTML = '';
  subtbodyRef1 = document.getElementById('sub-departures').getElementsByClassName('subptbody1')[0];

  document.getElementById("stations").style.display = 'none';
  document.getElementById("overlay").style.display = "none";

  document.getElementById('closest-addr').style.display = 'none';  
  document.getElementById("address-geocode").style.display = 'none';
  document.getElementById("stores").style.display = 'none';



  for(var i=0; i < result[depvalue]["departure"].length; i++){
      var srow = subtbodyRef1.insertRow();
      var scell1 = srow.insertCell(0);
      var scell2 = srow.insertCell(1);
      var scell3 = srow.insertCell(2);
      scell1.innerHTML = result[depvalue]["departure"][i]["departure time"] ;
      scell2.innerHTML = result[depvalue]["departure"][i]["departure transport"] ;
      scell3.innerHTML = result[depvalue]["departure"][i]["departure point"] ;
  }
}

}


</script>

<div id="overlay" style="display: none">
  <div class="loading" id="loading"></div>
</div>

<div id="publictransit-geocoding">

   <!-- Geocoding -->
    <span style="color: rgb(21, 21, 21);"> Location Details </span><hr style="border-top: 1px solid rgb(21, 21, 21);"><br>

    <div class="tab">
      <button class="tablinks" onclick="openGC(event, 'GCArea')"> Area &rarr; Coordinates </button>
      <button class="tablinks" onclick="openGC(event, 'RGCArea')">Coordinates &rarr; Area</button>
    </div>

    <div id="GCArea" class="tabcontent">
      <input type="text" name="gquery" id="gquery" class="field-divided" placeholder="Query: Address/Area" size=10 required /> 
      <button type = "submit" onclick="addrgeocode()">Get Area Coordinates </button> 

    </div>
    


    <div id="RGCArea" class="tabcontent">
      <input type="text" name="latitude0" id="latitude0" class="field-divided" placeholder="Latitude" size=10 required /> 
      <input type="text" name="longitude0" id="longitude0" class="field-divided" placeholder="Longitude" size=10 required /> <br><br>
      <button type = "submit" onclick="revaddrgeocode()">Get Closest Address </button> 
      </div>

      <br> 
      <table class = address-geocode id = "address-geocode" style="width:50%;display:none;">
        <thead>
                  <th>Name</th>
                  <th>Address</th>
                  <th>Location</th>
                 
        </thead>

        <tbody class="tbody4">

        </tbody>
                          
      </table>


      <table class = closest-addr id = "closest-addr" style="width:50%;display:none;">
        <thead>
                  <th>Address</th>
                  <th>Position</th>
                  <th>Distance</th>
                
        </thead>

        <tbody class="tbody6">

        </tbody>
                          
      </table>

    <br>
    <br>

 

    <!--Public Transit Services-->

    <span style="color: rgb(21, 21, 21);"> Public Transit Services </span><hr style="border-top: 1px solid rgb(21, 21, 21);"><br>

    <div class="tab">
        <button class="tablinks" onclick="openPT(event, 'PTStations')"> Transit Stations Near You</button>
        <button class="tablinks" onclick="openPT(event, 'PTDepartures')"> Next Departures From Now </button>
    </div>
  
     <div id="PTStations" class="tabcontent">
        <input type="text" name="tlatitude0" id="tlatitude0" class="field-divided" placeholder="Latitude" size=10 required /> 
        <input type="text" name="tlongitude0" id="tlongitude0" class="field-divided" placeholder="Longitude" size=10 required /> <br><br>
        <button type = "submit" onclick="getstations()">Get Transit Stations</button> 
     </div>

     <div id="PTDepartures" class="tabcontent">
        <input type="text" name="tlatitude1" id="tlatitude1" class="field-divided" placeholder="Latitude" size=10 required /> 
        <input type="text" name="tlongitude1" id="tlongitude1" class="field-divided" placeholder="Longitude" size=10 required /> <br><br>
        <input type="text" name="tradius" id="tradius" class="field-divided" placeholder="Radius" size=10 required /> <br><br>
        <button type = "submit" onclick="getdepartures(); displaydeparture()">Get Closest Departures </button> 
     </div>

     <table class = stations id = "stations" style="width:50%;display:none;">
      <thead>
                <th>ID</th>
                <th>Name</th>
                <th>Location</th>
      </thead>

      <tbody class="ptbody0">

      </tbody>
                        
    </table>
  
    <table class = departures id = "departures" style="width:50%;display:none;">
      <thead>
                <th>Name</th>
                <th>Location</th>

      </thead>

      <tbody class="ptbody1">
          
      </tbody>
                        
    </table>
<br>
    <table class = sub-departures id = "sub-departures" style="width:50%;display:none;">
      <thead>
          <th>Departure Time</th>
          <th>Departure Transport</th>
          <th>Departure Point</th>

      </thead>

      <tbody class="subptbody1">

      </tbody>

  </table>

      <table class = stores id = "stores" style="width:50%;display:none;">
        <thead>
                  <th>Name</th>
                  <th>Address</th>
                  <th>Location</th>
        </thead>

        <tbody class="tbody5">

        </tbody>
                          
      </table>

    <br><br>
    <br>
    
 <!-- Routes from A to B -->

 <span style="color: rgb(21, 21, 21);"> My way or the Highway? </span><hr style="border-top: 1px solid rgb(21, 21, 21);"><br>
    
 <div id = "complete">
  
  <input type="text" name="pointa" id="pointa" class="field-divided" placeholder="From [LAT,LONG]" size=10 required /> <br><br>
  <input type="text" name="pointb" id="pointb" class="field-divided" placeholder="To [LAT,LONG]" size=10 required /> <br><br>
  <label for="mode">Choose the Mode of Travel</label>
    <select name="travel" id="travel">
      <option value="car">Drive a Car!</option>
      <option value="pedestrian">Walk my legs off!</option>
      <option value="pubtransport">Go Green! Using Public Transport</option>
    </select>
  <br><br>
  <button type = "submit" onclick="startcalculating(document.getElementById('pointa').value, document.getElementById('pointb').value, document.getElementById('travel').value)">Calculate Route</button> 
<br>

<div id = "route-display">
  <div id="map"></div>
  <div id="panel"></div>
</div>


<script>

function startcalculating(pa,pb,pt){

  if(pt === "pubtransport"){
    function calculateRouteFromAtoB (platform) {
    var router = platform.getPublicTransitService(),
      routeRequestParams = {
        origin: pa, 
        destination: pb,
        return: 'polyline,actions,travelSummary'
      };


  router.getRoutes(
    routeRequestParams,
    onSuccess,
    onError
  );
}
/**
 * This function will be called once the Routing REST API provides a response
 * @param  {Object} result          A JSONP object representing the calculated route
 *
 */
function onSuccess(result) {
  var route = result.routes[0];

  addRouteShapeToMap(route);
  addManueversToMap(route);
  addManueversToPanel(route);
  addSummaryToPanel(route);

}

/**
 * This function will be called if a communication error occurs during the JSON-P request
 * @param  {Object} error  The error message received.
 */
function onError(error) {
  alert('Can\'t reach the remote server');
}


    document.getElementById('map').innerHTML = "";
    document.getElementById('panel').innerHTML = "";

    var mapContainer = document.getElementById('map');
    var routeInstructionsContainer = document.getElementById('panel');


var platform = new H.service.Platform({
  apikey: "<%= process.env.APIKEY%>"
});
var defaultLayers = platform.createDefaultLayers();


var map = new H.Map(mapContainer,
  defaultLayers.vector.normal.map,{
  center: {lat:52.5160, lng:13.3779},
  zoom: 13,
  pixelRatio: window.devicePixelRatio || 1
});
window.addEventListener('resize', () => map.getViewPort().resize());


var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

var ui = H.ui.UI.createDefault(map, defaultLayers);

var bubble;

/**
 * Opens/Closes a infobubble
 * @param  {H.geo.Point} position     The location on the map.
 * @param  {String} text              The contents of the infobubble.
 */
function openBubble(position, text){
 if(!bubble){
    bubble =  new H.ui.InfoBubble(
      position,
      {content: text});
    ui.addBubble(bubble);
  } else {
    bubble.setPosition(position);
    bubble.setContent(text);
    bubble.open();
  }
}


/**
 * Creates a H.map.Polyline from the shape of the route and adds it to the map.
 * @param {Object} route A route as received from the H.service.RoutingService
 */
function addRouteShapeToMap(route){
  var group = new H.map.Group();

  route.sections.forEach(function(section) {
    group.addObject(
      new H.map.Polyline(
        H.geo.LineString.fromFlexiblePolyline(section.polyline), {
          style: {
            lineWidth: 4,
            strokeColor: 'rgba(0, 128, 255, 0.7)'
          }
        }
      )
    );
  });

  map.addObject(group);
  map.getViewModel().setLookAtData({
    bounds: group.getBoundingBox()
  });
}

/**
 * Creates a series of H.map.Marker points from the route and adds them to the map.
 * @param {Object} route  A route as received from the H.service.RoutingService
 */
function addManueversToMap(route){
  var svgMarkup = '<svg width="18" height="18" ' +
    'xmlns="http://www.w3.org/2000/svg">' +
    '<circle cx="8" cy="8" r="8" ' +
      'fill="#1b468d" stroke="white" stroke-width="1"  />' +
    '</svg>',
    dotIcon = new H.map.Icon(svgMarkup, {anchor: {x:8, y:8}}),
    group = new  H.map.Group(),
    i;

    route.sections.forEach((section) => {
      let poly = H.geo.LineString.fromFlexiblePolyline(section.polyline).getLatLngAltArray();
    
      let actions = section.actions;
      if (actions) {
        for (i = 0;  i < actions.length; i += 1) {
          let action = actions[i];
          var marker =  new H.map.Marker({
            lat: poly[action.offset * 3],
            lng: poly[action.offset * 3 + 1]},
            {icon: dotIcon});
          marker.instruction = action.instruction;
          group.addObject(marker);
        }
      }
    });

    group.addEventListener('tap', function (evt) {
      map.setCenter(evt.target.getGeometry());
      openBubble(
        evt.target.getGeometry(), evt.target.instruction);
    }, false);
  
    map.addObject(group);
}

/**
 * Creates a series of H.map.Marker points from the route and adds them to the map.
 * @param {Object} route  A route as received from the H.service.RoutingService
 */
function addSummaryToPanel(route){
  let duration = 0,
      distance = 0;

  route.sections.forEach((section) => {
    distance += section.travelSummary.length;
    duration += section.travelSummary.duration;
  });

  var summaryDiv = document.createElement('div'),
   content = '';
   content += '<b>Total distance</b>: ' + distance  + 'm. <br/>';
   content += '<b>Travel Time</b>: ' + duration.toMMSS();


  summaryDiv.style.fontSize = 'small';
  summaryDiv.style.marginLeft ='5%';
  summaryDiv.style.marginRight ='5%';
  summaryDiv.innerHTML = content;
  routeInstructionsContainer.appendChild(summaryDiv);
}

/**
 * Creates a series of H.map.Marker points from the route and adds them to the map.
 * @param {Object} route  A route as received from the H.service.RoutingService
 */
function addManueversToPanel(route){
  var nodeOL = document.createElement('ol');

  nodeOL.style.fontSize = 'small';
  nodeOL.style.marginLeft ='5%';
  nodeOL.style.marginRight ='5%';
  nodeOL.className = 'directions';

  route.sections.forEach((section) => {
    debugger
    if (section.actions) {
      section.actions.forEach((action, idx) => {
        var li = document.createElement('li'),
            spanArrow = document.createElement('span'),
            spanInstruction = document.createElement('span');

        spanArrow.className = 'arrow ' + (action.direction || '') + action.action;
        spanInstruction.innerHTML = section.actions[idx].instruction;
        li.appendChild(spanArrow);
        li.appendChild(spanInstruction);

        nodeOL.appendChild(li);
      });
    }
  });

  routeInstructionsContainer.appendChild(nodeOL);
}


Number.prototype.toMMSS = function () {
  return  Math.floor(this / 60)  +' minutes '+ (this % 60)  + ' seconds.';
}

calculateRouteFromAtoB (platform);

  }
  else{
   function calculateRouteFromAtoB (platform) {

          var router = platform.getRoutingService(null, 8),
          routeRequestParams = {
            routingMode: 'fast',
            transportMode: pt,
            origin: pa,
            destination: pb,
            return: 'polyline,turnByTurnActions,actions,instructions,travelSummary'
          };
    
      router.calculateRoute(
        routeRequestParams,
        onSuccess,
        onError
      );
   }
    /**
     * This function will be called once the Routing REST API provides a response
     * @param  {Object} result     JSONP object representing the calculated route
     *
     */
    function onSuccess(result) {
      var route = result.routes[0];

      addRouteShapeToMap(route);
      addManueversToMap(route);
      addWaypointsToPanel(route);
      addManueversToPanel(route);
      addSummaryToPanel(route);
    }
    
    /**
     * This function will be called if a communication error occurs during the JSON-P request
     * @param  {Object} error  The error message received.
     */
    function onError(error) {
      alert('Can\'t reach the remote server');
    }
        
    document.getElementById('map').innerHTML = "";
    document.getElementById('panel').innerHTML = "";

    var mapContainer = document.getElementById('map');
    var routeInstructionsContainer = document.getElementById('panel');
    

    var platform = new H.service.Platform({
      apikey: "<%= process.env.APIKEY%>"
    });
    
    var defaultLayers = platform.createDefaultLayers();
    
    var map = new H.Map(mapContainer,
      defaultLayers.vector.normal.map,{
      center: {lat:52.5160, lng:13.3779},
      zoom: 13,
      pixelRatio: window.devicePixelRatio || 1
    });
    window.addEventListener('resize', () => map.getViewPort().resize());
    

    var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));
    
    var ui = H.ui.UI.createDefault(map, defaultLayers);
    
    var bubble;
    

    function openBubble(position, text){
     if(!bubble){
        bubble =  new H.ui.InfoBubble(
          position,
          {content: text});
        ui.addBubble(bubble);
      } else {
        bubble.setPosition(position);
        bubble.setContent(text);
        bubble.open();
      }
    }
    
    function addRouteShapeToMap(route){
      route.sections.forEach((section) => {
        let linestring = H.geo.LineString.fromFlexiblePolyline(section.polyline);
    
        let polyline = new H.map.Polyline(linestring, {
          style: {
            lineWidth: 4,
            strokeColor: 'rgba(0, 128, 255, 0.7)'
          }
        });
    
        map.addObject(polyline);

        map.getViewModel().setLookAtData({
          bounds: polyline.getBoundingBox()
        });
      });
    }
    
    function addManueversToMap(route){
      var svgMarkup = '<svg width="18" height="18" ' +
        'xmlns="http://www.w3.org/2000/svg">' +
        '<circle cx="8" cy="8" r="8" ' +
          'fill="#1b468d" stroke="white" stroke-width="1"  />' +
        '</svg>',
        dotIcon = new H.map.Icon(svgMarkup, {anchor: {x:8, y:8}}),
        group = new  H.map.Group(),
        i,
        j;
      route.sections.forEach((section) => {
        let poly = H.geo.LineString.fromFlexiblePolyline(section.polyline).getLatLngAltArray();
    
        let actions = section.actions;
        for (i = 0;  i < actions.length; i += 1) {
          let action = actions[i];
          var marker =  new H.map.Marker({
            lat: poly[action.offset * 3],
            lng: poly[action.offset * 3 + 1]},
            {icon: dotIcon});
          marker.instruction = action.instruction;
          group.addObject(marker);
        }
    
        group.addEventListener('tap', function (evt) {
          map.setCenter(evt.target.getGeometry());
          openBubble(
             evt.target.getGeometry(), evt.target.instruction);
        }, false);
    
        map.addObject(group);
      });
    }
    

    function addWaypointsToPanel(route) {
      var nodeH3 = document.createElement('h3'),
          labels = [];
    
      route.sections.forEach((section) => {
        labels.push(
          section.turnByTurnActions[0].nextRoad.name[0].value)
        labels.push(
          section.turnByTurnActions[section.turnByTurnActions.length - 1].currentRoad.name[0].value)
      });
      
      nodeH3.textContent = labels.join(' - ');
      routeInstructionsContainer.innerHTML = '';
      routeInstructionsContainer.appendChild(nodeH3);
    }
    

    function addSummaryToPanel(route){
      let duration = 0,
          distance = 0;
    
      route.sections.forEach((section) => {
        distance += section.travelSummary.length;
        duration += section.travelSummary.duration;
      });
    
      var summaryDiv = document.createElement('div'),
       content = '';
       content += '<b>Total distance</b>: ' + distance  + 'm. <br/>';
       content += '<b>Travel Time</b>: ' + duration.toMMSS() + ' (in current traffic)';
    
    
      summaryDiv.style.fontSize = 'small';
      summaryDiv.style.marginLeft ='5%';
      summaryDiv.style.marginRight ='5%';
      summaryDiv.innerHTML = content;
      routeInstructionsContainer.appendChild(summaryDiv);
    }
    
    function addManueversToPanel(route){
      var nodeOL = document.createElement('ol');
    
      nodeOL.style.fontSize = 'small';
      nodeOL.style.marginLeft ='5%';
      nodeOL.style.marginRight ='5%';
      nodeOL.className = 'directions';
    
      route.sections.forEach((section) => {
        section.actions.forEach((action, idx) => {
          var li = document.createElement('li'),
              spanArrow = document.createElement('span'),
              spanInstruction = document.createElement('span');
    
          spanArrow.className = 'arrow ' + (action.direction || '') + action.action;
          spanInstruction.innerHTML = section.actions[idx].instruction;
          li.appendChild(spanArrow);
          li.appendChild(spanInstruction);
    
          nodeOL.appendChild(li);
        });
      });
    
      routeInstructionsContainer.appendChild(nodeOL);
    }
    
    
    Number.prototype.toMMSS = function () {
      return  Math.floor(this / 60)  +' minutes '+ (this % 60)  + ' seconds.';
    }
    

    calculateRouteFromAtoB (platform);
  }

}

</script>


 </div>


</div>
