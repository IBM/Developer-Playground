import { settings } from 'carbon-components';
var prefix = settings.prefix;
export function resetFocus(el) {
  if (el) {
    var _el$querySelectorAll;

    Array.from((_el$querySelectorAll = el.querySelectorAll('[tabindex="0"]')) !== null && _el$querySelectorAll !== void 0 ? _el$querySelectorAll : []).forEach(function (node) {
      node.tabIndex = -1;
    });
  }
}
export function focusNode(node) {
  if (node) {
    node.tabIndex = 0;
    node.focus();
  }
}
export function getValidNodes(list) {
  var level = list.dataset.level;
  var nodes = [];

  if (level) {
    var submenus = Array.from(list.querySelectorAll('[data-level]'));
    nodes = Array.from(list.querySelectorAll("li.".concat(prefix, "--context-menu-option"))).filter(function (child) {
      return !submenus.some(function (submenu) {
        return submenu.contains(child);
      });
    });
  }

  return nodes.filter(function (node) {
    return node.matches(":not(.".concat(prefix, "--context-menu-option--disabled)"));
  });
}
export function getNextNode(current, direction) {
  var menu = getParentMenu(current);
  var nodes = getValidNodes(menu);
  var currentIndex = nodes.indexOf(current);
  var nextNode = nodes[currentIndex + direction];
  return nextNode || null;
}
export function getFirstSubNode(node) {
  var submenu = node.querySelector("ul.".concat(prefix, "--context-menu"));

  if (submenu) {
    var subnodes = getValidNodes(submenu);
    return subnodes[0] || null;
  }

  return null;
}
export function getParentNode(node) {
  if (node) {
    var parentNode = node.parentNode.closest("li.".concat(prefix, "--context-menu-option"));
    return parentNode || null;
  }

  return null;
}
export function getParentMenu(el) {
  if (el) {
    var parentMenu = el.parentNode.closest("ul.".concat(prefix, "--context-menu"));
    return parentMenu || null;
  }

  return null;
}
export function clickedElementHasSubnodes(e) {
  if (e) {
    var closestFocusableElement = e.target.closest('[tabindex]');

    if ((closestFocusableElement === null || closestFocusableElement === void 0 ? void 0 : closestFocusableElement.tagName) === 'LI') {
      return getFirstSubNode(closestFocusableElement) !== null;
    }
  }

  return false;
}