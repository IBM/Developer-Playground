function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import PropTypes from 'prop-types';
import React from 'react';
import cx from 'classnames';
import { settings } from 'carbon-components';
var prefix = settings.prefix;
var tab = /*#__PURE__*/React.createElement("li", {
  className: "".concat(prefix, "--tabs--scrollable__nav-item")
}, /*#__PURE__*/React.createElement("div", {
  className: "".concat(prefix, "--tabs__nav-link")
}, /*#__PURE__*/React.createElement("span", null)));

function TabsSkeleton(_ref) {
  var className = _ref.className,
      type = _ref.type,
      rest = _objectWithoutProperties(_ref, ["className", "type"]);

  var tabClasses = cx(className, "".concat(prefix, "--tabs"), "".concat(prefix, "--skeleton"), "".concat(prefix, "--tabs--scrollable"), _defineProperty({}, "".concat(prefix, "--tabs--scrollable--container"), type === 'container'));
  return /*#__PURE__*/React.createElement("div", _extends({
    className: tabClasses
  }, rest), /*#__PURE__*/React.createElement("ul", {
    className: "".concat(prefix, "--tabs--scrollable__nav")
  }, tab, tab, tab, tab, tab));
}

TabsSkeleton.propTypes = {
  /**
   * Specify an optional className to add.
   */
  className: PropTypes.string,

  /**
   * Provide the type of Tab
   */
  type: PropTypes.oneOf(['', 'default', 'container'])
};
export default TabsSkeleton;