"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._MultipleGroups = exports._ContextMenu = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _addonActions = require("@storybook/addon-actions");

var _Notification = require("../Notification");

var _ContextMenu2 = _interopRequireWildcard(require("../ContextMenu"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var _default = {
  title: 'Experimental/unstable_ContextMenu',
  parameters: {
    component: _ContextMenu2.default
  }
};
exports.default = _default;

var InfoBanners = function InfoBanners() {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Notification.InlineNotification, {
    kind: "info",
    title: "Experimental component",
    subtitle: "This component is considered experimental. Its API may change until the stable version is released.",
    lowContrast: true,
    hideCloseButton: true
  }), /*#__PURE__*/_react.default.createElement(_Notification.InlineNotification, {
    kind: "info",
    title: "Context menu",
    subtitle: "Right-click anywhere on this page to access an example implementation of this component.",
    lowContrast: true,
    hideCloseButton: true
  }));
};

var Story = function Story(items) {
  var contextMenuProps = (0, _ContextMenu2.useContextMenu)();

  function renderItem(item, i) {
    switch (item.type) {
      case 'item':
        return /*#__PURE__*/_react.default.createElement(_ContextMenu2.ContextMenuItem, {
          key: i,
          label: item.label,
          shortcut: item.shortcut,
          disabled: item.disabled,
          kind: item.kind,
          onClick: !item.children ? (0, _addonActions.action)('onClick') : null
        }, item.children && item.children.map(renderItem));

      case 'divider':
        return /*#__PURE__*/_react.default.createElement(_ContextMenu2.ContextMenuDivider, {
          key: i
        });

      case 'selectable':
        return /*#__PURE__*/_react.default.createElement(_ContextMenu2.ContextMenuSelectableItem, {
          key: i,
          label: item.label,
          initialChecked: item.initialChecked,
          onChange: (0, _addonActions.action)('onChange')
        });

      case 'radiogroup':
        return /*#__PURE__*/_react.default.createElement(_ContextMenu2.ContextMenuRadioGroup, {
          key: i,
          label: item.label,
          items: item.items,
          initialSelectedItem: item.initialSelectedItem,
          onChange: (0, _addonActions.action)('onChange')
        });

      case 'group':
        return /*#__PURE__*/_react.default.createElement(_ContextMenu2.ContextMenuGroup, {
          key: i,
          label: item.label
        }, item.children && item.children.map(renderItem));
    }
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      height: 'calc(100vh - 6.25rem)'
    }
  }, /*#__PURE__*/_react.default.createElement(InfoBanners, null), /*#__PURE__*/_react.default.createElement(_ContextMenu2.default, contextMenuProps, items.map(renderItem)));
};

var _ContextMenu = function _ContextMenu() {
  return Story([{
    type: 'item',
    label: 'Share with',
    children: [{
      type: 'radiogroup',
      label: 'Share with',
      items: ['None', 'Product team', 'Organization', 'Company'],
      initialSelectedItem: 'Product team'
    }]
  }, {
    type: 'divider'
  }, {
    type: 'item',
    label: 'Cut',
    shortcut: '⌘X'
  }, {
    type: 'item',
    label: 'Copy',
    shortcut: '⌘C'
  }, {
    type: 'item',
    label: 'Copy path',
    shortcut: '⌥⌘C'
  }, {
    type: 'item',
    label: 'Paste',
    shortcut: '⌘V',
    disabled: true
  }, {
    type: 'item',
    label: 'Duplicate'
  }, {
    type: 'divider'
  }, {
    type: 'selectable',
    label: 'Publish',
    initialChecked: true
  }, {
    type: 'divider'
  }, {
    type: 'item',
    label: 'Rename',
    shortcut: '↩︎'
  }, {
    type: 'item',
    label: 'Delete',
    shortcut: '⌘⌫',
    kind: 'danger'
  }]);
};

exports._ContextMenu = _ContextMenu;
_ContextMenu.storyName = 'ContextMenu';

var _MultipleGroups = function _MultipleGroups() {
  return Story([{
    type: 'group',
    label: 'Font style',
    children: [{
      type: 'selectable',
      label: 'Bold'
    }, {
      type: 'selectable',
      label: 'Italic'
    }]
  }, {
    type: 'divider'
  }, {
    type: 'radiogroup',
    label: 'Text color',
    items: ['Black', 'Blue', 'Red', 'Green'],
    initialSelectedItem: 'Black'
  }, {
    type: 'divider'
  }, {
    type: 'radiogroup',
    label: 'Text decoration',
    items: ['None', 'Overline', 'Line-through', 'Underline'],
    initialSelectedItem: 'None'
  }]);
};

exports._MultipleGroups = _MultipleGroups;
_MultipleGroups.storyName = 'MultipleGroups';