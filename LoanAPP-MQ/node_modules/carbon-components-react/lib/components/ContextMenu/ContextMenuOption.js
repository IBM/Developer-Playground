"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames3 = _interopRequireDefault(require("classnames"));

var _carbonComponents = require("carbon-components");

var _iconsReact = require("@carbon/icons-react");

var _keyboard = require("../../internal/keyboard");

var _utils = require("./_utils");

var _ContextMenu = _interopRequireDefault(require("./ContextMenu"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefix = _carbonComponents.settings.prefix;
var hoverIntentDelay = 150; // in ms

function ContextMenuOptionContent(_ref) {
  var label = _ref.label,
      info = _ref.info,
      disabled = _ref.disabled,
      Icon = _ref.icon,
      indented = _ref.indented;
  var classes = (0, _classnames3.default)("".concat(prefix, "--context-menu-option__content"), _defineProperty({}, "".concat(prefix, "--context-menu-option__content--disabled"), disabled));
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes
  }, indented && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--context-menu-option__icon")
  }, Icon && /*#__PURE__*/_react.default.createElement(Icon, null)), /*#__PURE__*/_react.default.createElement("span", {
    className: "".concat(prefix, "--context-menu-option__label"),
    title: label
  }, label), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--context-menu-option__info")
  }, info));
}

function ContextMenuOption(_ref2) {
  var _classnames2;

  var children = _ref2.children,
      disabled = _ref2.disabled,
      indented = _ref2.indented,
      _ref2$kind = _ref2.kind,
      kind = _ref2$kind === void 0 ? 'default' : _ref2$kind,
      label = _ref2.label,
      level = _ref2.level,
      _ref2$onClick = _ref2.onClick,
      onClick = _ref2$onClick === void 0 ? function () {} : _ref2$onClick,
      renderIcon = _ref2.renderIcon,
      shortcut = _ref2.shortcut,
      rest = _objectWithoutProperties(_ref2, ["children", "disabled", "indented", "kind", "label", "level", "onClick", "renderIcon", "shortcut"]);

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      submenuOpen = _useState2[0],
      setSubmenuOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      submenuOpenedByKeyboard = _useState4[0],
      setSubmenuOpenedByKeyboard = _useState4[1];

  var rootRef = (0, _react.useRef)(null);
  var hoverIntentTimeout = (0, _react.useRef)(null);

  var subOptions = _react.default.Children.map(children, function (node) {
    if ( /*#__PURE__*/_react.default.isValidElement(node)) {
      return /*#__PURE__*/_react.default.cloneElement(node);
    }
  });

  function openSubmenu() {
    var openedByKeyboard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    setSubmenuOpenedByKeyboard(openedByKeyboard);
    setSubmenuOpen(true);
  }

  function handleKeyDown(event) {
    if ((0, _utils.clickedElementHasSubnodes)(event) && ((0, _keyboard.match)(event, _keyboard.keys.ArrowRight) || (0, _keyboard.match)(event, _keyboard.keys.Enter) || (0, _keyboard.match)(event, _keyboard.keys.Space))) {
      openSubmenu(true);
    } else if (((0, _keyboard.match)(event, _keyboard.keys.Enter) || (0, _keyboard.match)(event, _keyboard.keys.Space)) && onClick) {
      onClick(event);
    }
  }

  function handleMouseEnter() {
    hoverIntentTimeout.current = setTimeout(openSubmenu, hoverIntentDelay);
  }

  function handleMouseLeave() {
    clearTimeout(hoverIntentTimeout === null || hoverIntentTimeout === void 0 ? void 0 : hoverIntentTimeout.current);
    setSubmenuOpen(false);
  }

  function getSubmenuPosition() {
    var pos = [0, 0];

    if (subOptions) {
      var parentMenu = (0, _utils.getParentMenu)(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);

      if (parentMenu) {
        var _parentMenu$getBoundi = parentMenu.getBoundingClientRect(),
            x = _parentMenu$getBoundi.x,
            width = _parentMenu$getBoundi.width;

        var _rootRef$current$getB = rootRef.current.getBoundingClientRect(),
            y = _rootRef$current$getB.y;

        pos[0] = x + width;
        pos[1] = y;
      }
    }

    return pos;
  }

  (0, _react.useEffect)(function () {
    if (subOptions && submenuOpenedByKeyboard) {
      var firstSubnode = (0, _utils.getFirstSubNode)(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);
      (0, _utils.focusNode)(firstSubnode);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [submenuOpen]);
  var classes = (0, _classnames3.default)("".concat(prefix, "--context-menu-option"), (_classnames2 = {}, _defineProperty(_classnames2, "".concat(prefix, "--context-menu-option--disabled"), disabled), _defineProperty(_classnames2, "".concat(prefix, "--context-menu-option--active"), subOptions && submenuOpen), _defineProperty(_classnames2, "".concat(prefix, "--context-menu-option--danger"), !subOptions && kind === 'danger'), _classnames2));
  var allowedRoles = ['menuitemradio', 'menuitemcheckbox'];
  var role = rest.role && allowedRoles.includes(rest.role) ? rest.role : 'menuitem';
  var submenuPosition = getSubmenuPosition();
  return (
    /*#__PURE__*/
    // role is either menuitemradio, menuitemcheckbox, or menuitem which are all interactive
    // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
    _react.default.createElement("li", _extends({}, rest, {
      ref: rootRef,
      className: classes,
      role: role,
      tabIndex: -1,
      "aria-disabled": !subOptions && disabled,
      "aria-haspopup": subOptions ? true : null,
      "aria-expanded": subOptions ? submenuOpen : null,
      onKeyDown: handleKeyDown,
      onMouseEnter: subOptions ? handleMouseEnter : null,
      onMouseLeave: subOptions ? handleMouseLeave : null,
      onClick: onClick
    }), subOptions ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(ContextMenuOptionContent, {
      label: label,
      icon: renderIcon,
      info: /*#__PURE__*/_react.default.createElement(_iconsReact.CaretRight16, null),
      indented: indented
    }), /*#__PURE__*/_react.default.createElement(_ContextMenu.default, {
      level: level + 1,
      open: submenuOpen,
      onClose: function onClose() {
        setSubmenuOpen(false);
      },
      x: submenuPosition[0],
      y: submenuPosition[1]
    }, subOptions)) : /*#__PURE__*/_react.default.createElement(ContextMenuOptionContent, {
      label: label,
      disabled: disabled,
      icon: renderIcon,
      info: shortcut,
      indented: indented
    }))
  );
}

ContextMenuOptionContent.propTypes = {
  /**
   * Whether this option is disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * Icon that is displayed in front of the option
   */
  icon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),

  /**
   * Whether the content should be indented
   */
  indented: _propTypes.default.bool,

  /**
   * Additional information such as shortcut or caret
   */
  info: _propTypes.default.node,

  /**
   * Rendered label for the ContextMenuOptionContent
   */
  label: _propTypes.default.node.isRequired
};
ContextMenuOption.propTypes = {
  /**
   * Specify the children of the ContextMenuOption
   */
  children: _propTypes.default.node,

  /**
   * Specify whether this ContextMenuOption is disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * Whether the content should be indented (for example because it's in a group with options that have icons).
   * Is automatically set by ContextMenu
   */
  indented: _propTypes.default.bool,

  /**
   * Optional prop to specify the kind of the ContextMenuOption
   */
  kind: _propTypes.default.oneOf(['default', 'danger']),

  /**
   * Rendered label for the ContextMenuOption
   */
  label: _propTypes.default.node.isRequired,

  /**
   * Which nested level this option is located in.
   * Is automatically set by ContextMenu
   */
  level: _propTypes.default.number,

  /**
   * The onClick handler
   */
  onClick: _propTypes.default.func,

  /**
   * Rendered icon for the ContextMenuOption.
   * Can be a React component class
   */
  renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),

  /**
   * Rendered shortcut for the ContextMenuOption
   */
  shortcut: _propTypes.default.node
};
var _default = ContextMenuOption;
exports.default = _default;