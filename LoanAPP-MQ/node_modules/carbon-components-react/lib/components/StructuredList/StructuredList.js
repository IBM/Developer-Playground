"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StructuredListWrapper = StructuredListWrapper;
exports.StructuredListHead = StructuredListHead;
exports.StructuredListBody = StructuredListBody;
exports.StructuredListRow = StructuredListRow;
exports.StructuredListInput = StructuredListInput;
exports.StructuredListCell = StructuredListCell;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _carbonComponents = require("carbon-components");

var _setupGetInstanceId = _interopRequireDefault(require("../../tools/setupGetInstanceId"));

var _deprecate = _interopRequireDefault(require("../../prop-types/deprecate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var prefix = _carbonComponents.settings.prefix;
var getInstanceId = (0, _setupGetInstanceId.default)();

function StructuredListWrapper(props) {
  var children = props.children,
      selection = props.selection,
      className = props.className,
      ariaLabel = props.ariaLabel,
      _border = props.border,
      other = _objectWithoutProperties(props, ["children", "selection", "className", "ariaLabel", "border"]);

  var classes = (0, _classnames.default)("".concat(prefix, "--structured-list"), className, _defineProperty({}, "".concat(prefix, "--structured-list--selection"), selection));
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    role: "table",
    className: classes
  }, other, {
    "aria-label": ariaLabel
  }), children);
}

StructuredListWrapper.propTypes = {
  /**
   * Specify a label to be read by screen readers on the container node
   */
  ariaLabel: _propTypes.default.string,

  /**
   * Specify whether a border should be added to your StructuredListWrapper
   */
  border: (0, _deprecate.default)(_propTypes.default.bool, "\nThe prop `border` will be removed in the next major version of Carbon."),

  /**
   * Provide the contents of your StructuredListWrapper
   */
  children: _propTypes.default.node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: _propTypes.default.string,

  /**
   * Specify whether your StructuredListWrapper should have selections
   */
  selection: _propTypes.default.bool
};
StructuredListWrapper.defaultProps = {
  selection: false,
  ariaLabel: 'Structured list section'
};

function StructuredListHead(props) {
  var children = props.children,
      className = props.className,
      other = _objectWithoutProperties(props, ["children", "className"]);

  var classes = (0, _classnames.default)("".concat(prefix, "--structured-list-thead"), className);
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    role: "rowgroup",
    className: classes
  }, other), children);
}

StructuredListHead.propTypes = {
  /**
   * Provide the contents of your StructuredListHead
   */
  children: _propTypes.default.node,

  /**
   * Specify an optional className to be applied to the node
   */
  className: _propTypes.default.string
};

function StructuredListBody(props) {
  var children = props.children,
      className = props.className,
      other = _objectWithoutProperties(props, ["children", "className"]);

  var classes = (0, _classnames.default)("".concat(prefix, "--structured-list-tbody"), className);
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    className: classes,
    role: "rowgroup"
  }, other), children);
}

StructuredListBody.propTypes = {
  /**
   * Provide the contents of your StructuredListBody
   */
  children: _propTypes.default.node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: _propTypes.default.string,
  head: _propTypes.default.bool,

  /**
   * Provide a handler that is invoked on the key down event for the control
   */
  onKeyDown: _propTypes.default.func
};
StructuredListBody.defaultProps = {
  onKeyDown: function onKeyDown() {}
};

function StructuredListRow(props) {
  var onKeyDown = props.onKeyDown,
      tabIndex = props.tabIndex,
      children = props.children,
      className = props.className,
      head = props.head,
      label = props.label,
      other = _objectWithoutProperties(props, ["onKeyDown", "tabIndex", "children", "className", "head", "label"]);

  var classes = (0, _classnames.default)("".concat(prefix, "--structured-list-row"), className, _defineProperty({}, "".concat(prefix, "--structured-list-row--header-row"), head));
  return label ?
  /*#__PURE__*/
  // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
  _react.default.createElement("label", _extends({}, other, {
    tabIndex: tabIndex,
    className: classes,
    onKeyDown: onKeyDown
  }), children) : /*#__PURE__*/_react.default.createElement("div", _extends({}, other, {
    className: classes
  }), children);
}

StructuredListRow.propTypes = {
  /**
   * Provide the contents of your StructuredListRow
   */
  children: _propTypes.default.node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: _propTypes.default.string,

  /**
   * Specify whether your StructuredListRow should be used as a header row
   */
  head: _propTypes.default.bool,

  /**
   * Specify whether a `<label>` should be used
   */
  label: _propTypes.default.bool,

  /**
   * Provide a handler that is invoked on the key down event for the control,
   * if `<label>` is in use
   */
  onKeyDown: _propTypes.default.func,

  /**
   * Specify the tab index of the container node, if `<label>` is in use
   */
  tabIndex: _propTypes.default.number
};
StructuredListRow.defaultProps = {
  head: false,
  label: false,
  tabIndex: 0,
  onKeyDown: function onKeyDown() {}
};

function StructuredListInput(props) {
  var className = props.className,
      value = props.value,
      name = props.name,
      title = props.title,
      id = props.id,
      other = _objectWithoutProperties(props, ["className", "value", "name", "title", "id"]);

  var classes = (0, _classnames.default)("".concat(prefix, "--structured-list-input"), className);
  var instanceId = id || getInstanceId();
  return /*#__PURE__*/_react.default.createElement("input", _extends({}, other, {
    type: "radio",
    tabIndex: -1,
    id: instanceId,
    className: classes,
    value: value,
    name: name,
    title: title
  }));
}

StructuredListInput.propTypes = {
  /**
   * Specify an optional className to be applied to the input
   */
  className: _propTypes.default.string,

  /**
   * Specify whether the underlying input should be checked by default
   */
  defaultChecked: _propTypes.default.bool,

  /**
   * Specify a custom `id` for the input
   */
  id: _propTypes.default.string,

  /**
   * Provide a `name` for the input
   */
  name: _propTypes.default.string,

  /**
   * Provide an optional hook that is called each time the input is updated
   */
  onChange: _propTypes.default.func,

  /**
   * Provide a `title` for the input
   */
  title: _propTypes.default.string,

  /**
   * Specify the value of the input
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired
};
StructuredListInput.defaultProps = {
  onChange: function onChange() {},
  value: 'value',
  title: 'title'
};

function StructuredListCell(props) {
  var _classNames3;

  var children = props.children,
      className = props.className,
      head = props.head,
      noWrap = props.noWrap,
      other = _objectWithoutProperties(props, ["children", "className", "head", "noWrap"]);

  var classes = (0, _classnames.default)(className, (_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefix, "--structured-list-th"), head), _defineProperty(_classNames3, "".concat(prefix, "--structured-list-td"), !head), _defineProperty(_classNames3, "".concat(prefix, "--structured-list-content--nowrap"), noWrap), _classNames3));
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    className: classes,
    role: head ? 'columnheader' : 'cell'
  }, other), children);
}

StructuredListCell.propTypes = {
  /**
   * Provide the contents of your StructuredListCell
   */
  children: _propTypes.default.node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: _propTypes.default.string,

  /**
   * Specify whether your StructuredListCell should be used as a header cell
   */
  head: _propTypes.default.bool,

  /**
   * Specify whether your StructuredListCell should have text wrapping
   */
  noWrap: _propTypes.default.bool
};
StructuredListCell.defaultProps = {
  head: false,
  noWrap: false
};