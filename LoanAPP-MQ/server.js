//importing dependencies 
const express = require("express");
const mongo =require('mongodb');
const mongoose =require('mongoose')
var fs = require('fs');
var request = require( 'request' );
const bodyParser=require("body-parser");
const path = require("path")
var axios = require('axios');
var setCookie = require('set-cookie-parser');
const NodeCache = require('node-cache');
const myCache = new NodeCache();
const assert =require('assert');
const app=express();
const {apiKey,Scoring_url,mongoDb_url,host_name,user_name,password,queue_manager_name}=require('./config.js');


const url=mongoDb_url
app.use('/', express.static('./client/build'));
app.get('/',function(req,res){
  res.sendFile(__dirname + "/index.html");
})

if (!fs.existsSync('cookiejar.txt')) {
  axios({
      method: 'post',
      url: `https://web-${host_name}/ibmmq/rest/v1/login`,
      headers:{
          'Content-Type': 'application/json'
      },
      data: {
        username: `${user_name}`,
        password: `${password}`
      }
  }).then(res =>{
      var cookies = setCookie.parse(res, {
          decodeValues: true,  // default: true
          // map: true           //default: false
      })
      // console.log(cookies)
      var content = `# Netscape HTTP Cookie File
# https://curl.haxx.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.
#HttpOnly_web-qm2-8d73.qm.eu-gb.mq.appdomain.cloud	FALSE	/	TRUE	0	${cookies[0].name}	${cookies[0].value}
`
      // console.log(content)
      var status = myCache.set('token',{token: cookies[0].name +'='+ cookies[0].value})
      if (status){
          console.log('cache written')
      }
      fs.writeFile('./cookiejar.txt', content, err => {
          if (err) {
            console.error(err)
            return
          } else {
              console.log('file written')
          }
      })
      fs.writeFile('./cookiejar.json', JSON.stringify(cookies[0]), err => {
          if (err) {
            console.error(err)
            return
          } else {
              console.log('json written')
          }
      })
  }).catch(err =>{
      console.log(err)
  })
} else {
  
  axios({
      method: 'post',
      url: `https://web-${host_name}/ibmmq/rest/v1/login`,
      headers:{
          'Content-Type': 'application/json'
      },
      data: {
        username: `${user_name}`,
        password: `${password}`
      }
  }).then(res =>{
      var cookies = setCookie.parse(res, {
          decodeValues: true,  // default: true
          // map: true           //default: false
      })
      // console.log(cookies)
      var content = `# Netscape HTTP Cookie File
# https://curl.haxx.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.
#HttpOnly_web-qm2-8d73.qm.eu-gb.mq.appdomain.cloud	FALSE	/	TRUE	0	${cookies[0].name}	${cookies[0].value}
`
      // console.log(content)
      var status = myCache.set('token',{token: cookies[0].name +'='+ cookies[0].value})
      if (status){
          console.log('cache written')
      }
      fs.writeFile('./cookiejar.txt', content, err => {
          if (err) {
            console.error(err)
            return
          } else {
              console.log('file written')
          }
      })
      fs.writeFile('./cookiejar.json', JSON.stringify(cookies[0]), err => {
          if (err) {
            console.error(err)
            return
          } else {
              console.log('json written')
          }
      })
  }).catch(err =>{
      console.log(err)
  })
}

app.use(bodyParser.json());


//console.log(Scoring_url)
//creating a post query when the form is submitted
app.post('/submit',  (req, res) =>{
   
    var newUser = {
      "ID":Math.floor(Math.random()*10000),
      "Age":parseInt(req.body.age),
      "Experience":parseInt(req.body.experience),
      "Income":parseInt(req.body.income),
      "ZipCode":parseInt(req.body.Zipcode),
      "Family":parseInt(req.body.familySize),
      "CCavg":parseInt(req.body.Ccavg),
      "Mortgage":parseInt(req.body.mortgage),
      "Education":parseInt(req.body.education),
      "PersonalLoan":parseInt(req.body.personal_loan),
      "SecuritiesAccount":parseInt(req.body.security_account),
      "CDAccount":parseInt(req.body.CdAccount),
      "Online":parseInt(req.body.online),
      "CreditCard":parseInt(req.body.credit_card),
      'PersonalLoan':req.body.loanStatus,
                
       
    }
    console.log(newUser)
    var config = {
      method: 'post',
      url: `https://web-${host_name}/ibmmq/rest/v2/messaging/qmgr/${queue_manager_name}/queue/DEV.QUEUE.1/message`,
      headers: {
          'ibm-mq-rest-csrf-token': 'token-value', 
          'Content-Type': 'text/plain',
          'Cookie': myCache.get('token').token,
          // 'ibm-mq-md-correlationId': req.body.correlationId
      },
      data: JSON.stringify(newUser)
      };
      axios(config)
      .then(response => {
          console.log(response.headers['ibm-mq-md-messageid'])
          const messageId = response.headers['ibm-mq-md-messageid']
          console.log(messageId)
          // console.log(JSON.stringify(response.data));
        
        var options = {
        method: 'delete',
        url: `https://web-${host_name}/ibmmq/rest/v2/messaging/qmgr/${queue_manager_name}/queue/DEV.QUEUE.1/message/`,
        headers: {
            'ibm-mq-rest-csrf-token': 'token-value',
            'Accept': '*/*',
            'Cookie': myCache.get('token').token
        }
        ,params: {
          messageId: messageId
      },
        };

        axios(options)
        .then(function (response) {
            console.log('got message',JSON.stringify(response.data));
            let newUserMQ=response.data
            const dbName = 'loanApp';
            var certFileBuf = fs.readFileSync("./mongodb.pem");
            var options = {
              useNewUrlParser: true,
              useUnifiedTopology: true,
              replset: { sslCA: certFileBuf }
            }
             mongo.connect(url,options,function(err,client){
              assert === (null,err);
              const db=client.db(dbName);
              db.collection('user-data').insertOne(newUserMQ,function(err,result){
                assert === (null,err);
                console.log(result);
              var query = { ID: newUserMQ.ID };
              db.collection("user-data").find(query).toArray(function(err, output) {  
                if (err) throw err;
                // console.log(output)
                // console.log(output[0].Loan_ID);
                //res.send('loan approved')
                   
                const API_KEY = apiKey;
              
                const getToken=async (api_key)=>{
                  var apikey=api_key
                  
                    var options = {
                        method:'POST',
                         url     : "https://iam.cloud.ibm.com/identity/token",
                   
                    body    : "apikey=" + apikey + "&grant_type=urn:ibm:params:oauth:grant-type:apikey" 
                  };
                    return await new Promise(async (resolve, reject) => {
                        await request(options, async (error, response, body)=> {
                          if (error) {
                            reject(error);
                          }
                          resolve(body);
                        });
                      })
                }
                getToken(API_KEY)
                .then((result) => {
                  var access_token=JSON.parse(result)["access_token"]
                  //console.log(access_token)
                  payload_scoring = `{
                    "input_data": [
                      {
                      "values": [
          [
              ${output[0].Age},
              ${output[0].Income},
              ${output[0].ZipCode},
              ${output[0].Family},
              ${output[0].CCavg},
              ${output[0].Education},
              ${output[0].Mortgage},
              ${output[0].SecuritiesAccount},
              ${output[0].CDAccount},
              ${output[0].Online},
              ${output[0].CreditCard}
          ]
        ]
        }
      ]
      }`
      console.log(payload_scoring)
      let version="?version=2021-06-08"
     var option={
      url:Scoring_url+version,
      headers:{
        'Content-Type': 'application/json',
        "Authorization":"Bearer "+ access_token   
      },
      body: payload_scoring
    }
    request.post( option, function( error, response, body )
    {
      var PredResult=''
      let parsedPostResponse;
      try {
        //console.log("respnse text" + this.responseText)
        parsedPostResponse = JSON.parse(response.body);
      } catch (ex) {
        // TODO: handle parsing exception
        console.log(ex)
      }
                console.log("Scoring response");
                console.log(parsedPostResponse)
                
                console.log(parsedPostResponse["predictions"][0]['values'][0]);
                predictedvalue=parsedPostResponse["predictions"][0]['values'][0][0]
                //console.log(` Id is ${output[0].ID} and type is ${typeof(predictedvalue)}`)
               db.collection('user-data').updateOne(
                 
                  {ID : output[0].ID},
                  
                  {$set: { PersonalLoan :predictedvalue}},function(err,res){
                    if(err) throw err;
                    console.log('updated the document')
                  }); 
                    db.collection("user-data").find(query).toArray(async(err, output)=> {  
                      if (err) throw err;
                      // console.log(output)
                       
                       PredResult=output[0].PersonalLoan
                       
                    })
                  // ReverseDataFlow(output[0].Loan_ID).then(resposeObj => {
                  //     console.log('prediction object response is :' ,resposeObj)
                      
                  //   }).catch(err => console.log(err))
                
                  
                 
                  if(predictedvalue == 1){
                    console.log("predicted value is " ,predictedvalue);
                    res.send('loan approved')
                  }
                  else{
                    console.log("predicted value is " ,predictedvalue);
                    res.send('loan denied')
                  }
                
              }, 
              function (error) {
                console.log(error);
              });
              
            })
            //client.close();
                  
            });
    
            });
           
          });
         // client.close();
      
        })
    .catch(function (error) {
        console.log(error);
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.write(JSON.stringify({"data": 'error'}));
        res.end()

    });
      })
      .catch(function (error) {
          console.log('error occured')
          console.log(error);
          res.writeHead(200, {'Content-Type': 'application/json'});

          res.write(JSON.stringify({"data": 'error'}));
          res.end()
      });
      
  
});

app.get('*', (req, res) => res.sendFile(path.resolve('client','build', 'index.html')));
app.listen(8080,function(){
    console.log('express server is running on port : 8080')
})