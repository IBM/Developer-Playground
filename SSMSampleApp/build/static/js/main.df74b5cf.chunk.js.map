{"version":3,"sources":["components/ssmmain.js","App.js","index.js"],"names":["SSMMain","useState","gname","setgname","fname","setfname","email","setemail","inviteid","setinviteid","custdetail","setcustdetail","custobj","setCustobj","subsobj","setSubsobj","isLoading","setLoading","showForm","setShowForm","notifystatus","setnotifystatus","notifystatus2","setnotifystatus2","notifystatus3","setnotifystatus3","err1status","seterr1status","err2status","seterr2status","err3status","seterr3status","errstate1","seterrstate1","errtext1","seterrtext1","errstate2","seterrstate2","errtext2","seterrtext2","erremstate","seterremstate","erremtext","seterremtext","buttonstate","setbuttonstate","Form","onSubmit","e","preventDefault","a","process","REACT_APP_mode","headers","REACT_APP_CLIENT_ID","REACT_APP_CLIENT_SECRET","fetch","REACT_APP_USERNAME","response","json","result","cust_id","JSON","parse","cname","cid","resp1","res1","getSubscrpts","className","Button","type","Loading","active","description","withOverlay","iconDescription","subtitle","timeout","onClose","kind","title","List","DataTable","rows","key","header","getHeaderProps","TableContainer","Table","TableHead","TableRow","map","TableHeader","TableBody","row","index","TableCell","PartNumber","Name","NumberOfAvailableSeats","SubscriptionState","Link","onClick","id","Id","getSubs","SeatSet","SubscriberId","Person","OrgName","GivenName","SubscriberState","subid","seatid","method","setTimeout","revokeSubs","reqbody","body","stringify","console","log","inviteUser","TextInput","invalid","invalidText","labelText","placeholder","size","value","onChange","target","match","disabled","App","prefix","href","Style","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df74b5cf.chunk.js","sourcesContent":["import React, { useState} from 'react';\nimport raw from 'raw.macro';\nimport { Button,TextInput, Link , Form, Loading, ToastNotification } from 'carbon-components-react';\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  TableContainer\n} from 'carbon-components-react';\n\nfunction SSMMain() {\n  const [gname, setgname] = useState('');\n  const [fname, setfname] = useState('');\n  const [email, setemail] = useState('');\n  const [inviteid, setinviteid] = useState('');\n  const [custdetail, setcustdetail] = useState('');\n\n  const [custobj, setCustobj] = useState({});\n  const [subsobj, setSubsobj] = useState({});\n  const [isLoading,setLoading] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n\n  const [notifystatus, setnotifystatus] = useState(false);\n  const [notifystatus2, setnotifystatus2] = useState(false);\n  const [notifystatus3, setnotifystatus3] = useState(false);\n  const [err1status, seterr1status] = useState(false);  \n  const [err2status, seterr2status] = useState(false);\n  const [err3status, seterr3status] = useState(false);\n\n  const [errstate1, seterrstate1] = useState(false); \n  const [errtext1, seterrtext1] = useState('A valid name is required');\n  const [errstate2, seterrstate2] = useState(false); \n  const [errtext2, seterrtext2] = useState('A valid name is required');\n  const [erremstate, seterremstate] = useState(false); \n  const [erremtext, seterremtext] = useState('A valid email is required');\n  const [buttonstate, setbuttonstate] = useState(false);\n\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n        const getSubscrpts = async() => {\n\n        try{\n            if(process.env.REACT_APP_mode === \"dev\"){\n              let authtoken = raw('./auth.txt');\n              let headers = {\n                  'X-IBM-Client-Id': process.env.REACT_APP_CLIENT_ID,\n                  'X-IBM-Client-Secret': process.env.REACT_APP_CLIENT_SECRET,\n                  'Authorization': authtoken,\n                  'accept': 'application/json',\n              }\n              let response = await fetch(`https://api.ibm.com/scx/sbs_orgaccess/customer?emailAddress=${process.env.REACT_APP_USERNAME}&_namedQuery=getCustomersByContactEmail`,{ headers})\n              let result = await response.json();\n\n              let cust_id = JSON.parse(result[\"List\"][0][\"Id\"]);\n\n              let cname = result[\"List\"][0][\"Organization\"][\"OrgName\"];\n              let cid = result[\"List\"][0][\"Owner\"];\n              \n              let custstr  = cname + \" : \" + cid;\n              setcustdetail(custstr);\n              \n              response = await fetch(`https://api.ibm.com/scx/run/sbs_orgaccess/subscription?_namedQuery=getSubscriptionByCustomer&customerId=${cust_id}`, { headers})\n              result = await response.json();\n\n              setCustobj({...result});\n              setLoading(false);\n\n            }\n\n            else{\n\n              let resp1 = await fetch('/getcustomerdetails');\n              let res1 = await resp1.json();\n              \n              let cname = res1[\"List\"][0][\"Organization\"][\"OrgName\"];\n              let cid = res1[\"List\"][0][\"Owner\"];\n              \n              let custstr  = cname + \" : \" + cid;\n              setcustdetail(custstr);\n\n              let response = await fetch('/getmysubscriptions')\n              let result = await response.json();\n\n              setCustobj({...result});\n              setLoading(false);\n            }\n            \n          \n        }\n        catch(error){\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        getSubscrpts();\n\n  };\n\n    const getSubsHandler = (id) => {\n\n      setLoading(true);\n\n       const getSubs = async() => {\n\n        try{\n\n           if(process.env.REACT_APP_mode === \"dev\"){\n            let authtoken = raw('./auth.txt');\n            let headers = {\n                'X-IBM-Client-Id': process.env.REACT_APP_CLIENT_ID,\n                'X-IBM-Client-Secret': process.env.REACT_APP_CLIENT_SECRET,\n                'Authorization': authtoken,\n                'accept': 'application/json',\n            }\n\n            let response = await fetch(`https://api.ibm.com/scx/run/sbs_orgaccess/subscriber?subscriptionId=${id}&_namedQuery=getSubscriberListBySubscription`, { headers})\n            let result = await response.json();\n\n            setSubsobj({...result});\n            setLoading(false);\n\n           }\n\n           else{\n\n            let response = await fetch('/getSubscribers?id=' + id);\n            let result = await response.json();\n            \n            setSubsobj({...result});\n            setLoading(false);\n           }\n            \n          }\n        \n        catch(error){\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        getSubs();\n  }\n\n  const inviteHandler = (id) => {\n    setShowForm(true);\n    setinviteid(id);\n  }\n\n  const handleInviteSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    if(gname && fname && email) {\n\n       const inviteUser = async() => {\n\n        try{\n          if(process.env.REACT_APP_mode === \"dev\"){\n                \n            let authtoken = raw('./auth.txt');\n            let headers = {\n                'X-IBM-Client-Id': process.env.REACT_APP_CLIENT_ID,\n                'X-IBM-Client-Secret': process.env.REACT_APP_CLIENT_SECRET,\n                'Authorization': authtoken,\n                'accept': 'application/json',\n                'content-type': 'application/json'\n            }\n             let reqbody = {\n                \"Subscriber\": {\n                  \"Person\": {\n                    \"GivenName\": gname,\n                    \"EmailAddress\": email,\n                    \"FamilyName\": fname,\n                    \"RoleSet\": [\n                      \"CustomerAdministrator\",\n                      \"AppDeveloper\"\n                    ]\n                  }\n                }\n            };\n\n            let response = await fetch(`https://api.ibm.com/scx/run/sbs_orgaccess/subscriber/inviteUser?subscriptionId=${inviteid}`, { method: \"POST\", body: JSON.stringify(reqbody), headers})\n            let result = await response.json();\n\n            if(result[\"InviteUser\"][\"SuccessMessage\"] === \"User created and entitled in inviter's organization.\"){\n              setnotifystatus(true);\n              setShowForm(false);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }\n\n            else if(result[\"InviteUser\"][\"SuccessMessage\"] === \"User exists in same organization and entitled with specified subscription.\"){\n              setnotifystatus3(true);\n              setShowForm(false);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }\n\n            else {\n              seterr1status(true);\n              setLoading(false);\n            }\n\n          }\n          \n          else{\n\n            let response = await fetch('/inviteuser?givenname=' + gname + '&useremail=' + email + '&familyname=' + fname + '&subspid=' + inviteid)\n            let result = await response.json();\n                        \n            if(result[\"InviteUser\"][\"SuccessMessage\"] === \"User created and entitled in inviter's organization.\"){\n              setnotifystatus(true);\n              setShowForm(false);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }\n\n            else if(result[\"InviteUser\"][\"SuccessMessage\"] === \"User exists in same organization and entitled with specified subscription.\"){\n              setnotifystatus3(true);\n              setShowForm(false);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }\n\n            else {\n              seterr1status(true);\n              setLoading(false);\n            }\n\n          }\n        }\n        catch(error){\n            console.log(error);\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        inviteUser();\n\n      setgname('');\n      setfname('');\n      setemail('');\n\n     }\n\n     else {\n      seterr3status(true);\n      setLoading(false);\n    }\n  } \n\n\n const revokeHandler = (subid,seatid) => {\n\n     setLoading(true);\n     const revokeSubs = async() => {\n\n        try{\n           if(process.env.REACT_APP_mode === \"dev\"){\n                \n            let authtoken = raw('./auth.txt');\n            let headers = {\n                'X-IBM-Client-Id': process.env.REACT_APP_CLIENT_ID,\n                'X-IBM-Client-Secret': process.env.REACT_APP_CLIENT_SECRET,\n                'Authorization': authtoken,\n                'accept': 'application/json',\n            }\n\n            let response = await fetch(`https://api.ibm.com/scx/run/sbs_orgaccess/subscriber/${subid}/seat/${seatid}`, { headers, method: \"POST\"})\n            let result = await response;\n\n             if(result[\"status\"] === 204){\n              setnotifystatus2(true);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }\n            \n            else {\n              seterr1status(true);\n              setLoading(false);\n            }\n\n           }\n\n           else{\n            let response = await fetch('/revokesubscription?subid=' + subid + '&seatid=' + seatid)\n            let result = await response.json();\n            \n             if(result[\"result\"] === \"success\"){\n              setnotifystatus2(true);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }            \n            else {\n              seterr1status(true);\n              setLoading(false);\n            }\n          }\n          }\n        \n        catch(error){\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n      revokeSubs();\n }\n\nconst headers = [\n    {\n    key: 'partnumber',\n    header: 'Part Number',\n  },\n  {\n    key: 'name',\n    header: 'Name',\n  },\n  {\n    key: 'numofseats',\n    header: 'Number of Available Seats',\n  },\n    {\n    key: 'subscrpstate',\n    header: 'Subscription State',\n  },\n  {\n    key: 'action1',\n    header: 'Action',\n  },\n    {\n    key: 'action2',\n    header: '',\n  },\n];\n\nconst headers1 = [\n  {\n    key: 'subid',\n    header: 'Subscriber ID',\n  },\n    {\n    key: 'orgname',\n    header: 'Org Name',\n  },\n  {\n    key: 'givenname',\n    header: 'Given Name',\n  },\n  {\n    key: 'substate',\n    header: 'Subscriber State',\n  },\n  {\n    key: 'revokeaction',\n    header: 'Action',\n  },\n];\n\n function notifystatusf() {\n    setnotifystatus(false);\n  }\n\n  function notifystatusf2() {\n    setnotifystatus2(false);\n  }\n\n  function notifystatusf3() {\n    setnotifystatus3(false);\n  }\n\n  function err1closef() {\n    seterr1status(false);\n  }\n  function err2closef() {\n    seterr2status(false);\n  }\n  function err3closef() {\n    seterr3status(false);\n  }\n\n  const validGname = (e) => {\n\n      if(!e.target.value.match(/^[a-zA-Z]+$/)){\n              seterrstate1(true)\n              seterrtext1(\"Only letters allowed. No special characters or numbers\");\n              setbuttonstate(true)\n           }\n      else{\n            seterrstate1(false)\n            setbuttonstate(false)\n        }        \n            \n      setgname(e.target.value)\n    \n  }\n  const validFname = (e) => {\n\n      if(!e.target.value.match(/^[a-zA-Z]+$/)){\n              seterrstate2(true)\n              seterrtext2(\"Only letters allowed. No special characters or numbers\");\n              setbuttonstate(true)\n           }\n      else{\n            seterrstate2(false)\n            setbuttonstate(false)\n        }        \n            \n      setfname(e.target.value)\n    \n  }\nconst validEmail = (e) => {\n\n      if(!e.target.value.match(/^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$/)){\n              seterremstate(true)\n              seterremtext(\"Valid Email format required\");\n              setbuttonstate(true)\n           }\n      else{\n            seterremstate(false)\n            setbuttonstate(false)\n        }        \n            \n      setemail(e.target.value)\n    \n  }\n\n  return (\n    <>\n    <Form onSubmit={handleSubmit}>\n      <div className=\"ButtonArea\">\n        <Button type=\"submit\" > Get My Subscriptions </Button>\n      </div>\n      \n    </Form>\n\n     {custdetail && <h2>{custdetail}</h2>}\n\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n\n      <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n  {notifystatus && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Invited user to Subscription</span>}\n        timeout={9000}\n        onClose = {notifystatusf}\n        kind = 'success'\n        title=\"Success Notification\"\n      />\n      }\n\n    {notifystatus2 && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Revoked Subscriber</span>}\n        timeout={9000}\n        onClose = {notifystatusf2}\n        kind = 'success'\n        title=\"Success Notification\"\n      />\n      }\n\n      {notifystatus3 && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>User exists in same organization and entitled with specified subscription</span>}\n        timeout={5000}\n        onClose = {notifystatusf3}\n        kind = 'success'\n        title=\"Success Notification\"\n      />\n      }\n\n   {err1status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Operation cannot be done</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n    {err2status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Server cannot be reached</span>}\n        timeout={3000}\n        onClose = {err2closef}\n        title=\"Error Notification\"\n      />\n      }\n    \n    {err3status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Fields cannot be empty</span>}\n        timeout={3000}\n        onClose = {err3closef}\n        title=\"Error Notification\"\n      />\n      }\n\n\n       {custobj.List && \n         <div className = \"TableDisplay\" >\n\n          {custobj.List && \n          \n          <DataTable rows={custobj.List} headers={headers}>\n              {({ rows, headers, getHeaderProps}) => \n            (\n              <TableContainer title=\"Subscription Results\">\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {custobj.List && custobj.List.map((row, index) => {\n                return (\n\n                      <TableRow key={index} >\n\n                        <TableCell>{row.PartNumber}</TableCell>\n                        <TableCell>{row.Name}</TableCell>\n                        <TableCell>{row.NumberOfAvailableSeats}</TableCell>\n                        <TableCell>{row.SubscriptionState}</TableCell>\n                        <TableCell><Link onClick={() => getSubsHandler(row.Id)}>Get Subscribers</Link></TableCell>\n                        <TableCell><Link onClick={() => inviteHandler(row.Id)}>Invite to Subscription</Link></TableCell>\n\n                      </TableRow>\n\n                );\n            })}\n                  </TableBody>\n                </Table>\n                </TableContainer>\n            )\n                }\n          </DataTable>}\n\n        </div>} \n\n         {subsobj.List && \n         <div className = \"TableDisplay\" >\n\n          {subsobj.List && \n          \n          <DataTable rows={subsobj.List} headers={headers1}>\n              {({ rows, headers, getHeaderProps}) => \n            (\n              <TableContainer title=\"Subscriber Results\">\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {subsobj.List && subsobj.List.map((row, index) => {\n                return (\n\n                      <TableRow key={index} >\n\n                        <TableCell>{row.SeatSet[0].SubscriberId}</TableCell>\n                        <TableCell>{row.Person.OrgName}</TableCell>\n                        <TableCell>{row.Person.GivenName}</TableCell>\n                        <TableCell>{row.SubscriberState}</TableCell>\n                        <TableCell><Link onClick={() => revokeHandler(row.SeatSet[0].SubscriberId,row.SeatSet[0].Id)}>Revoke</Link></TableCell>\n\n                      </TableRow>\n\n                );\n            })}\n                  </TableBody>\n                </Table>\n                </TableContainer>\n            )\n                }\n          </DataTable>}\n\n        </div>} \n\n        {showForm && (\n         <Form onSubmit={handleInviteSubmit} >\n        <div className=\"TextArea\" >\n          <TextInput type = \"text\" id={'gname'}  invalid = {errstate1} invalidText = {errtext1} labelText = {'Given Name*'} placeholder = {'Given Name'} size = 'lg' value={gname} onChange={validGname} /> <br/>\n        </div>\n\n        <div className=\"TextArea\" >\n          <TextInput type = \"text\" id={'fname'}  invalid = {errstate2} invalidText = {errtext2} labelText = {'Family Name*'} placeholder = {'Family Name'} size = 'lg' value={fname} onChange={validFname} /> <br/>\n        </div>\n        \n        <div className=\"TextArea\" >\n          <TextInput type = \"text\" id={'email'}  invalid = {erremstate} invalidText = {erremtext} labelText = {'Email Address*'} placeholder = {'Email address'} size = 'lg' value={email} onChange={validEmail} /> \n        </div>\n        \n        <div className=\"ButtonArea\">\n          <Button type=\"submit\" disabled = {buttonstate}> Invite </Button>\n        </div>\n        </Form>\n      )}\n\n\n    </>\n  );\n};\n\nexport default SSMMain;","import React from 'react'\nimport './App.css';\nimport SSMMain from './components/ssmmain.js';\n\n\n// import { Tabs, Tab, Loading } from 'carbon-components-react';\n\nimport {Header,HeaderName} from \"carbon-components-react/lib/components/UIShell\";\n\n\n//import { HeaderContainer, Modal } from 'carbon-components-react';\n//import {Header} from 'carbon-components-react';\n\nfunction App() {\n  \n  return (\n\n    <>\n    \n      <Header aria-label=\"IBM\">\n        <HeaderName prefix = \"\" href=\"#\">\n          <div Style=\"white-space: nowrap;\">\n            SaaS User Subscription and Management Sample Application\n          </div>\n          </HeaderName>\n        </Header> \n      \n\n    <div className=\"App\">\n     <div className = \"AppContent\">\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n      <h2>Subscription for OrgAccess </h2>     \n            <SSMMain />\n         \n     \n\n    </div>\n    </div>\n\n    </>\n\n    \n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.scss\";\nimport \"./style.scss\";\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}