{"version":3,"sources":["components/FileUpload.js","components/JobStatus.js","components/FetchResults.js","components/CarbonChart.js","App.js","index.js"],"names":["lastId","uid","prefix","valid","FileUpload","accept","sendDataToParent","useState","files","setFiles","showNotif","setNotification","kind","subtitle","title","notifData","setNotifData","validSize","name","console","log","fileNameSplit","split","length","uploadFile","fileToUpload","a","JSON","stringify","filesize","updatedFile","status","iconDescription","invalid","errorSubject","errorBody","map","file","uuid","invalidFileType","fetch","method","mode","body","ok","Error","setTimeout","onAddFiles","evt","addedFiles","stopPropagation","newFiles","size","data","FormData","append","axios","post","res","result","response","msg","errMsg","handleFileUploaderItemClick","useCallback","_","clickedUuid","filter","class","FileUploaderDropContainer","labelText","className","style","width","rest","FileUploaderItem","onDelete","timeout","onCloseButtonClick","caption","JobStatus","jobId","setStatus","loading","setLoading","useEffect","updateJobStatus","get","rows","id","jobid","message","copyfunc","text","CodeSnippet","type","feedback","Style","refresh","onClick","DataTable","headers","key","header","getTableProps","getHeaderProps","getRowProps","TableContainer","Table","TableHead","TableRow","TableHeader","TableBody","row","cells","cell","TableCell","value","Loading","active","overlay","FetchResults","getChartResults","state","setInvalid","showButton","setButton","currentJobId","setJobId","getResults","e","preventDefault","target","job_text","trim","download","window","open","Form","onSubmit","TextInput","helperText","placeholder","invalidText","defaultValue","onChange","ButtonSet","Button","marginLeft","CarbonChart","options","group","label","anomaly","anaomalyEstimator","WindowAD","ReconstructAD","RelationshipAD","App","setData","showChart","setChart","showFileUploader","setFileUploader","columns","setColumns","showForm","setForm","showTarget","setTarget","showAnomalyEstimatorOptions","setAnomalyEstimatorOptions","showTextField","setTextField","targetParams","setTargetParams","timeColumnOptions","setTimeColumnOptions","showTimeColumn","setTimeColumn","time","setTime","anomalyEstimatorOptions","setAnomalyEstimator","targetInvalid","setTargetInvalid","LWInvalid","setLWInvalid","OWInvalid","setOWInvalid","LTInvalid","setLTInvalid","showJob","setShowJob","showSample","setSample","sampledata","setSampledata","datasetName","setDatasetName","resetStates","err","getSample","setTargetParameters","selectedItem","index","indexOf","forEach","column","idx","push","uploadData","document","getElementById","setAttribute","formData","dataset_type","filename","innerText","target_column","prediction_type","toLowerCase","algorithm_type","anomaly_estimator","lookback_window","parseInt","lookback_window_custom_value","observation_window","labeling_method","labeling_threshold","time_column","scrollIntoView","behavior","block","inline","isNaN","Number","isInteger","getTimeColumns","href","whiteSpace","RadioButtonGroup","legendText","RadioButton","Dropdown","titleText","items","FormGroup","MultiSelect","itemToString","item","selectedItems","initialSelectedItem","ReactDOM","render"],"mappings":"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","file":"static/js/main.567938d7.chunk.js","sourcesContent":["import { FileUploaderItem, FileUploaderDropContainer, ToastNotification } from \"carbon-components-react\"\nimport React, { useState, useCallback } from \"react\";\nimport axios from \"axios\";\n\nlet lastId = 0;\nfunction uid(prefix = \"id\") {\n    lastId++;\n    return `${prefix}${lastId}`;\n}\nlet valid = true\nconst FileUpload = ({ accept, sendDataToParent }) => {\n    const [files, setFiles] = useState([]);\n    const [showNotif, setNotification] = useState(false)\n    const [notifData, setNotifData] = useState({\n        kind: \"\",\n        subtitle: \"\",\n        title: \"\"\n\n    })\n\n    const validSize = name => {\n        console.log(name)\n        let fileNameSplit = name.split('.')\n        let fileType = fileNameSplit[fileNameSplit.length - 1]\n        if (fileType === \"csv\")\n            return 5000000\n        else\n            return 10000000\n    }\n\n    const uploadFile = async (fileToUpload) => {\n        // file size validation\n        console.log(\"file to upload: \" + JSON.stringify(fileToUpload))\n        if (fileToUpload.filesize <= validSize(fileToUpload.name)) {\n            valid = true;\n        } else {\n            valid = false;\n            const updatedFile = {\n                ...fileToUpload,\n                status: \"edit\",\n                iconDescription: \"Delete file\",\n                invalid: true,\n                errorSubject: \"File size exceeds limit\",\n                errorBody: `Max file size is ${fileToUpload.name.split(\".\")[fileToUpload.name.split(\".\").length - 1] === \"csv\" ? 5 : 10}MB. Select a new file and try again.`,\n            };\n            setFiles((files) =>\n                files.map((file) =>\n                    file.uuid === fileToUpload.uuid ? updatedFile : file\n                )\n            );\n            return;\n        }\n        console.log(fileToUpload);\n        // file type validation\n        if (fileToUpload.invalidFileType) {\n            valid = false;\n            const updatedFile = {\n                ...fileToUpload,\n                status: \"edit\",\n                iconDescription: \"Delete file\",\n                invalid: true,\n                errorSubject: \"Invalid file type\",\n                errorBody: `\"${fileToUpload.name}\" does not have a valid file type.`,\n            };\n            setFiles((files) =>\n                files.map((file) =>\n                    file.uuid === fileToUpload.uuid ? updatedFile : file\n                )\n            );\n            return;\n        } else {\n            valid = true;\n        }\n        try {\n            const response = await fetch(\n                \"https://www.mocky.io/v2/5185415ba171ea3a00704eed?mocky-delay=1000ms\",\n                {\n                    method: \"POST\",\n                    mode: \"cors\",\n                    body: fileToUpload,\n                }\n            );\n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n\n\n            // show x icon after 1 second\n            setTimeout(() => {\n                const updatedFile = {\n                    ...fileToUpload,\n                    status: \"edit\",\n                    iconDescription: \"Remove file\",\n                };\n                setFiles((files) =>\n                    files.map((file) =>\n                        file.uuid === fileToUpload.uuid ? updatedFile : file\n                    )\n                );\n            }, 1000);\n        } catch (error) {\n            valid = false;\n            const updatedFile = {\n                ...fileToUpload,\n                status: \"edit\",\n                iconDescription: \"Upload failed\",\n                invalid: true,\n            };\n            setFiles((files) =>\n                files.map((file) =>\n                    file.uuid === fileToUpload.uuid ? updatedFile : file\n                )\n            );\n            //console.log(error);\n        }\n    };\n\n    const onAddFiles = async (evt, { addedFiles }) => {\n        evt.stopPropagation();\n        const newFiles = addedFiles.map((file) => ({\n            uuid: uid(),\n            name: file.name,\n            filesize: file.size,\n            status: \"uploading\",\n            iconDescription: \"Uploading\",\n        }));\n        if (addedFiles[0]) {\n            setFiles([newFiles[0]]);\n            uploadFile(newFiles[0]);\n            if (valid) {\n                const data = new FormData()\n                data.append('file', addedFiles[0])\n                let updatedFile;\n                try {\n                    const res = await axios.post(\"/upload\", data, {})\n                    let result = await sendDataToParent(res)\n                    if(!result){\n                        throw new Error({response:{data:{msg:\"Only timeseries dataset are valid\"}}})\n                    }\n                    updatedFile = {\n                        ...newFiles[0],\n                        status: \"complete\",\n                        iconDescription: \"Upload complete\",\n                    };\n                    setNotifData({\n                        kind: \"success\",\n                        subtitle: \"File uploaded successfully\",\n                        title: \"Success\"\n                    })\n                    setNotification(true)\n                    console.log(result)\n                } catch (err) {\n                    console.log(err)\n                    let errMsg;\n                    try {\n                        errMsg = err.response.data.msg\n                    } catch {\n                        errMsg = \"Something went wrong\"\n                    }\n                    setNotifData({\n                        kind: \"error\",\n                        subtitle: errMsg,\n                        title: \"Error\"\n                    })\n                    setNotification(true)\n                    updatedFile = {\n                        ...newFiles[0],\n                        status: \"edit\",\n                        iconDescription: \"Upload failed\",\n                        invalid: true,\n                    };\n                } finally {\n                    setFiles((files) =>\n                        files.map((file) =>\n                            file.uuid === newFiles[0].uuid ? updatedFile : file\n                        )\n                    );\n                }\n            }\n        } else {\n            //console.log(\"No file uploaded\");\n        }\n    };\n\n    const handleFileUploaderItemClick = useCallback(\n        (_, { uuid: clickedUuid }) =>\n            setFiles(files.filter(({ uuid }) => clickedUuid !== uuid)),\n        [files]\n    );\n\n    return (\n        <div class=\"bx--form-item\">\n            <strong class=\"bx--file--label\">Upload File</strong>\n            <p class=\"bx--label-description\">Supported file types are .json and .csv. Max file size is 10MB for .json and 5MB for .csv.</p>\n            <FileUploaderDropContainer\n                labelText=\"Drag and drop here or click to upload\"\n                onAddFiles={onAddFiles}\n                accept={accept}\n            />\n            <div className=\"uploaded-files\" style={{ width: \"100%\" }}>\n                {files.map(\n                    ({\n                        uuid,\n                        name,\n                        filesize,\n                        status,\n                        iconDescription,\n                        invalid,\n                        ...rest\n                    }) => (\n                        <FileUploaderItem\n                            key={uid()}\n                            uuid={uuid}\n                            name={name}\n                            filesize={filesize}\n                            size=\"lg\"\n                            status={status}\n                            iconDescription={iconDescription}\n                            invalid={invalid}\n                            onDelete={handleFileUploaderItemClick}\n                            {...rest}\n                        />))}\n            </div>\n            {showNotif ?\n                <ToastNotification\n                    kind={notifData.kind}\n                    iconDescription=\"Close notification\"\n                    subtitle={<span>{notifData.subtitle}</span>}\n                    timeout={3000}\n                    onCloseButtonClick={() => setNotification(false)}\n                    title={notifData.title}\n                    caption=\"\"\n                /> : null}\n        </div>\n    )\n}\n\nexport default FileUpload;","import {\n    TableContainer,\n    CodeSnippet,\n    DataTable,\n    Table,\n    TableHead,\n    TableRow,\n    TableHeader,\n    TableBody,\n    TableCell,\n    Loading,\n    ToastNotification\n} from 'carbon-components-react';\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { CopyFile24, Renew24 } from '@carbon/icons-react';\nimport axios from 'axios'\nimport { useState, useEffect } from 'react'\n\n\nconst JobStatus = ({jobId}) => {\n    const [status, setStatus] = useState(\"submitted\")\n    const [loading, setLoading] = useState(false)\n    const [showNotif, setNotification] = useState(false)\n    const [notifData, setNotifData] = useState({\n        kind: \"\",\n        subtitle: \"\",\n        title: \"\"\n    })\n    useEffect(() => setStatus(\"submitted\"), [jobId]);\n    const updateJobStatus = async () => {\n        try {\n            setLoading(true)\n            let res = await axios.get(`/status?jobid=${jobId}`)\n            setStatus(res.data.status)\n        } catch (err) {\n            let errMsg;\n            try {\n                errMsg = err.response.data.msg\n            } catch {\n                errMsg = \"Something went wrong\"\n            }\n            setNotifData({\n                kind: \"error\",\n                subtitle: errMsg,\n                title: \"Error\"\n            })\n            setNotification(true)\n        } finally {\n            setLoading(false)\n        }\n    }\n    const headers = [\n        {\n            key: 'jobid',\n            header: 'Job ID',\n        },\n        {\n            key: 'message',\n            header: 'Message',\n        },\n        {\n            key: 'copyfunc',\n            header: ''\n        },\n        {\n            key: 'refresh',\n            header: ''\n        }\n\n    ];\n    const rows = [\n        {\n            id: 'a',\n            jobid: jobId,\n            message: status,\n            copyfunc: <CopyToClipboard text={jobId}>\n                <CodeSnippet type=\"inline\" feedback=\"Copied to clipboard\" ><CopyFile24 Style=\"width: 24px ; height: 24px\" /></CodeSnippet>\n            </CopyToClipboard>,\n            refresh: <Renew24 onClick={updateJobStatus} />\n\n        }]\n    return (\n        <>\n            <DataTable rows={rows} headers={headers}>\n                {({ rows, headers, getTableProps, getHeaderProps, getRowProps }) =>\n                (\n                    <TableContainer title=\"Parameter Job\">\n                        <Table {...getTableProps()}>\n                            <TableHead>\n                                <TableRow>\n                                    {headers.map((header) => (\n                                        <TableHeader {...getHeaderProps({ header })}>\n                                            {header.header}\n                                        </TableHeader>\n                                    ))}\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {rows.map((row) => (\n                                    <TableRow {...getRowProps({ row })}>\n                                        {row.cells.map((cell) => (\n                                            <TableCell key={cell.id}>{cell.value}</TableCell>\n                                        ))}\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                )}\n            </DataTable>\n            <Loading active={loading} overlay={true} />\n            {showNotif ?\n                <ToastNotification\n                    kind={notifData.kind}\n                    iconDescription=\"Close notification\"\n                    subtitle={<span>{notifData.subtitle}</span>}\n                    timeout={3000}\n                    onCloseButtonClick={() => setNotification(false)}\n                    title={notifData.title}\n                    caption=\"\"\n                /> : null}\n        </>\n    )\n}\n\nexport default JobStatus","import { TextInput, Button, Form, Loading, ButtonSet, ToastNotification } from 'carbon-components-react';\nimport axios from 'axios';\nimport { useState } from \"react\"\nimport \"../App.css\"\n\nconst FetchResults = ({ jobId, getChartResults }) => {\n  const [loading, setLoading] = useState(false)\n  const [invalid, setInvalid] = useState({ state: false, text: \"\" })\n  const [showButton, setButton] = useState(false)\n  const [currentJobId, setJobId] = useState(\"\")\n  const [showNotif, setNotification] = useState(false)\n  const [notifData, setNotifData] = useState({\n    kind: \"\",\n    subtitle: \"\",\n    title: \"\"\n\n  })\n\n  const getResults = async (e) => {\n    e.preventDefault();\n    if (e.target.job_text.value.trim() === \"\") {\n      setInvalid({\n        state: true,\n        text: \"Please enter a Job ID\"\n      })\n    } else {\n      setLoading(true)\n      try {\n        let res = await axios.get(`/result?jobid=${e.target.job_text.value}`)\n        //setButton(true)\n        console.log(res.data.length)\n        setJobId(e.target.job_text.value)\n        if(res.data.length!==0)\n          getChartResults(res.data)\n\n      } catch(err){\n        let errMsg;\n      try{\n        errMsg = err.response.data.msg\n      } catch {\n        errMsg = \"Something went wrong\"\n      }\n        setNotifData({\n          kind: \"error\",\n          subtitle: errMsg,\n          title: \"Error\"\n        })\n        setNotification(true)\n      }finally {\n        setLoading(false)\n      }\n    }\n  }\n\n  const download = async(e) => {\n    e.preventDefault();\n    window.open(`/download?jobid=${currentJobId}`,)\n  }\n  return (<Form className=\"fetch-results\" onSubmit={getResults}>\n    <h3>Fetch Processed Results </h3>\n    <br />\n    <br />\n    <TextInput\n      name=\"job_text\"\n      size=\"lg\"\n      labelText={\"Fetch Results\"}\n      helperText={\"Save this Job ID for futher use\"}\n      placeholder={\"Job ID\"}\n      invalid={invalid.state}\n      invalidText={invalid.text}\n      defaultValue={jobId}\n      onChange={() => { setInvalid({ state: false, text: \"\" }); setButton(false) }}\n    />\n    <br />\n    <ButtonSet >\n      <Button\n        kind=\"tertiary\"\n        type=\"submit\"\n      >\n        Fetch Results\n      </Button>\n      {showButton ?\n        <Button type=\"submit\" style={{ marginLeft: \"14px\" }} onClick={download}> Download Results </Button> : null}\n    </ButtonSet>\n    <Loading active={loading} overlay={true} />\n    {showNotif ?\n        <ToastNotification\n          kind={notifData.kind}\n          iconDescription=\"Close notification\"\n          subtitle={<span>{notifData.subtitle}</span>}\n          timeout={3000}\n          onCloseButtonClick={() => setNotification(false)}\n          title={notifData.title}\n          caption=\"\"\n        /> : null}\n  </Form>)\n}\n\nexport default FetchResults","import { LineChart } from \"@carbon/charts-react\";\nimport React from \"react\";\nimport \"@carbon/charts/styles.css\";\n\nconst CarbonChart = ({data}) => {\n    const options= {\n        \"title\": \"Results\",\n        \"axes\": {\n            \"bottom\": {\n                \"title\": \"Time\",\n                \"mapsTo\": \"time\",\n                \"scaleType\": \"time\"\n            },\n            \"left\": {\n                \"mapsTo\": \"value\",\n                \"title\": \"Value\",\n                \"scaleType\": \"linear\"\n            }\n        },\n        \"zoomBar\": {\n            \"top\": {\n              \"enabled\": true\n            }},\n        \n        \"getStrokeColor\": (group,label, data) => {\n            if(data && data.anomaly)\n                return \"red\"\n        },\n        \"curve\": \"curveMonotoneX\",\n        \"height\": \"400px\"\n    }\nreturn (\n    <LineChart\n        data={data}\n        options={options}\n        onSubmit={e => e.preventDefault()}>\n    </LineChart>\n)\n}\n\nexport default CarbonChart;","import { MultiSelect, RadioButton, RadioButtonGroup, FormGroup, Dropdown, TextInput, Button, Loading, ToastNotification } from 'carbon-components-react';\nimport { Header, HeaderName } from \"carbon-components-react/lib/components/UIShell\";\nimport { useState } from 'react'\nimport axios from 'axios'\nimport './App.css'\nimport FileUpload from './components/FileUpload';\nimport JobStatus from './components/JobStatus'\nimport FetchResults from './components/FetchResults';\nimport CarbonChart from './components/CarbonChart'\n\n\n\nconst anaomalyEstimator = {\n  WindowAD: ['IsolationForest', 'NearestNeighbor', 'SyntheticRandomForestTrainer', 'MinCovDet', 'AnomalyEnsembler'],\n  ReconstructAD: ['Covariance', 'GMM_L0', 'GMM_L1', 'MachineTranslation'],\n  RelationshipAD: ['IDD_AutoEncoder', 'Seq2seq_AutoEncoder', 'CNNAutoEncoder', 'GAN']\n}\n\nfunction App() {\n  const [data, setData] = useState([])\n  const [showChart, setChart] = useState(false)\n  const [showFileUploader, setFileUploader] = useState(false)\n  const [columns, setColumns] = useState([])\n  const [showForm, setForm] = useState(false)\n  const [showTarget, setTarget] = useState(false)\n  const [showAnomalyEstimatorOptions, setAnomalyEstimatorOptions] = useState(false)\n  const [showTextField, setTextField] = useState(false)\n  const [targetParams, setTargetParams] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [timeColumnOptions, setTimeColumnOptions] = useState([])\n  const [showTimeColumn, setTimeColumn] = useState(false)\n  const [time, setTime] = useState(\"\")\n  const [anomalyEstimatorOptions, setAnomalyEstimator] = useState([])\n  const [jobId, setJobId] = useState(\"\")\n  const [targetInvalid, setTargetInvalid] = useState({ state: false, text: \"\" })\n  const [LWInvalid, setLWInvalid] = useState({ state: false, text: \"\" })\n  const [OWInvalid, setOWInvalid] = useState({ state: false, text: \"\" })\n  const [LTInvalid, setLTInvalid] = useState({ state: false, text: \"\" })\n  const [showJob, setShowJob] = useState(false)\n  const [showNotif, setNotification] = useState(false)\n  const [notifData, setNotifData] = useState({\n    kind: \"\",\n    subtitle: \"\",\n    title: \"\"\n  })\n  const [showSample, setSample] = useState(false)\n  const [sampledata, setSampledata] = useState([])\n  const [datasetName, setDatasetName] = useState(\"\")\n\n  const resetStates = () => {\n    setTargetInvalid({ state: false, text: \"\" })\n    setLWInvalid({ state: false, text: \"\" })\n    setOWInvalid({ state: false, text: \"\" })\n    setLTInvalid({ state: false, text: \"\" })\n    setTimeColumnOptions([])\n    setChart(false)\n    setTimeColumn(false)\n  }\n\n  const sendDataToParent = async (res) => {\n    resetStates()\n    let result = true\n    try {\n      setLoading(true)\n      //setData(res.data)\n      setDatasetName(\"customfile.json\")\n      setTimeColumnOptions(res.data)\n      setTimeColumn(true)\n      setForm(false)\n      result = true\n    } catch (err) {\n      console.log(err)\n      let errMsg;\n      try {\n        errMsg = err.response.data.msg\n      } catch {\n        errMsg = \"Something went wrong\"\n      }\n      setNotifData({\n        kind: \"error\",\n        subtitle: errMsg,\n        title: \"Error\"\n      })\n      setNotification(true)\n      result = false\n    } finally {\n      setLoading(false)\n    }\n    return result\n  }\n\n\n  const getSample = async (e) => {\n    resetStates()\n    try {\n      setLoading(true)\n      let res = await axios.get('/availabledatasets')\n      console.log(res)\n      setSample(true)\n      setSampledata(res.data)\n      setForm(false)\n      setFileUploader(false)\n    } catch (err) {\n      let errMsg;\n      try {\n        errMsg = err.response.data.msg\n      } catch {\n        errMsg = \"Something went wrong\"\n      }\n      setNotifData({\n        kind: \"error\",\n        subtitle: errMsg,\n        title: \"Error\"\n      })\n      setNotification(true)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const showDragDrop = () => {\n    setFileUploader(true)\n    setChart(false)\n    setForm(false)\n    setSample(false)\n    setTimeColumn(false)\n  }\n\n  const showTextInput = ({ selectedItem }) => {\n    if (selectedItem === \"Custom\")\n      setTextField(true)\n    else\n      setTextField(false)\n\n  }\n\n  const setTargetParameters = async ({ selectedItem }) => {\n    try {\n    const index = timeColumnOptions.indexOf(selectedItem)\n    let columns = []\n    timeColumnOptions.forEach((column, idx) => {\n      if (idx !== index) {\n        columns.push({\n          name: column\n        })\n      }\n    })\n    setLoading(true)\n    setColumns(columns)\n    let res = await axios.get(`/data/${datasetName}/${selectedItem}`)\n    setData(res.data)\n    setChart(true)\n    //setLines(lines)\n    setForm(true)\n    if (timeColumnOptions.length === 2) {\n      setTarget(false)\n    } else {\n      setTarget(true)\n    }\n    setTime(selectedItem)\n  } catch (err) {\n    let errMsg;\n    try {\n      errMsg = err.response.data.msg\n    } catch {\n      errMsg = \"Something went wrong\"\n    }\n    setNotifData({\n      kind: \"error\",\n      subtitle: errMsg,\n      title: \"Error\"\n    })\n    setNotification(true)\n  } finally {\n    setLoading(false)\n  }\n\n  }\n  \n\n  const uploadData = async (e) => {\n    e.preventDefault()\n    try{\n    if(document.getElementById(\"submit-btn\").name !== \"btn-clicked\")\n      return\n    document.getElementById(\"submit-btn\").setAttribute(\"name\",\"btn\")\n    } catch{\n      return\n    }\n    let formData = {}\n    formData.dataset_type = e.target.dataset_type.value\n    if(formData.dataset_type === \"sampledt\")\n      formData.filename = document.getElementById(\"sample_data\").innerText\n    if (columns.length === 1) {\n      formData.target_column = columns[0].name\n    } else {\n      formData.target_column = targetParams\n    }\n    formData.prediction_type = document.getElementById(\"prediction_type\").innerText.toLowerCase()\n    formData.algorithm_type = document.getElementById(\"algorithm_type\").innerText\n    console.log(formData.algorithm_type === \"DeepAD\")\n    if (formData.algorithm_type !== \"DeepAD\" && formData.algorithm_type !== \"PredAD\")\n      formData.anomaly_estimator = document.getElementById(\"anomaly_estimator\").innerText\n    else\n      formData.anomaly_estimator = 'Default'\n    formData.lookback_window = document.getElementById(\"lookback_window\").innerText.toLowerCase()\n    if (formData.lookback_window === 'custom')\n      formData.lookback_window = parseInt(e.target.lookback_window_custom_value.value)\n    formData.observation_window = parseInt(e.target.observation_window.value)\n    formData.labeling_method = document.getElementById(\"labeling_method\").innerText\n    formData.labeling_threshold = parseInt(e.target.labeling_threshold.value)\n    formData.time_column = time\n    //formData.recent_data = parseInt(e.target.recent_data.value)\n    console.log(formData)\n\n    let valid = true\n    if (typeof (formData.target_column) === \"object\" && formData.target_column.length === 0) {\n      setTargetInvalid({ state: true, text: \"Please select some options\" })\n      document.getElementById(\"target_columns\").scrollIntoView({ behavior: \"smooth\", block: \"center\", inline: \"nearest\" });\n      valid = false\n    }\n    if (formData.lookback_window !== 'auto' && (isNaN(formData.lookback_window) || formData.lookback_window > 50 || formData.lookback_window < 1 || !Number.isInteger(formData.lookback_window))) {\n      setLWInvalid({ state: true, text: \"Please enter an integer between 1 and 50\" })\n      document.getElementById(\"lookback_window_custom_value\").scrollIntoView({ behavior: \"smooth\", block: \"center\", inline: \"nearest\" });\n      valid = false\n    }\n    if (isNaN(formData.observation_window) || formData.observation_window < 1 || !Number.isInteger(formData.observation_window)) {\n      setOWInvalid({ state: true, text: \"Please enter an integer > 0\" })\n      document.getElementById(\"observation_window\").scrollIntoView({ behavior: \"smooth\", block: \"center\", inline: \"nearest\" });\n      valid = false\n    }\n    if (isNaN(formData.labeling_threshold) || formData.labeling_threshold < 1 || !Number.isInteger(formData.labeling_threshold)) {\n      setLTInvalid({ state: true, text: \"Please enter an integer > 0\" })\n      document.getElementById(\"labeling_threshold\").scrollIntoView({ behavior: \"smooth\", block: \"center\", inline: \"nearest\" });\n      valid = false\n    }\n    console.log(valid)\n    if (valid) {\n      try {\n        setLoading(true)\n        let res = await axios.post('/detect', JSON.stringify(formData), {\n          \"headers\": {\n            \"content-type\": \"application/json\",\n          }\n        })\n        setJobId(res.data.jobId)\n        setShowJob(true)\n      } catch (err) {\n        let errMsg;\n        try {\n          errMsg = err.response.data.msg\n        } catch {\n          errMsg = \"Something went wrong\"\n        }\n        setNotifData({\n          kind: \"error\",\n          subtitle: errMsg,\n          title: \"Error\"\n        })\n        setNotification(true)\n      } finally {\n        setLoading(false)\n      }\n    }\n  }\n\n  const changeAnomalyEstimatorOptions = ({ selectedItem }) => {\n    setAnomalyEstimatorOptions(false)\n    setTimeout(() => {\n      if (selectedItem !== `DeepAD` && selectedItem !== `PredAD`) {\n        setAnomalyEstimator(anaomalyEstimator[selectedItem])\n        setAnomalyEstimatorOptions(true)\n      } else {\n        setAnomalyEstimatorOptions(false)\n      }\n    }, 1)\n  }\n\n  const getChartResults = (data) => {\n    setData([])\n    setData(data)\n    setChart(false)\n    setChart(true)\n    setForm(false)\n  }\n\n  const getTimeColumns = async (e) => {\n    try {\n      getSample()\n      setLoading(true)\n      setDatasetName(e.selectedItem)\n      let res = await axios.get(`/columns/${e.selectedItem}`)\n      setChart(false)\n      setTimeColumn(true)\n      setTimeColumnOptions(res.data)\n      setForm(false)\n      setFileUploader(false)\n    } catch (err) {\n      let errMsg;\n      try {\n        errMsg = err.response.data.msg\n      } catch {\n        errMsg = \"Something went wrong\"\n      }\n      setNotifData({\n        kind: \"error\",\n        subtitle: errMsg,\n        title: \"Error\"\n      })\n      setNotification(true)\n    } finally {\n      setLoading(false)\n    }\n  }\n  return (\n    <div className=\"app\">\n      <Header aria-label=\"IBM\">\n        <HeaderName href=\"#\" prefix=\"\">\n          <div style={{ whiteSpace: \"nowrap\" }}>\n            Anomaly Detection Sample Application\n          </div>\n        </HeaderName>\n      </Header>\n      <br /><br /><br /><br />\n      <div className=\"app-header\">\n        <h2>Anomaly Detection</h2>\n      </div>\n      <form id=\"form-data\" onSubmit={uploadData} >\n        <div className=\"app-content\">\n          <RadioButtonGroup\n            legendText=\"Choose the type of Dataset\"\n            name=\"dataset_type\"\n          >\n            <RadioButton\n              labelText=\"Upload your Dataset\"\n              value=\"customdt\"\n              id=\"customdt\"\n              onClick={showDragDrop}\n            />\n            <RadioButton\n              labelText=\"Use Sample Dataset\"\n              value=\"sampledt\"\n              id=\"sampledt\"\n              onClick={getSample}\n            />\n          </RadioButtonGroup></div>\n        {showFileUploader ?\n          <FileUpload accept=\".json, .csv\" sendDataToParent={sendDataToParent} />\n          : null}\n        {showSample ? <Dropdown\n          id=\"sample_data\"\n          titleText=\"Select Value\"\n          label=\"Choose a Dataset\"\n          items={sampledata}\n          onChange={getTimeColumns}\n          onClick={getSample}\n        />: null}\n        {showTimeColumn ? <div>\n          <p className=\"others\">Time Column</p>\n          <Dropdown\n            id=\"time_column\"\n            titleText=\"Select Value\"\n            label=\"Choose an Option\"\n            items={timeColumnOptions}\n            onChange={setTargetParameters} /> </div> : null}\n        {showChart ?\n          //<Chart data={data} lines={lines} showAnomaly={showAnomaly} time={time} />\n          <CarbonChart data={data} />\n          : null}\n        {showForm ?\n          <FormGroup>\n            {showTarget ? <div>\n              <p className=\"target\">Target Parameters</p>\n              <MultiSelect\n                id=\"target_columns\"\n                titleText=\"Select Value\"\n                label=\"Select Options\"\n                items={columns}\n                itemToString={(item) => (item ? item.name : '')}\n                onChange={({ selectedItems }) => {\n                  setTargetParams(selectedItems)\n                  setTargetInvalid({ state: false, text: \"\" })\n                }}\n                invalid={targetInvalid.state}\n                invalidText={targetInvalid.text}\n              /> </div> : null}\n            {/*<p className=\"others\">Recent Data</p>\n            <TextInput name=\"recent_data\" type=\"number\" labelText=\"Add Value\" helperText=\"Add numbers (30% of data-size)\" defaultValue=\"1\" />*/}\n            <p className=\"others\">Prediction Type</p>\n            <Dropdown\n              id=\"prediction_type\"\n              titleText=\"Select Value\"\n              label=\"Choose an Option\"\n              initialSelectedItem=\"Entire\"\n              items={[\"Entire\", \"Recent\"]} />\n            <p className=\"others\">Algorithm Type</p>\n            <Dropdown\n              id=\"algorithm_type\"\n              titleText=\"Select Value\"\n              label=\"Select Options\"\n              items={['DeepAD', 'WindowAD', 'PredAD', 'ReconstructAD', 'RelationshipAD']}\n              initialSelectedItem=\"DeepAD\"\n              onChange={changeAnomalyEstimatorOptions} />\n            {showAnomalyEstimatorOptions ?\n              <div className=\"hidden-options\">\n                <Dropdown\n                  id=\"anomaly_estimator\"\n                  titleText=\"Select Value\"\n                  label=\"Select Options\"\n                  initialSelectedItem={anomalyEstimatorOptions[0]}\n                  items={anomalyEstimatorOptions}\n                /></div>\n              : null}\n            <p className=\"others\">Loopback Window</p>\n            <Dropdown\n              id=\"lookback_window\"\n              titleText=\"Select Value\"\n              items={['Auto', 'Custom']}\n              initialSelectedItem=\"Auto\"\n              onChange={showTextInput}\n            />\n            {showTextField ?\n              <div className=\"hidden-options\">\n                <TextInput\n                  name=\"lookback_window_custom_value\"\n                  id=\"lookback_window_custom_value\"\n                  type=\"number\" labelText=\"Add Value\"\n                  helperText=\"Add numbers (Max.50)\"\n                  defaultValue=\"10\"\n                  invalid={LWInvalid.state}\n                  invalidText={LWInvalid.text}\n                  onChange={() => setLWInvalid({ state: false, text: \"\" })} />\n              </div> : null}\n            <p className=\"others\">Observation Window</p>\n            <TextInput\n              name=\"observation_window\"\n              id=\"observation_window\"\n              type=\"number\"\n              labelText=\"Add Value\"\n              helperText=\"Add numbers (10% of data-size)\"\n              defaultValue=\"10\"\n              invalid={OWInvalid.state}\n              invalidText={OWInvalid.text}\n              onChange={() => setOWInvalid({ state: false, text: \"\" })} />\n            <p className=\"others\">Labeling Method</p>\n            <Dropdown\n              id=\"labeling_method\"\n              titleText=\"Select Value\"\n              label=\"Select Options\"\n              items={['Chi-Square', 'IID', 'Q-Score', 'Sliding-Window', 'Adaptive-Sliding-Window', 'Contextual-Anomaly']}\n              initialSelectedItem=\"IID\"\n            />\n            <p className=\"others\">Labelling Threshold</p>\n            <TextInput\n              name=\"labeling_threshold\"\n              id=\"labeling_threshold\"\n              type=\"number\" labelText=\"Add Value\"\n              helperText=\"Add numbers\"\n              defaultValue=\"10\"\n              invalid={LTInvalid.state}\n              invalidText={LTInvalid.text}\n              onChange={() => setLTInvalid({ state: false, text: \"\" })} />\n            <div className=\"hidden-options\">\n              <Button id=\"submit-btn\" name=\"btn\" onClick={e=>document.getElementById(\"submit-btn\").setAttribute(\"name\",\"btn-clicked\")} type=\"submit\">Submit</Button>\n            </div>\n          </FormGroup> : null}\n      </form>\n      <br />\n      {showJob ? <JobStatus jobId={jobId} msg={\"submitted\"} /> : null}\n      <FetchResults jobId={jobId} getChartResults={getChartResults} />\n      {showNotif ?\n        <ToastNotification\n          kind={notifData.kind}\n          iconDescription=\"Close notification\"\n          subtitle={<span>{notifData.subtitle}</span>}\n          timeout={3000}\n          onCloseButtonClick={() => setNotification(false)}\n          title={notifData.title}\n          caption=\"\"\n        /> : null}\n      <Loading active={loading} overlay={true} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"./style.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}