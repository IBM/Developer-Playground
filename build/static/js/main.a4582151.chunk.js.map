{"version":3,"sources":["components/Chart.js","components/FileUpload.js","components/JobStatus.js","components/FetchResults.js","App.js","index.js"],"names":["Chart","data","lines","showAnomaly","time","CustomizedDot","props","cx","cy","payload","stroke","value","anomaly","x","y","width","height","fill","viewBox","d","className","ResponsiveContainer","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","domain","YAxis","Tooltip","Legend","map","line","color","Line","type","dot","lastId","uid","prefix","valid","FileUpload","accept","sendDataToParent","useState","files","setFiles","showNotif","setNotification","kind","subtitle","title","notifData","setNotifData","validSize","name","console","log","fileNameSplit","split","length","uploadFile","fileToUpload","a","JSON","stringify","filesize","updatedFile","status","iconDescription","invalid","errorSubject","errorBody","file","uuid","invalidFileType","fetch","method","mode","body","ok","Error","setTimeout","onAddFiles","evt","addedFiles","stopPropagation","newFiles","size","FormData","append","axios","post","res","response","msg","handleFileUploaderItemClick","useCallback","_","clickedUuid","filter","class","FileUploaderDropContainer","labelText","style","rest","FileUploaderItem","onDelete","timeout","onCloseButtonClick","caption","JobStatus","jobId","setStatus","loading","setLoading","updateJobStatus","get","rows","id","jobid","message","copyfunc","text","CodeSnippet","feedback","Style","refresh","onClick","DataTable","headers","key","header","getTableProps","getHeaderProps","getRowProps","TableContainer","Table","TableHead","TableRow","TableHeader","TableBody","row","cells","cell","TableCell","Loading","active","overlay","FetchResults","getChartResults","state","setInvalid","showButton","setButton","currentJobId","setJobId","getResults","e","preventDefault","target","job_text","trim","download","window","open","Form","onSubmit","TextInput","helperText","placeholder","invalidText","defaultValue","onChange","ButtonSet","Button","marginLeft","anaomalyEstimator","WindowAD","ReconstructAD","RelationshipAD","App","setData","setLines","setAnomaly","showChart","setChart","showFileUploader","setFileUploader","columns","setColumns","showForm","setForm","showTarget","setTarget","showAnomalyEstimatorOptions","setAnomalyEstimatorOptions","showTextField","setTextField","targetParams","setTargetParams","timeColumnOptions","setTimeColumnOptions","showTimeColumn","setTimeColumn","setTime","anomalyEstimatorOptions","setAnomalyEstimator","targetInvalid","setTargetInvalid","LWInvalid","setLWInvalid","OWInvalid","setOWInvalid","LTInvalid","setLTInvalid","showJob","setShowJob","resetStates","Object","keys","err","getSample","slice","lineData","forEach","push","Math","floor","random","toString","columnNames","column","uploadData","formData","dataset_type","target_column","prediction_type","document","getElementById","innerText","toLowerCase","algorithm_type","anomaly_estimator","lookback_window","parseInt","lookback_window_custom_value","observation_window","labeling_method","labeling_threshold","time_column","scrollIntoView","behavior","block","inline","isNaN","Number","isInteger","href","whiteSpace","RadioButtonGroup","legendText","RadioButton","Dropdown","titleText","label","items","selectedItem","index","indexOf","idx","FormGroup","MultiSelect","itemToString","item","selectedItems","initialSelectedItem","ReactDOM","render"],"mappings":"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","file":"static/js/main.a4582151.chunk.js","sourcesContent":["import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport React from \"react\";\n\nconst Chart = ({ data, lines, showAnomaly, time }) => {\n  const CustomizedDot = (props) => {\n    const { cx, cy, stroke, payload, value } = props;\n    if (payload.anomaly)\n      return (\n        <svg x={cx - 10} y={cy - 10} width={20} height={20} fill=\"red\" viewBox=\"0 0 1024 1024\">\n          <path d=\"M517.12 53.248q95.232 0 179.2 36.352t145.92 98.304 98.304 145.92 36.352 179.2-36.352 179.2-98.304 145.92-145.92 98.304-179.2 36.352-179.2-36.352-145.92-98.304-98.304-145.92-36.352-179.2 36.352-179.2 98.304-145.92 145.92-98.304 179.2-36.352zM663.552 261.12q-15.36 0-28.16 6.656t-23.04 18.432-15.872 27.648-5.632 33.28q0 35.84 21.504 61.44t51.2 25.6 51.2-25.6 21.504-61.44q0-17.408-5.632-33.28t-15.872-27.648-23.04-18.432-28.16-6.656zM373.76 261.12q-29.696 0-50.688 25.088t-20.992 60.928 20.992 61.44 50.688 25.6 50.176-25.6 20.48-61.44-20.48-60.928-50.176-25.088zM520.192 602.112q-51.2 0-97.28 9.728t-82.944 27.648-62.464 41.472-35.84 51.2q-1.024 1.024-1.024 2.048-1.024 3.072-1.024 8.704t2.56 11.776 7.168 11.264 12.8 6.144q25.6-27.648 62.464-50.176 31.744-19.456 79.36-35.328t114.176-15.872q67.584 0 116.736 15.872t81.92 35.328q37.888 22.528 63.488 50.176 17.408-5.12 19.968-18.944t0.512-18.944-3.072-7.168-1.024-3.072q-26.624-55.296-100.352-88.576t-176.128-33.28z\" />\n        </svg>\n      );\n    else\n      return null\n  };\n  return (\n    <div>\n      <h2 className=\"chart-result\">Results</h2>\n      <ResponsiveContainer className=\"chart-area\"width={\"100%\"} height={400}>\n        <LineChart\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey={time} domain={[\"dataMin\", \"dataMax\"]} />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          {lines.map(({line,color}) =>\n            <Line type=\"monotone\" dataKey={line} stroke={color} dot={showAnomaly ? <CustomizedDot /> : null} />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport default Chart;","import { FileUploaderItem, FileUploaderDropContainer, ToastNotification } from \"carbon-components-react\"\nimport React, { useState, useCallback } from \"react\";\nimport axios from \"axios\";\n\nlet lastId = 0;\nfunction uid(prefix = \"id\") {\n    lastId++;\n    return `${prefix}${lastId}`;\n}\nlet valid = true\nconst FileUpload = ({ accept, sendDataToParent }) => {\n    const [files, setFiles] = useState([]);\n    const [showNotif, setNotification] = useState(false)\n    const [notifData, setNotifData] = useState({\n        kind: \"\",\n        subtitle: \"\",\n        title: \"\"\n\n    })\n\n    const validSize = name => {\n        console.log(name)\n        let fileNameSplit = name.split('.')\n        let fileType = fileNameSplit[fileNameSplit.length - 1]\n        if (fileType === \"csv\")\n            return 5000000\n        else\n            return 10000000\n    }\n\n    const uploadFile = async (fileToUpload) => {\n        // file size validation\n        console.log(\"file to upload: \" + JSON.stringify(fileToUpload))\n        if (fileToUpload.filesize <= validSize(fileToUpload.name)) {\n            valid = true;\n        } else {\n            valid = false;\n            const updatedFile = {\n                ...fileToUpload,\n                status: \"edit\",\n                iconDescription: \"Delete file\",\n                invalid: true,\n                errorSubject: \"File size exceeds limit\",\n                errorBody: `Max file size is ${fileToUpload.name.split(\".\")[fileToUpload.name.split(\".\").length - 1] === \"csv\" ? 5 : 10}MB. Select a new file and try again.`,\n            };\n            setFiles((files) =>\n                files.map((file) =>\n                    file.uuid === fileToUpload.uuid ? updatedFile : file\n                )\n            );\n            return;\n        }\n        console.log(fileToUpload);\n        // file type validation\n        if (fileToUpload.invalidFileType) {\n            valid = false;\n            const updatedFile = {\n                ...fileToUpload,\n                status: \"edit\",\n                iconDescription: \"Delete file\",\n                invalid: true,\n                errorSubject: \"Invalid file type\",\n                errorBody: `\"${fileToUpload.name}\" does not have a valid file type.`,\n            };\n            setFiles((files) =>\n                files.map((file) =>\n                    file.uuid === fileToUpload.uuid ? updatedFile : file\n                )\n            );\n            return;\n        } else {\n            valid = true;\n        }\n        try {\n            const response = await fetch(\n                \"https://www.mocky.io/v2/5185415ba171ea3a00704eed?mocky-delay=1000ms\",\n                {\n                    method: \"POST\",\n                    mode: \"cors\",\n                    body: fileToUpload,\n                }\n            );\n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n            \n\n            // show x icon after 1 second\n            setTimeout(() => {\n                const updatedFile = {\n                    ...fileToUpload,\n                    status: \"edit\",\n                    iconDescription: \"Remove file\",\n                };\n                setFiles((files) =>\n                    files.map((file) =>\n                        file.uuid === fileToUpload.uuid ? updatedFile : file\n                    )\n                );\n            }, 1000);\n        } catch (error) {\n            valid = false;\n            const updatedFile = {\n                ...fileToUpload,\n                status: \"edit\",\n                iconDescription: \"Upload failed\",\n                invalid: true,\n            };\n            setFiles((files) =>\n                files.map((file) =>\n                    file.uuid === fileToUpload.uuid ? updatedFile : file\n                )\n            );\n            //console.log(error);\n        }\n    };\n\n    const onAddFiles = async (evt, { addedFiles }) => {\n        evt.stopPropagation();\n        const newFiles = addedFiles.map((file) => ({\n            uuid: uid(),\n            name: file.name,\n            filesize: file.size,\n            status: \"uploading\",\n            iconDescription: \"Uploading\",\n        }));\n        if (addedFiles[0]) {\n            setFiles([newFiles[0]]);\n            uploadFile(newFiles[0]);\n            if (valid) {\n                const data = new FormData()\n                data.append('file', addedFiles[0])\n                let updatedFile;\n                try {\n                    const res = await axios.post(\"/upload\", data, {})\n                    sendDataToParent(res)\n                    updatedFile = {\n                        ...newFiles[0],\n                        status: \"complete\",\n                        iconDescription: \"Upload complete\",\n                    };\n                    setNotifData({\n                        kind: \"success\",\n                        subtitle: \"File uploaded successfully\",\n                        title: \"Success\"\n                    })\n                    setNotification(true)\n                } catch(err) {\n                    setNotifData({\n                        kind: \"error\",\n                        subtitle: err.response.data.msg,\n                        title: \"Error\"\n                    })\n                    setNotification(true)\n                    updatedFile = {\n                        ...newFiles[0],\n                        status: \"edit\",\n                        iconDescription: \"Upload failed\",\n                        invalid: true,\n                    };\n                } finally {\n                    setFiles((files) =>\n                        files.map((file) =>\n                            file.uuid === newFiles[0].uuid ? updatedFile : file\n                        )\n                    );\n                }\n            }\n        } else {\n            //console.log(\"No file uploaded\");\n        }\n    };\n\n    const handleFileUploaderItemClick = useCallback(\n        (_, { uuid: clickedUuid }) =>\n            setFiles(files.filter(({ uuid }) => clickedUuid !== uuid)),\n        [files]\n    );\n\n    return (\n        <div class=\"bx--form-item\">\n            <strong class=\"bx--file--label\">Upload File</strong>\n            <p class=\"bx--label-description\">Max file size is 10MB for .json and 5MB for .csv. Supported file types are .json and .csv.</p>\n            <FileUploaderDropContainer\n                labelText=\"Drag and drop here or click to upload\"\n                onAddFiles={onAddFiles}\n                accept={accept}\n            />\n            <div className=\"uploaded-files\" style={{ width: \"100%\" }}>\n                {files.map(\n                    ({\n                        uuid,\n                        name,\n                        filesize,\n                        status,\n                        iconDescription,\n                        invalid,\n                        ...rest\n                    }) => (\n                        <FileUploaderItem\n                            key={uid()}\n                            uuid={uuid}\n                            name={name}\n                            filesize={filesize}\n                            size=\"lg\"\n                            status={status}\n                            iconDescription={iconDescription}\n                            invalid={invalid}\n                            onDelete={handleFileUploaderItemClick}\n                            {...rest}\n                        />))}\n            </div>\n            {showNotif ?\n                <ToastNotification\n                    kind={notifData.kind}\n                    iconDescription=\"Close notification\"\n                    subtitle={<span>{notifData.subtitle}</span>}\n                    timeout={3000}\n                    onCloseButtonClick={() => setNotification(false)}\n                    title={notifData.title}\n                    caption=\"\"\n                /> : null}\n        </div>\n    )\n}\n\nexport default FileUpload;","import {\n    TableContainer,\n    CodeSnippet,\n    DataTable,\n    Table,\n    TableHead,\n    TableRow,\n    TableHeader,\n    TableBody,\n    TableCell,\n    Loading,\n    ToastNotification\n} from 'carbon-components-react';\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { CopyFile24, Renew32 } from '@carbon/icons-react';\nimport axios from 'axios'\nimport { useState } from 'react'\n\n\nconst JobStatus = ({ jobId, msg }) => {\n    const [status, setStatus] = useState(msg)\n    const [loading, setLoading] = useState(false)\n    const [showNotif, setNotification] = useState(false)\n    const [notifData, setNotifData] = useState({\n        kind: \"\",\n        subtitle: \"\",\n        title: \"\"\n    })\n    const updateJobStatus = async () => {\n        try {\n            setLoading(true)\n            let res = await axios.get(`/status?jobid=${jobId}`)\n            setStatus(res.data.status)\n        } catch(err) {\n            setNotifData({\n                kind: \"error\",\n                subtitle: err.response.data.msg,\n                title: \"Error\"\n              })\n              setNotification(true)\n        } finally {\n            setLoading(false)\n        }\n    }\n    const headers = [\n        {\n            key: 'jobid',\n            header: 'Job ID',\n        },\n        {\n            key: 'message',\n            header: 'Message',\n        },\n        {\n            key: 'copyfunc',\n            header: ''\n        },\n        {\n            key: 'refresh',\n            header: ''\n        }\n\n    ];\n    const rows = [\n        {\n            id: 'a',\n            jobid: jobId,\n            message: status,\n            copyfunc: <CopyToClipboard text={jobId}>\n                <CodeSnippet type=\"inline\" feedback=\"Copied to clipboard\" ><CopyFile24 Style=\"width: 24px ; height: 24px\" /></CodeSnippet>\n            </CopyToClipboard>,\n            refresh: <Renew32 Style=\"width: 24px ; height: 24px\" onClick={updateJobStatus} />\n\n        }]\n    return (\n        <>\n            <DataTable rows={rows} headers={headers}>\n                {({ rows, headers, getTableProps, getHeaderProps, getRowProps }) =>\n                (\n                    <TableContainer title=\"Parameter Job\">\n                        <Table {...getTableProps()}>\n                            <TableHead>\n                                <TableRow>\n                                    {headers.map((header) => (\n                                        <TableHeader {...getHeaderProps({ header })}>\n                                            {header.header}\n                                        </TableHeader>\n                                    ))}\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {rows.map((row) => (\n                                    <TableRow {...getRowProps({ row })}>\n                                        {row.cells.map((cell) => (\n                                            <TableCell key={cell.id}>{cell.value}</TableCell>\n                                        ))}\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                )}\n            </DataTable>\n            <Loading active={loading} overlay={true} />\n            {showNotif ?\n                <ToastNotification\n                    kind={notifData.kind}\n                    iconDescription=\"Close notification\"\n                    subtitle={<span>{notifData.subtitle}</span>}\n                    timeout={3000}\n                    onCloseButtonClick={() => setNotification(false)}\n                    title={notifData.title}\n                    caption=\"\"\n                /> : null}\n        </>\n    )\n}\n\nexport default JobStatus","import { TextInput, Button, Form, Loading, ButtonSet, ToastNotification } from 'carbon-components-react';\nimport axios from 'axios';\nimport { useState } from \"react\"\nimport \"../App.css\"\n\nconst FetchResults = ({ jobId, getChartResults }) => {\n  const [loading, setLoading] = useState(false)\n  const [invalid, setInvalid] = useState({ state: false, text: \"\" })\n  const [showButton, setButton] = useState(false)\n  const [currentJobId, setJobId] = useState(\"\")\n  const [showNotif, setNotification] = useState(false)\n  const [notifData, setNotifData] = useState({\n    kind: \"\",\n    subtitle: \"\",\n    title: \"\"\n\n  })\n\n  const getResults = async (e) => {\n    e.preventDefault();\n    if (e.target.job_text.value.trim() === \"\") {\n      setInvalid({\n        state: true,\n        text: \"Please enter a Job ID\"\n      })\n    } else {\n      setLoading(true)\n      try {\n        let res = await axios.get(`/result?jobid=${e.target.job_text.value}`)\n        //setButton(true)\n        console.log(res.data.length)\n        setJobId(e.target.job_text.value)\n        if(res.data.length!==0)\n          getChartResults(res.data)\n\n      } catch(err){\n        console.log(err)\n        setNotifData({\n          kind: \"error\",\n          subtitle: err.response.data.msg,\n          title: \"Error\"\n        })\n        setNotification(true)\n      }finally {\n        setLoading(false)\n      }\n    }\n  }\n\n  const download = async(e) => {\n    e.preventDefault();\n    window.open(`/download?jobid=${currentJobId}`,)\n  }\n  return (<Form className=\"fetch-results\" onSubmit={getResults}>\n    <h3>Fetch Processed Results </h3>\n    <br />\n    <br />\n    <TextInput\n      name=\"job_text\"\n      size=\"lg\"\n      labelText={\"Fetch Results\"}\n      helperText={\"Save this Job ID for futher use\"}\n      placeholder={\"Job ID\"}\n      invalid={invalid.state}\n      invalidText={invalid.text}\n      defaultValue={jobId}\n      onChange={() => { setInvalid({ state: false, text: \"\" }); setButton(false) }}\n    />\n    <br />\n    <ButtonSet >\n      <Button\n        kind=\"tertiary\"\n        type=\"submit\"\n      >\n        Fetch Results\n      </Button>\n      {showButton ?\n        <Button type=\"submit\" style={{ marginLeft: \"14px\" }} onClick={download}> Download Results </Button> : null}\n    </ButtonSet>\n    <Loading active={loading} overlay={true} />\n    {showNotif ?\n        <ToastNotification\n          kind={notifData.kind}\n          iconDescription=\"Close notification\"\n          subtitle={<span>{notifData.subtitle}</span>}\n          timeout={3000}\n          onCloseButtonClick={() => setNotification(false)}\n          title={notifData.title}\n          caption=\"\"\n        /> : null}\n  </Form>)\n}\n\nexport default FetchResults","import { MultiSelect, RadioButton, RadioButtonGroup, FormGroup, Dropdown, TextInput, Button, Loading, ToastNotification } from 'carbon-components-react';\nimport Chart from './components/Chart'\nimport { Header, HeaderName } from \"carbon-components-react/lib/components/UIShell\";\nimport { useState } from 'react'\nimport axios from 'axios'\nimport './App.css'\nimport FileUpload from './components/FileUpload';\nimport JobStatus from './components/JobStatus'\nimport FetchResults from './components/FetchResults';\n\n\n\nconst anaomalyEstimator = {\n  WindowAD: ['IsolationForest', 'NearestNeighbor', 'SyntheticRandomForestTrainer', 'MinCovDet', 'AnomalyEnsembler'],\n  ReconstructAD: ['Covariance', 'GMM_L0', 'GMM_L1', 'MachineTranslation'],\n  RelationshipAD: ['IDD_AutoEncoder', 'Seq2seq_AutoEncoder', 'CNNAutoEncoder', 'GAN']\n}\n\nfunction App() {\n  const [data, setData] = useState([])\n  const [lines, setLines] = useState([])\n  const [showAnomaly, setAnomaly] = useState(false)\n  const [showChart, setChart] = useState(false)\n  const [showFileUploader, setFileUploader] = useState(false)\n  const [columns, setColumns] = useState([])\n  const [showForm, setForm] = useState(false)\n  const [showTarget, setTarget] = useState(false)\n  const [showAnomalyEstimatorOptions, setAnomalyEstimatorOptions] = useState(false)\n  const [showTextField, setTextField] = useState(false)\n  const [targetParams, setTargetParams] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [timeColumnOptions, setTimeColumnOptions] = useState([])\n  const [showTimeColumn, setTimeColumn] = useState(false)\n  const [time, setTime] = useState(\"\")\n  const [anomalyEstimatorOptions, setAnomalyEstimator] = useState([])\n  const [jobId, setJobId] = useState(\"\")\n  const [targetInvalid, setTargetInvalid] = useState({ state: false, text: \"\" })\n  const [LWInvalid, setLWInvalid] = useState({ state: false, text: \"\" })\n  const [OWInvalid, setOWInvalid] = useState({ state: false, text: \"\" })\n  const [LTInvalid, setLTInvalid] = useState({ state: false, text: \"\" })\n  const [showJob, setShowJob] = useState(false)\n  const [showNotif, setNotification] = useState(false)\n  const [notifData, setNotifData] = useState({\n    kind: \"\",\n    subtitle: \"\",\n    title: \"\"\n\n  })\n\n\n  const resetStates = () => {\n    setTargetInvalid({ state: false, text: \"\" })\n    setLWInvalid({ state: false, text: \"\" })\n    setOWInvalid({ state: false, text: \"\" })\n    setLTInvalid({ state: false, text: \"\" })\n    setTimeColumnOptions([])\n    setChart(false)\n    setTimeColumn(false)\n    setLines([])\n  }\n\n  const sendDataToParent = async (res) => {\n    resetStates()\n    try {\n      setLoading(true)\n      setData(res.data)\n      setTimeColumn(true)\n      setTimeColumnOptions(Object.keys(res.data[0]))\n      setForm(false)\n    } catch(err) {\n      setNotifData({\n        kind: \"error\",\n        subtitle: err.response.data.msg,\n        title: \"Error\"\n      })\n      setNotification(true)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getSample = async (e) => {\n    resetStates()\n    try {\n      setLoading(true)\n      let res = await axios.get('/sampledata')\n      setData(res.data)\n      setChart(true)\n      setTimeColumn(false)\n      let lines = Object.keys(res.data[0]).slice(1)\n      let lineData = []\n      lines.forEach(line => {\n        lineData.push({\n          line,\n          color: `#${Math.floor(Math.random() * 16777215).toString(16)}`\n        })\n      })\n      setLines(lineData)\n      setFileUploader(false)\n      let columnNames = Object.keys(res.data[0]).slice(1)\n      console.log(columnNames, Object.keys(res.data[0]))\n      let columns = []\n      columnNames.forEach(column => {\n        columns.push({\n          name: column\n        })\n      })\n      setColumns(columns)\n      setForm(true)\n      if (columns.length === 1) {\n        setTarget(false)\n      } else {\n        setTarget(true)\n      }\n      setAnomaly(false)\n    } catch (err) {\n      setNotifData({\n        kind: \"error\",\n        subtitle: err.response.data.msg,\n        title: \"Error\"\n      })\n      setNotification(true)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const showDragDrop = () => {\n    setFileUploader(true)\n    setChart(false)\n    setForm(false)\n    //setTargetParams([])\n    //setTimeColumnOptions([])\n  }\n\n  const showTextInput = ({ selectedItem }) => {\n    if (selectedItem === \"Custom\")\n      setTextField(true)\n    else\n      setTextField(false)\n\n  }\n\n  const setTargetParameters = ({ selectedItem }) => {\n    const index = timeColumnOptions.indexOf(selectedItem)\n    let columns = []\n    let lines = []\n    timeColumnOptions.forEach((column, idx) => {\n      if (idx !== index) {\n        columns.push({\n          name: column\n        })\n        let color = `#${Math.floor(Math.random() * 16777215).toString(16)}`\n        while (color === \"#ffffff\")\n          color = `#${Math.floor(Math.random() * 16777215).toString(16)}`\n        lines.push({\n          line: column,\n          color\n        })\n      }\n    })\n    setColumns(columns)\n    setChart(true)\n    setLines(lines)\n    setForm(true)\n    if (timeColumnOptions.length === 2) {\n      setTarget(false)\n    } else {\n      setTarget(true)\n    }\n    setAnomaly(false)\n    setTime(selectedItem)\n  }\n\n  const uploadData = async (e) => {\n    e.preventDefault()\n    console.log(e)\n    let formData = {}\n    formData.dataset_type = e.target.dataset_type.value\n    if (columns.length === 1) {\n      formData.target_column = columns[0].name\n    } else {\n      formData.target_column = targetParams\n    }\n    formData.prediction_type = document.getElementById(\"prediction_type\").innerText.toLowerCase()\n    formData.algorithm_type = document.getElementById(\"algorithm_type\").innerText\n    console.log(formData.algorithm_type === \"DeepAD\")\n    if (formData.algorithm_type !== \"DeepAD\" && formData.algorithm_type !== \"PredAD\")\n      formData.anomaly_estimator = document.getElementById(\"anomaly_estimator\").innerText\n    else\n      formData.anomaly_estimator = 'Default'\n    formData.lookback_window = document.getElementById(\"lookback_window\").innerText.toLowerCase()\n    if (formData.lookback_window === 'custom')\n      formData.lookback_window = parseInt(e.target.lookback_window_custom_value.value)\n    formData.observation_window = parseInt(e.target.observation_window.value)\n    formData.labeling_method = document.getElementById(\"labeling_method\").innerText\n    formData.labeling_threshold = parseInt(e.target.labeling_threshold.value)\n    formData.time_column = time\n    //formData.recent_data = parseInt(e.target.recent_data.value)\n    console.log(formData)\n    \n    let valid = true\n    if (typeof (formData.target_column) === \"object\" && formData.target_column.length === 0) {\n      setTargetInvalid({ state: true, text: \"Please select some options\" })\n      document.getElementById(\"target_columns\").scrollIntoView({behavior: \"smooth\", block: \"center\", inline: \"nearest\"});\n      valid = false\n    }\n    if (formData.lookback_window !== 'auto' && (isNaN(formData.lookback_window) || formData.lookback_window > 50 || formData.lookback_window < 1 || !Number.isInteger(formData.lookback_window))) {\n      setLWInvalid({ state: true, text: \"Please enter an integer between 1 and 50\" })\n      document.getElementById(\"lookback_window_custom_value\").scrollIntoView({behavior: \"smooth\", block: \"center\", inline: \"nearest\"});\n      valid = false\n    }\n    if (isNaN(formData.observation_window) || formData.observation_window < 1 || !Number.isInteger(formData.observation_window)) {\n      setOWInvalid({ state: true, text: \"Please enter an integer > 0\" })\n      document.getElementById(\"observation_window\").scrollIntoView({behavior: \"smooth\", block: \"center\", inline: \"nearest\"});\n      valid = false\n    }\n    if (isNaN(formData.labeling_threshold) || formData.labeling_threshold < 1 || !Number.isInteger(formData.labeling_threshold)) {\n      setLTInvalid({ state: true, text: \"Please enter an integer > 0\" })\n      document.getElementById(\"labeling_threshold\").scrollIntoView({behavior: \"smooth\", block: \"center\", inline: \"nearest\"});\n      valid = false\n    }\n    console.log(valid)\n    if (valid) {\n      try {\n        setLoading(true)\n        let res = await axios.post('/detect', JSON.stringify(formData), {\n          \"headers\": {\n            \"content-type\": \"application/json\",\n          }\n        })\n        setJobId(res.data.jobId)\n        setShowJob(true)\n      } catch (err) {\n        setNotifData({\n          kind: \"error\",\n          subtitle: err.response.data.msg,\n          title: \"Error\"\n        })\n        setNotification(true)\n      } finally {\n        setLoading(false)\n      }\n    }\n  }\n\n  const changeAnomalyEstimatorOptions = ({ selectedItem }) => {\n    setAnomalyEstimatorOptions(false)\n    setTimeout(() => {\n      if (selectedItem !== `DeepAD` && selectedItem !== `PredAD`) {\n        setAnomalyEstimator(anaomalyEstimator[selectedItem])\n        setAnomalyEstimatorOptions(true)\n      } else {\n        setAnomalyEstimatorOptions(false)\n      }\n    }, 1)\n  }\n\n  const getChartResults = (data) => {\n    setData(data)\n    let lines = Object.keys(data[0]).slice(1)\n    let lineData = []\n    lines.forEach(line => {\n      if (line !== \"anomaly\")\n        lineData.push({\n          line,\n          color: `#${Math.floor(Math.random() * 16777215).toString(16)}`\n        })\n    })\n    setLines(lineData)\n    setAnomaly(true)\n    setChart(true)\n    setForm(false)\n  }\n  return (\n    <div className=\"app\">\n      <Header aria-label=\"IBM\">\n        <HeaderName href=\"#\" prefix=\"\">\n          <div style={{ whiteSpace: \"nowrap\" }}>\n            Anomaly Detection Sample Application\n          </div>\n        </HeaderName>\n      </Header>\n      <br /><br /><br /><br />\n      <div className=\"app-header\">\n        <h2>Anomaly Detection</h2>\n      </div>\n      <form id=\"form-data\" onSubmit={uploadData} >\n        <div className=\"app-content\">\n          <RadioButtonGroup\n            legendText=\"Choose the type of Dataset\"\n            name=\"dataset_type\"\n          >\n            <RadioButton\n              labelText=\"Upload your Dataset\"\n              value=\"customdt\"\n              id=\"customdt\"\n              onClick={showDragDrop}\n            />\n            <RadioButton\n              labelText=\"Use Sample Dataset\"\n              value=\"sampledt\"\n              id=\"sampledt\"\n              onClick={getSample}\n            />\n          </RadioButtonGroup></div>\n        {showFileUploader ?\n          <FileUpload accept=\".json, .csv\" sendDataToParent={sendDataToParent} />\n          : null}\n\n        {showTimeColumn ? <div>\n          <p className=\"others\">Time Column</p>\n          <Dropdown\n            id=\"time_column\"\n            titleText=\"Select Value\"\n            label=\"Choose an Option\"\n            items={timeColumnOptions}\n            onChange={setTargetParameters} /> </div> : null}\n        {showChart ?\n          <Chart data={data} lines={lines} showAnomaly={showAnomaly} time={time} />\n          : null}\n        {showForm ?\n          <FormGroup>\n            {showTarget ? <div>\n              <p className=\"target\">Target Parameters</p>\n              <MultiSelect\n                id=\"target_columns\"\n                titleText=\"Select Value\"\n                label=\"Select Options\"\n                items={columns}\n                itemToString={(item) => (item ? item.name : '')}\n                onChange={({ selectedItems }) => {\n                  setTargetParams(selectedItems)\n                  setTargetInvalid({ state: false, text: \"\" })\n                }}\n                invalid={targetInvalid.state}\n                invalidText={targetInvalid.text}\n              /> </div> : null}\n            {/*<p className=\"others\">Recent Data</p>\n            <TextInput name=\"recent_data\" type=\"number\" labelText=\"Add Value\" helperText=\"Add numbers (30% of data-size)\" defaultValue=\"1\" />*/}\n            <p className=\"others\">Prediction Type</p>\n            <Dropdown\n              id=\"prediction_type\"\n              titleText=\"Select Value\"\n              label=\"Choose an Option\"\n              initialSelectedItem=\"Entire\"\n              items={[\"Entire\", \"Recent\"]} />\n            <p className=\"others\">Algorithm Type</p>\n            <Dropdown\n              id=\"algorithm_type\"\n              titleText=\"Select Value\"\n              label=\"Select Options\"\n              items={['DeepAD', 'WindowAD', 'PredAD', 'ReconstructAD', 'RelationshipAD']}\n              initialSelectedItem=\"DeepAD\"\n              onChange={changeAnomalyEstimatorOptions} />\n            {showAnomalyEstimatorOptions ?\n              <div className=\"hidden-options\">\n                <Dropdown\n                  id=\"anomaly_estimator\"\n                  titleText=\"Select Value\"\n                  label=\"Select Options\"\n                  initialSelectedItem={anomalyEstimatorOptions[0]}\n                  items={anomalyEstimatorOptions}\n                /></div>\n              : null}\n            <p className=\"others\">Loopback Window</p>\n            <Dropdown\n              id=\"lookback_window\"\n              titleText=\"Select Value\"\n              items={['Auto', 'Custom']}\n              initialSelectedItem=\"Auto\"\n              onChange={showTextInput}\n            />\n            {showTextField ?\n              <div className=\"hidden-options\">\n                <TextInput\n                  name=\"lookback_window_custom_value\"\n                  id=\"lookback_window_custom_value\"\n                  type=\"number\" labelText=\"Add Value\"\n                  helperText=\"Add numbers (Max.50)\"\n                  defaultValue=\"10\"\n                  invalid={LWInvalid.state}\n                  invalidText={LWInvalid.text}\n                  onChange={() => setLWInvalid({ state: false, text: \"\" })} />\n              </div> : null}\n            <p className=\"others\">Observation Window</p>\n            <TextInput\n              name=\"observation_window\"\n              id=\"observation_window\"\n              type=\"number\"\n              labelText=\"Add Value\"\n              helperText=\"Add numbers (10% of data-size)\"\n              defaultValue=\"10\"\n              invalid={OWInvalid.state}\n              invalidText={OWInvalid.text}\n              onChange={() => setOWInvalid({ state: false, text: \"\" })} />\n            <p className=\"others\">Labeling Method</p>\n            <Dropdown\n              id=\"labeling_method\"\n              titleText=\"Select Value\"\n              label=\"Select Options\"\n              items={['Chi-Square', 'IID', 'Q-Score', 'Sliding-Window', 'Adaptive-Sliding-Window', 'Contextual-Anomaly']}\n              initialSelectedItem=\"IID\"\n            />\n            <p className=\"others\">Labelling Threshold</p>\n            <TextInput\n              name=\"labeling_threshold\"\n              id=\"labeling_threshold\"\n              type=\"number\" labelText=\"Add Value\"\n              helperText=\"Add numbers\"\n              defaultValue=\"10\"\n              invalid={LTInvalid.state}\n              invalidText={LTInvalid.text}\n              onChange={() => setLTInvalid({ state: false, text: \"\" })} />\n            <div className=\"hidden-options\">\n              <Button type=\"submit\">Submit</Button>\n            </div>\n          </FormGroup> : null}\n      </form>\n      <br />\n      {showJob ? <JobStatus jobId={jobId} msg={\"submitted\"} /> : null}\n      <FetchResults jobId={jobId} getChartResults={getChartResults} />\n      {showNotif ?\n        <ToastNotification\n          kind={notifData.kind}\n          iconDescription=\"Close notification\"\n          subtitle={<span>{notifData.subtitle}</span>}\n          timeout={3000}\n          onCloseButtonClick={() => setNotification(false)}\n          title={notifData.title}\n          caption=\"\"\n        /> : null}\n      <Loading active={loading} overlay={true} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"./style.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}