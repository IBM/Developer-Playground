{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @param {Function} propType The original prop type checker.\n * @returns {Function} The new prop type checker for `onChange` that makes it required if `value` exists and `readOnly` does not exist.\n */\nexport default function requiredIfValueExists(propType) {\n  return function check(props, propName, componentName) {\n    var onChange = props[propName],\n        value = props.value,\n        readOnly = props.readOnly;\n    var exists = onChange !== undefined;\n    var valueExists = value !== undefined;\n\n    if (process.env.NODE_ENV !== \"production\" && !exists && valueExists && !readOnly) {\n      return new Error(\"You provided a value prop to `\".concat(componentName, \"` without an `onChange` handler. \") + 'This will render a read-only field. ' + 'If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.');\n    }\n\n    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n\n    return propType.apply(void 0, [props, propName, componentName].concat(rest));\n  };\n}","map":{"version":3,"sources":["/Users/nupurnegi/Desktop/UI_ongoingChanges/Developer-Playground/client/node_modules/carbon-components-react/es/prop-types/requiredIfValueExists.js"],"names":["requiredIfValueExists","propType","check","props","propName","componentName","onChange","value","readOnly","exists","undefined","valueExists","process","env","NODE_ENV","Error","concat","_len","arguments","length","rest","Array","_key","apply"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAASA,qBAAT,CAA+BC,QAA/B,EAAyC;AACtD,SAAO,SAASC,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgCC,aAAhC,EAA+C;AACpD,QAAIC,QAAQ,GAAGH,KAAK,CAACC,QAAD,CAApB;AAAA,QACIG,KAAK,GAAGJ,KAAK,CAACI,KADlB;AAAA,QAEIC,QAAQ,GAAGL,KAAK,CAACK,QAFrB;AAGA,QAAIC,MAAM,GAAGH,QAAQ,KAAKI,SAA1B;AACA,QAAIC,WAAW,GAAGJ,KAAK,KAAKG,SAA5B;;AAEA,QAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACL,MAA1C,IAAoDE,WAApD,IAAmE,CAACH,QAAxE,EAAkF;AAChF,aAAO,IAAIO,KAAJ,CAAU,iCAAiCC,MAAjC,CAAwCX,aAAxC,EAAuD,mCAAvD,IAA8F,sCAA9F,GAAuI,oGAAjJ,CAAP;AACD;;AAED,SAAK,IAAIY,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEK,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGL,IAA9F,EAAoGK,IAAI,EAAxG,EAA4G;AAC1GF,MAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBJ,SAAS,CAACI,IAAD,CAA1B;AACD;;AAED,WAAOrB,QAAQ,CAACsB,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACpB,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAiCW,MAAjC,CAAwCI,IAAxC,CAAvB,CAAP;AACD,GAhBD;AAiBD","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @param {Function} propType The original prop type checker.\n * @returns {Function} The new prop type checker for `onChange` that makes it required if `value` exists and `readOnly` does not exist.\n */\nexport default function requiredIfValueExists(propType) {\n  return function check(props, propName, componentName) {\n    var onChange = props[propName],\n        value = props.value,\n        readOnly = props.readOnly;\n    var exists = onChange !== undefined;\n    var valueExists = value !== undefined;\n\n    if (process.env.NODE_ENV !== \"production\" && !exists && valueExists && !readOnly) {\n      return new Error(\"You provided a value prop to `\".concat(componentName, \"` without an `onChange` handler. \") + 'This will render a read-only field. ' + 'If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.');\n    }\n\n    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n\n    return propType.apply(void 0, [props, propName, componentName].concat(rest));\n  };\n}"]},"metadata":{},"sourceType":"module"}