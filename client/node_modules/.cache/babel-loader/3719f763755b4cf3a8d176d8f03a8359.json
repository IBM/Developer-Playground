{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\n\nvar toArray = function toArray(arrayLike) {\n  return Array.prototype.slice.call(arrayLike);\n};\n\nvar ProgressIndicator = /*#__PURE__*/function (_mixin) {\n  _inherits(ProgressIndicator, _mixin);\n\n  var _super = _createSuper(ProgressIndicator);\n  /**\n   * ProgressIndicator.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @param {HTMLElement} element The element representing the ProgressIndicator.\n   * @param {object} [options] The component options.\n   * @property {string} [options.selectorStepElement] The CSS selector to find step elements.\n   * @property {string} [options.selectorCurrent] The CSS selector to find the current step element.\n   * @property {string} [options.selectorIncomplete] The CSS class to find incomplete step elements.\n   * @property {string} [options.selectorComplete] The CSS selector to find completed step elements.\n   * @property {string} [options.classStep] The className for a step element.\n   * @property {string} [options.classComplete] The className for a completed step element.\n   * @property {string} [options.classCurrent] The className for the current step element.\n   * @property {string} [options.classIncomplete] The className for a incomplete step element.\n   */\n\n  /**\n   * ProgressIndicator.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @param {HTMLElement} element The element representing the ProgressIndicator.\n   * @param {object} [options] The component options.\n   * @property {string} [options.selectorStepElement] The CSS selector to find step elements.\n   * @property {string} [options.selectorCurrent] The CSS selector to find the current step element.\n   * @property {string} [options.selectorIncomplete] The CSS class to find incomplete step elements.\n   * @property {string} [options.selectorComplete] The CSS selector to find completed step elements.\n   * @property {string} [options.classStep] The className for a step element.\n   * @property {string} [options.classComplete] The className for a completed step element.\n   * @property {string} [options.classCurrent] The className for the current step element.\n   * @property {string} [options.classIncomplete] The className for a incomplete step element.\n   */\n\n\n  function ProgressIndicator(element, options) {\n    var _this;\n\n    _classCallCheck(this, ProgressIndicator);\n\n    _this = _super.call(this, element, options);\n    /**\n     * The component state.\n     * @type {object}\n     */\n\n    /**\n     * The component state.\n     * @type {object}\n     */\n\n    _this.state = {\n      /**\n       * The current step index.\n       * @type {number}\n       */\n      currentIndex: _this.getCurrent().index,\n\n      /**\n       * Total number of steps.\n       * @type {number}\n       */\n      totalSteps: _this.getSteps().length\n    };\n\n    _this.addOverflowTooltip();\n\n    return _this;\n  }\n  /**\n   * Returns all steps with details about element and index.\n   */\n\n  /**\n   * Returns all steps with details about element and index.\n   */\n\n\n  _createClass(ProgressIndicator, [{\n    key: \"getSteps\",\n    value: function getSteps() {\n      return toArray(this.element.querySelectorAll(this.options.selectorStepElement)).map(function (element, index) {\n        return {\n          element: element,\n          index: index\n        };\n      });\n    }\n    /**\n     * Returns current step; gives detail about element and index.\n     */\n\n  }, {\n    key: \"getCurrent\",\n    value: function getCurrent() {\n      var currentEl = this.element.querySelector(this.options.selectorCurrent);\n      return this.getSteps().filter(function (step) {\n        return step.element === currentEl;\n      })[0];\n    }\n    /**\n     * Sets the current step.\n     * * @param {Number} new step index or use default in `this.state.currentIndex`.\n     */\n\n  }, {\n    key: \"setCurrent\",\n    value: function setCurrent() {\n      var _this2 = this;\n\n      var newCurrentStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.currentIndex;\n      var changed = false;\n\n      if (newCurrentStep !== this.state.currentIndex) {\n        this.state.currentIndex = newCurrentStep;\n        changed = true;\n      }\n\n      if (changed) {\n        this.getSteps().forEach(function (step) {\n          if (step.index < newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classComplete,\n              html: _this2._getSVGComplete()\n            });\n          }\n\n          if (step.index === newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classCurrent,\n              html: _this2._getCurrentSVG()\n            });\n          }\n\n          if (step.index > newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classIncomplete,\n              html: _this2._getIncompleteSVG()\n            });\n          }\n        });\n      }\n    }\n    /**\n     * Update step with correct inline SVG and className\n     * @param {object} args\n     * @param {object} [args.element] target element\n     * @param {object} [args.className] new className\n     * @param {object} [args.html] new inline SVG to insert\n     */\n\n  }, {\n    key: \"_updateStep\",\n    value: function _updateStep(args) {\n      var element = args.element,\n          className = args.className,\n          html = args.html;\n\n      if (element.firstElementChild) {\n        element.removeChild(element.firstElementChild);\n      }\n\n      if (!element.classList.contains(className)) {\n        element.setAttribute('class', this.options.classStep);\n        element.classList.add(className);\n      }\n\n      element.insertAdjacentHTML('afterbegin', html);\n    }\n    /**\n     * Returns HTML string for an SVG used to represent a completed step (checkmark)\n     */\n\n  }, {\n    key: \"_getSVGComplete\",\n    value: function _getSVGComplete() {\n      return \"<svg width=\\\"24px\\\" height=\\\"24px\\\" viewBox=\\\"0 0 24 24\\\">\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n        <polygon points=\\\"10.3 13.6 7.7 11 6.3 12.4 10.3 16.4 17.8 9 16.4 7.6\\\"></polygon>\\n      </svg>\";\n    }\n    /**\n     * Returns HTML string for an SVG used to represent current step (circles, like a radio button, but not.)\n     */\n\n  }, {\n    key: \"_getCurrentSVG\",\n    value: function _getCurrentSVG() {\n      return \"<svg>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"6\\\"></circle>\\n      </svg>\";\n    }\n    /**\n     * Returns HTML string for an SVG used to represent incomplete step (grey empty circle)\n     */\n\n  }, {\n    key: \"_getIncompleteSVG\",\n    value: function _getIncompleteSVG() {\n      return \"<svg>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n      </svg>\";\n    }\n  }, {\n    key: \"addOverflowTooltip\",\n    value: function addOverflowTooltip() {\n      var _this3 = this;\n\n      var stepLabels = toArray(this.element.querySelectorAll(this.options.selectorLabel));\n      var tooltips = toArray(this.element.querySelectorAll(this.options.selectorTooltip));\n      stepLabels.forEach(function (step) {\n        if (step.scrollWidth > _this3.options.maxWidth) {\n          step.classList.add(_this3.options.classOverflowLabel);\n        }\n      });\n      tooltips.forEach(function (tooltip) {\n        var childText = tooltip.querySelector(_this3.options.selectorTooltipText);\n\n        if (childText.scrollHeight > _this3.options.tooltipMaxHeight) {\n          tooltip.classList.add(_this3.options.classTooltipMulti);\n        }\n      });\n    }\n  }], [{\n    key: \"options\",\n    get:\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * {@linkcode ProgressIndicator.create .create()}, or {@linkcode ProgressIndicator.init .init()},\n     * properties in this object are overridden for the instance being created.\n     * @member ProgressIndicator.options\n     * @type {object}\n     * @property {string} selectorInit The CSS selector to find content switcher button set.\n     * @property {string} [selectorStepElement] The CSS selector to find step elements.\n     * @property {string} [selectorCurrent] The CSS selector to find the current step element.\n     * @property {string} [selectorIncomplete] The CSS class to find incomplete step elements.\n     * @property {string} [selectorComplete] The CSS selector to find completed step elements.\n     * @property {string} [classStep] The className for a step element.\n     * @property {string} [classComplete] The className for a completed step element.\n     * @property {string} [classCurrent] The className for the current step element.\n     * @property {string} [classIncomplete] The className for a incomplete step element.\n     */\n    function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-progress]',\n        selectorStepElement: \".\".concat(prefix, \"--progress-step\"),\n        selectorCurrent: \".\".concat(prefix, \"--progress-step--current\"),\n        selectorIncomplete: \".\".concat(prefix, \"--progress-step--incomplete\"),\n        selectorComplete: \".\".concat(prefix, \"--progress-step--complete\"),\n        selectorLabel: \".\".concat(prefix, \"--progress-label\"),\n        selectorTooltip: \".\".concat(prefix, \"--tooltip\"),\n        selectorTooltipText: \".\".concat(prefix, \"--tooltip__text\"),\n        classStep: \"\".concat(prefix, \"--progress-step\"),\n        classComplete: \"\".concat(prefix, \"--progress-step--complete\"),\n        classCurrent: \"\".concat(prefix, \"--progress-step--current\"),\n        classIncomplete: \"\".concat(prefix, \"--progress-step--incomplete\"),\n        classOverflowLabel: \"\".concat(prefix, \"--progress-label-overflow\"),\n        classTooltipMulti: \"\".concat(prefix, \"--tooltip_multi\"),\n        maxWidth: 87,\n        tooltipMaxHeight: 21\n      };\n    }\n  }]);\n\n  ProgressIndicator.components = new WeakMap();\n  return ProgressIndicator;\n}(mixin(createComponent, initComponentBySearch));\n\nexport default ProgressIndicator;","map":{"version":3,"sources":["/Users/nupurnegi/Desktop/UI_ongoingChanges/Developer-Playground/client/node_modules/carbon-components/es/components/progress-indicator/progress-indicator.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_inherits","subClass","superClass","create","value","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","settings","mixin","createComponent","initComponentBySearch","toArray","arrayLike","Array","slice","ProgressIndicator","_mixin","_super","element","options","_this","state","currentIndex","getCurrent","index","totalSteps","getSteps","addOverflowTooltip","querySelectorAll","selectorStepElement","map","currentEl","querySelector","selectorCurrent","filter","step","setCurrent","_this2","newCurrentStep","undefined","changed","forEach","_updateStep","className","classComplete","html","_getSVGComplete","classCurrent","_getCurrentSVG","classIncomplete","_getIncompleteSVG","args","firstElementChild","removeChild","classList","contains","setAttribute","classStep","add","insertAdjacentHTML","_this3","stepLabels","selectorLabel","tooltips","selectorTooltip","scrollWidth","maxWidth","classOverflowLabel","tooltip","childText","selectorTooltipText","scrollHeight","tooltipMaxHeight","classTooltipMulti","get","prefix","selectorInit","concat","selectorIncomplete","selectorComplete","components","WeakMap"],"mappings":"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","sourcesContent":["function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\n\nvar toArray = function toArray(arrayLike) {\n  return Array.prototype.slice.call(arrayLike);\n};\n\nvar ProgressIndicator = /*#__PURE__*/function (_mixin) {\n  _inherits(ProgressIndicator, _mixin);\n\n  var _super = _createSuper(ProgressIndicator);\n  /**\n   * ProgressIndicator.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @param {HTMLElement} element The element representing the ProgressIndicator.\n   * @param {object} [options] The component options.\n   * @property {string} [options.selectorStepElement] The CSS selector to find step elements.\n   * @property {string} [options.selectorCurrent] The CSS selector to find the current step element.\n   * @property {string} [options.selectorIncomplete] The CSS class to find incomplete step elements.\n   * @property {string} [options.selectorComplete] The CSS selector to find completed step elements.\n   * @property {string} [options.classStep] The className for a step element.\n   * @property {string} [options.classComplete] The className for a completed step element.\n   * @property {string} [options.classCurrent] The className for the current step element.\n   * @property {string} [options.classIncomplete] The className for a incomplete step element.\n   */\n\n\n  /**\n   * ProgressIndicator.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @param {HTMLElement} element The element representing the ProgressIndicator.\n   * @param {object} [options] The component options.\n   * @property {string} [options.selectorStepElement] The CSS selector to find step elements.\n   * @property {string} [options.selectorCurrent] The CSS selector to find the current step element.\n   * @property {string} [options.selectorIncomplete] The CSS class to find incomplete step elements.\n   * @property {string} [options.selectorComplete] The CSS selector to find completed step elements.\n   * @property {string} [options.classStep] The className for a step element.\n   * @property {string} [options.classComplete] The className for a completed step element.\n   * @property {string} [options.classCurrent] The className for the current step element.\n   * @property {string} [options.classIncomplete] The className for a incomplete step element.\n   */\n  function ProgressIndicator(element, options) {\n    var _this;\n\n    _classCallCheck(this, ProgressIndicator);\n\n    _this = _super.call(this, element, options);\n    /**\n     * The component state.\n     * @type {object}\n     */\n\n    /**\n     * The component state.\n     * @type {object}\n     */\n    _this.state = {\n      /**\n       * The current step index.\n       * @type {number}\n       */\n      currentIndex: _this.getCurrent().index,\n\n      /**\n       * Total number of steps.\n       * @type {number}\n       */\n      totalSteps: _this.getSteps().length\n    };\n\n    _this.addOverflowTooltip();\n\n    return _this;\n  }\n  /**\n   * Returns all steps with details about element and index.\n   */\n\n\n  /**\n   * Returns all steps with details about element and index.\n   */\n  _createClass(ProgressIndicator, [{\n    key: \"getSteps\",\n    value: function getSteps() {\n      return toArray(this.element.querySelectorAll(this.options.selectorStepElement)).map(function (element, index) {\n        return {\n          element: element,\n          index: index\n        };\n      });\n    }\n    /**\n     * Returns current step; gives detail about element and index.\n     */\n\n  }, {\n    key: \"getCurrent\",\n    value: function getCurrent() {\n      var currentEl = this.element.querySelector(this.options.selectorCurrent);\n      return this.getSteps().filter(function (step) {\n        return step.element === currentEl;\n      })[0];\n    }\n    /**\n     * Sets the current step.\n     * * @param {Number} new step index or use default in `this.state.currentIndex`.\n     */\n\n  }, {\n    key: \"setCurrent\",\n    value: function setCurrent() {\n      var _this2 = this;\n\n      var newCurrentStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.currentIndex;\n      var changed = false;\n\n      if (newCurrentStep !== this.state.currentIndex) {\n        this.state.currentIndex = newCurrentStep;\n        changed = true;\n      }\n\n      if (changed) {\n        this.getSteps().forEach(function (step) {\n          if (step.index < newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classComplete,\n              html: _this2._getSVGComplete()\n            });\n          }\n\n          if (step.index === newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classCurrent,\n              html: _this2._getCurrentSVG()\n            });\n          }\n\n          if (step.index > newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classIncomplete,\n              html: _this2._getIncompleteSVG()\n            });\n          }\n        });\n      }\n    }\n    /**\n     * Update step with correct inline SVG and className\n     * @param {object} args\n     * @param {object} [args.element] target element\n     * @param {object} [args.className] new className\n     * @param {object} [args.html] new inline SVG to insert\n     */\n\n  }, {\n    key: \"_updateStep\",\n    value: function _updateStep(args) {\n      var element = args.element,\n          className = args.className,\n          html = args.html;\n\n      if (element.firstElementChild) {\n        element.removeChild(element.firstElementChild);\n      }\n\n      if (!element.classList.contains(className)) {\n        element.setAttribute('class', this.options.classStep);\n        element.classList.add(className);\n      }\n\n      element.insertAdjacentHTML('afterbegin', html);\n    }\n    /**\n     * Returns HTML string for an SVG used to represent a completed step (checkmark)\n     */\n\n  }, {\n    key: \"_getSVGComplete\",\n    value: function _getSVGComplete() {\n      return \"<svg width=\\\"24px\\\" height=\\\"24px\\\" viewBox=\\\"0 0 24 24\\\">\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n        <polygon points=\\\"10.3 13.6 7.7 11 6.3 12.4 10.3 16.4 17.8 9 16.4 7.6\\\"></polygon>\\n      </svg>\";\n    }\n    /**\n     * Returns HTML string for an SVG used to represent current step (circles, like a radio button, but not.)\n     */\n\n  }, {\n    key: \"_getCurrentSVG\",\n    value: function _getCurrentSVG() {\n      return \"<svg>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"6\\\"></circle>\\n      </svg>\";\n    }\n    /**\n     * Returns HTML string for an SVG used to represent incomplete step (grey empty circle)\n     */\n\n  }, {\n    key: \"_getIncompleteSVG\",\n    value: function _getIncompleteSVG() {\n      return \"<svg>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n      </svg>\";\n    }\n  }, {\n    key: \"addOverflowTooltip\",\n    value: function addOverflowTooltip() {\n      var _this3 = this;\n\n      var stepLabels = toArray(this.element.querySelectorAll(this.options.selectorLabel));\n      var tooltips = toArray(this.element.querySelectorAll(this.options.selectorTooltip));\n      stepLabels.forEach(function (step) {\n        if (step.scrollWidth > _this3.options.maxWidth) {\n          step.classList.add(_this3.options.classOverflowLabel);\n        }\n      });\n      tooltips.forEach(function (tooltip) {\n        var childText = tooltip.querySelector(_this3.options.selectorTooltipText);\n\n        if (childText.scrollHeight > _this3.options.tooltipMaxHeight) {\n          tooltip.classList.add(_this3.options.classTooltipMulti);\n        }\n      });\n    }\n  }], [{\n    key: \"options\",\n    get:\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * {@linkcode ProgressIndicator.create .create()}, or {@linkcode ProgressIndicator.init .init()},\n     * properties in this object are overridden for the instance being created.\n     * @member ProgressIndicator.options\n     * @type {object}\n     * @property {string} selectorInit The CSS selector to find content switcher button set.\n     * @property {string} [selectorStepElement] The CSS selector to find step elements.\n     * @property {string} [selectorCurrent] The CSS selector to find the current step element.\n     * @property {string} [selectorIncomplete] The CSS class to find incomplete step elements.\n     * @property {string} [selectorComplete] The CSS selector to find completed step elements.\n     * @property {string} [classStep] The className for a step element.\n     * @property {string} [classComplete] The className for a completed step element.\n     * @property {string} [classCurrent] The className for the current step element.\n     * @property {string} [classIncomplete] The className for a incomplete step element.\n     */\n    function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-progress]',\n        selectorStepElement: \".\".concat(prefix, \"--progress-step\"),\n        selectorCurrent: \".\".concat(prefix, \"--progress-step--current\"),\n        selectorIncomplete: \".\".concat(prefix, \"--progress-step--incomplete\"),\n        selectorComplete: \".\".concat(prefix, \"--progress-step--complete\"),\n        selectorLabel: \".\".concat(prefix, \"--progress-label\"),\n        selectorTooltip: \".\".concat(prefix, \"--tooltip\"),\n        selectorTooltipText: \".\".concat(prefix, \"--tooltip__text\"),\n        classStep: \"\".concat(prefix, \"--progress-step\"),\n        classComplete: \"\".concat(prefix, \"--progress-step--complete\"),\n        classCurrent: \"\".concat(prefix, \"--progress-step--current\"),\n        classIncomplete: \"\".concat(prefix, \"--progress-step--incomplete\"),\n        classOverflowLabel: \"\".concat(prefix, \"--progress-label-overflow\"),\n        classTooltipMulti: \"\".concat(prefix, \"--tooltip_multi\"),\n        maxWidth: 87,\n        tooltipMaxHeight: 21\n      };\n    }\n  }]);\n\n  ProgressIndicator.components = new WeakMap();\n  return ProgressIndicator;\n}(mixin(createComponent, initComponentBySearch));\n\nexport default ProgressIndicator;"]},"metadata":{},"sourceType":"module"}