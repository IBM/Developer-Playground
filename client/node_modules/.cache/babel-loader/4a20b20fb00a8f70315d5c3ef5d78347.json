{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar ResizeObserver = _interopDefault(require('resize-observer-polyfill'));\n\nvar react = require('react');\n\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  } // `defaultRef` Has to be non-conditionally declared here whether or not it'll\n  // be used as that's how hooks work.\n  // @see https://reactjs.org/docs/hooks-rules.html#explanation\n\n\n  var defaultRef = react.useRef(null); // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver\n\n  var onResize = opts.onResize;\n  var onResizeRef = react.useRef(undefined);\n  onResizeRef.current = onResize; // Using a single instance throughought the hook's lifetime\n\n  var resizeObserverRef = react.useRef();\n  var ref = opts.ref || defaultRef;\n\n  var _useState = react.useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // Using a ref to track the previous width / height to avoid unnecessary renders\n\n\n  var previous = react.useRef({\n    width: undefined,\n    height: undefined\n  });\n  react.useEffect(function () {\n    if (resizeObserverRef.current) {\n      return;\n    }\n\n    resizeObserverRef.current = new ResizeObserver(function (entries) {\n      if (!Array.isArray(entries)) {\n        return;\n      } // Since we only observe the one element, we don't need to loop over the\n      // array\n\n\n      if (!entries.length) {\n        return;\n      }\n\n      var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n      var newWidth = Math.round(entry.contentRect.width);\n      var newHeight = Math.round(entry.contentRect.height);\n\n      if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n\n        if (onResizeRef.current) {\n          onResizeRef.current(newSize);\n        } else {\n          previous.current.width = newWidth;\n          previous.current.height = newHeight;\n          setSize(newSize);\n        }\n      }\n    });\n  }, []);\n  react.useEffect(function () {\n    if (typeof ref !== \"object\" || ref === null || !(ref.current instanceof Element)) {\n      return;\n    }\n\n    var element = ref.current;\n    resizeObserverRef.current.observe(element);\n    return function () {\n      return resizeObserverRef.current.unobserve(element);\n    };\n  }, [ref]);\n  return react.useMemo(function () {\n    return {\n      ref: ref,\n      width: size.width,\n      height: size.height\n    };\n  }, [ref, size ? size.width : null, size ? size.height : null]);\n}\n\nmodule.exports = useResizeObserver;","map":{"version":3,"sources":["/Users/nupurnegi/Desktop/UI_ongoingChanges/Developer-Playground/client/node_modules/use-resize-observer/polyfilled.js"],"names":["_interopDefault","ex","ResizeObserver","require","react","useResizeObserver","opts","defaultRef","useRef","onResize","onResizeRef","undefined","current","resizeObserverRef","ref","_useState","useState","width","height","size","setSize","previous","useEffect","entries","Array","isArray","length","entry","newWidth","Math","round","contentRect","newHeight","newSize","Element","element","observe","unobserve","useMemo","module","exports"],"mappings":"AAAA;;AAEA,SAASA,eAAT,CAA0BC,EAA1B,EAA8B;AAAE,SAAQA,EAAE,IAAK,OAAOA,EAAP,KAAc,QAArB,IAAkC,aAAaA,EAAhD,GAAsDA,EAAE,CAAC,SAAD,CAAxD,GAAsEA,EAA7E;AAAkF;;AAElH,IAAIC,cAAc,GAAGF,eAAe,CAACG,OAAO,CAAC,0BAAD,CAAR,CAApC;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AAEA,SAASE,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,IAAAA,IAAI,GAAG,EAAP;AACD,GAH8B,CAK/B;AACA;AACA;;;AACA,MAAIC,UAAU,GAAGH,KAAK,CAACI,MAAN,CAAa,IAAb,CAAjB,CAR+B,CAQM;AACrC;AACA;;AAEA,MAAIC,QAAQ,GAAGH,IAAI,CAACG,QAApB;AACA,MAAIC,WAAW,GAAGN,KAAK,CAACI,MAAN,CAAaG,SAAb,CAAlB;AACAD,EAAAA,WAAW,CAACE,OAAZ,GAAsBH,QAAtB,CAd+B,CAcC;;AAEhC,MAAII,iBAAiB,GAAGT,KAAK,CAACI,MAAN,EAAxB;AACA,MAAIM,GAAG,GAAGR,IAAI,CAACQ,GAAL,IAAYP,UAAtB;;AAEA,MAAIQ,SAAS,GAAGX,KAAK,CAACY,QAAN,CAAe;AAC7BC,IAAAA,KAAK,EAAEN,SADsB;AAE7BO,IAAAA,MAAM,EAAEP;AAFqB,GAAf,CAAhB;AAAA,MAIIQ,IAAI,GAAGJ,SAAS,CAAC,CAAD,CAJpB;AAAA,MAKIK,OAAO,GAAGL,SAAS,CAAC,CAAD,CALvB,CAnB+B,CAwBH;;;AAG5B,MAAIM,QAAQ,GAAGjB,KAAK,CAACI,MAAN,CAAa;AAC1BS,IAAAA,KAAK,EAAEN,SADmB;AAE1BO,IAAAA,MAAM,EAAEP;AAFkB,GAAb,CAAf;AAIAP,EAAAA,KAAK,CAACkB,SAAN,CAAgB,YAAY;AAC1B,QAAIT,iBAAiB,CAACD,OAAtB,EAA+B;AAC7B;AACD;;AAEDC,IAAAA,iBAAiB,CAACD,OAAlB,GAA4B,IAAIV,cAAJ,CAAmB,UAAUqB,OAAV,EAAmB;AAChE,UAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EAA6B;AAC3B;AACD,OAH+D,CAG9D;AACF;;;AAGA,UAAI,CAACA,OAAO,CAACG,MAAb,EAAqB;AACnB;AACD;;AAED,UAAIC,KAAK,GAAGJ,OAAO,CAAC,CAAD,CAAnB,CAXgE,CAWxC;;AAExB,UAAIK,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,WAAN,CAAkBd,KAA7B,CAAf;AACA,UAAIe,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,WAAN,CAAkBb,MAA7B,CAAhB;;AAEA,UAAIG,QAAQ,CAACT,OAAT,CAAiBK,KAAjB,KAA2BW,QAA3B,IAAuCP,QAAQ,CAACT,OAAT,CAAiBM,MAAjB,KAA4Bc,SAAvE,EAAkF;AAChF,YAAIC,OAAO,GAAG;AACZhB,UAAAA,KAAK,EAAEW,QADK;AAEZV,UAAAA,MAAM,EAAEc;AAFI,SAAd;;AAKA,YAAItB,WAAW,CAACE,OAAhB,EAAyB;AACvBF,UAAAA,WAAW,CAACE,OAAZ,CAAoBqB,OAApB;AACD,SAFD,MAEO;AACLZ,UAAAA,QAAQ,CAACT,OAAT,CAAiBK,KAAjB,GAAyBW,QAAzB;AACAP,UAAAA,QAAQ,CAACT,OAAT,CAAiBM,MAAjB,GAA0Bc,SAA1B;AACAZ,UAAAA,OAAO,CAACa,OAAD,CAAP;AACD;AACF;AACF,KA9B2B,CAA5B;AA+BD,GApCD,EAoCG,EApCH;AAqCA7B,EAAAA,KAAK,CAACkB,SAAN,CAAgB,YAAY;AAC1B,QAAI,OAAOR,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAnC,IAA2C,EAAEA,GAAG,CAACF,OAAJ,YAAuBsB,OAAzB,CAA/C,EAAkF;AAChF;AACD;;AAED,QAAIC,OAAO,GAAGrB,GAAG,CAACF,OAAlB;AACAC,IAAAA,iBAAiB,CAACD,OAAlB,CAA0BwB,OAA1B,CAAkCD,OAAlC;AACA,WAAO,YAAY;AACjB,aAAOtB,iBAAiB,CAACD,OAAlB,CAA0ByB,SAA1B,CAAoCF,OAApC,CAAP;AACD,KAFD;AAGD,GAVD,EAUG,CAACrB,GAAD,CAVH;AAWA,SAAOV,KAAK,CAACkC,OAAN,CAAc,YAAY;AAC/B,WAAO;AACLxB,MAAAA,GAAG,EAAEA,GADA;AAELG,MAAAA,KAAK,EAAEE,IAAI,CAACF,KAFP;AAGLC,MAAAA,MAAM,EAAEC,IAAI,CAACD;AAHR,KAAP;AAKD,GANM,EAMJ,CAACJ,GAAD,EAAMK,IAAI,GAAGA,IAAI,CAACF,KAAR,GAAgB,IAA1B,EAAgCE,IAAI,GAAGA,IAAI,CAACD,MAAR,GAAiB,IAArD,CANI,CAAP;AAOD;;AAEDqB,MAAM,CAACC,OAAP,GAAiBnC,iBAAjB","sourcesContent":["'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar ResizeObserver = _interopDefault(require('resize-observer-polyfill'));\nvar react = require('react');\n\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // `defaultRef` Has to be non-conditionally declared here whether or not it'll\n  // be used as that's how hooks work.\n  // @see https://reactjs.org/docs/hooks-rules.html#explanation\n  var defaultRef = react.useRef(null); // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver\n\n  var onResize = opts.onResize;\n  var onResizeRef = react.useRef(undefined);\n  onResizeRef.current = onResize; // Using a single instance throughought the hook's lifetime\n\n  var resizeObserverRef = react.useRef();\n  var ref = opts.ref || defaultRef;\n\n  var _useState = react.useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // Using a ref to track the previous width / height to avoid unnecessary renders\n\n\n  var previous = react.useRef({\n    width: undefined,\n    height: undefined\n  });\n  react.useEffect(function () {\n    if (resizeObserverRef.current) {\n      return;\n    }\n\n    resizeObserverRef.current = new ResizeObserver(function (entries) {\n      if (!Array.isArray(entries)) {\n        return;\n      } // Since we only observe the one element, we don't need to loop over the\n      // array\n\n\n      if (!entries.length) {\n        return;\n      }\n\n      var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n      var newWidth = Math.round(entry.contentRect.width);\n      var newHeight = Math.round(entry.contentRect.height);\n\n      if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n\n        if (onResizeRef.current) {\n          onResizeRef.current(newSize);\n        } else {\n          previous.current.width = newWidth;\n          previous.current.height = newHeight;\n          setSize(newSize);\n        }\n      }\n    });\n  }, []);\n  react.useEffect(function () {\n    if (typeof ref !== \"object\" || ref === null || !(ref.current instanceof Element)) {\n      return;\n    }\n\n    var element = ref.current;\n    resizeObserverRef.current.observe(element);\n    return function () {\n      return resizeObserverRef.current.unobserve(element);\n    };\n  }, [ref]);\n  return react.useMemo(function () {\n    return {\n      ref: ref,\n      width: size.width,\n      height: size.height\n    };\n  }, [ref, size ? size.width : null, size ? size.height : null]);\n}\n\nmodule.exports = useResizeObserver;\n"]},"metadata":{},"sourceType":"script"}