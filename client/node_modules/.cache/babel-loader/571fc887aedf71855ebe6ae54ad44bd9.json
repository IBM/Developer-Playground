{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { sortStates } from './sortStates';\nexport { sortStates };\nimport { sortRows } from '../tools/sorting'; // Our initialSortState should be `NONE`, unless a consumer has specified a\n// different initialSortState\n\nexport var initialSortState = sortStates.NONE;\n/**\n * Utility used to get the next sort state given the following pieces of\n * information:\n *\n * @param {string} prevHeader the value of the previous header\n * @param {string} header the value of the currently selected header\n * @param {string} prevState the previous sort state of the table\n * @returns {string}\n */\n\nexport var getNextSortDirection = function getNextSortDirection(prevHeader, header, prevState) {\n  // If the previous header is equivalent to the current header, we know that we\n  // have to derive the next sort state from the previous sort state\n  if (prevHeader === header) {\n    // When transitioning, we know that the sequence of states is as follows:\n    // NONE -> ASC -> DESC -> NONE\n    if (prevState === 'NONE') {\n      return sortStates.ASC;\n    }\n\n    if (prevState === 'ASC') {\n      return sortStates.DESC;\n    }\n\n    return sortStates.NONE;\n  } // Otherwise, we have selected a new header and need to start off by sorting\n  // in descending order by default\n\n\n  return sortStates.ASC;\n};\nexport var getNextSortState = function getNextSortState(props, state, _ref) {\n  var key = _ref.key;\n  var sortDirection = state.sortDirection,\n      sortHeaderKey = state.sortHeaderKey;\n  var nextSortDirection = getNextSortDirection(key, sortHeaderKey, sortDirection);\n  return getSortedState(props, state, key, nextSortDirection);\n};\n/**\n * Derive the set of sorted state fields from props and state for the given\n * header key and sortDirection\n *\n * @param {object} props\n * @param {string} props.locale The current locale\n * @param {Function} props.sortRows Method to handle sorting a collection of\n * rows\n * @param {object} state\n * @param {Array<string>} state.rowIds Array of row ids\n * @param {object} state.cellsById Lookup object for cells by id\n * @param {Array<string>} state.initialRowOrder Initial row order for the\n * current set of rows\n * @param {string} key The key for the given header we are derving the\n * sorted state for\n * @param {string} sortDirection The sortState that we want to order by\n * @returns {object}\n */\n\nexport var getSortedState = function getSortedState(props, state, key, sortDirection) {\n  var rowIds = state.rowIds,\n      cellsById = state.cellsById,\n      initialRowOrder = state.initialRowOrder;\n  var locale = props.locale,\n      sortRow = props.sortRow;\n  var nextRowIds = sortDirection !== sortStates.NONE ? sortRows({\n    rowIds: rowIds,\n    cellsById: cellsById,\n    sortDirection: sortDirection,\n    key: key,\n    locale: locale,\n    sortRow: sortRow\n  }) : initialRowOrder;\n  return {\n    sortHeaderKey: key,\n    sortDirection: sortDirection,\n    rowIds: nextRowIds\n  };\n};","map":{"version":3,"sources":["/Users/nupurnegi/Desktop/UI_ongoingChanges/Developer-Playground/client/node_modules/carbon-components-react/es/components/DataTable/state/sorting.js"],"names":["sortStates","sortRows","initialSortState","NONE","getNextSortDirection","prevHeader","header","prevState","ASC","DESC","getNextSortState","props","state","_ref","key","sortDirection","sortHeaderKey","nextSortDirection","getSortedState","rowIds","cellsById","initialRowOrder","locale","sortRow","nextRowIds"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASA,UAAT;AACA,SAASC,QAAT,QAAyB,kBAAzB,C,CAA6C;AAC7C;;AAEA,OAAO,IAAIC,gBAAgB,GAAGF,UAAU,CAACG,IAAlC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,oBAAoB,GAAG,SAASA,oBAAT,CAA8BC,UAA9B,EAA0CC,MAA1C,EAAkDC,SAAlD,EAA6D;AAC7F;AACA;AACA,MAAIF,UAAU,KAAKC,MAAnB,EAA2B;AACzB;AACA;AACA,QAAIC,SAAS,KAAK,MAAlB,EAA0B;AACxB,aAAOP,UAAU,CAACQ,GAAlB;AACD;;AAED,QAAID,SAAS,KAAK,KAAlB,EAAyB;AACvB,aAAOP,UAAU,CAACS,IAAlB;AACD;;AAED,WAAOT,UAAU,CAACG,IAAlB;AACD,GAf4F,CAe3F;AACF;;;AAGA,SAAOH,UAAU,CAACQ,GAAlB;AACD,CApBM;AAqBP,OAAO,IAAIE,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,IAAxC,EAA8C;AAC1E,MAAIC,GAAG,GAAGD,IAAI,CAACC,GAAf;AACA,MAAIC,aAAa,GAAGH,KAAK,CAACG,aAA1B;AAAA,MACIC,aAAa,GAAGJ,KAAK,CAACI,aAD1B;AAEA,MAAIC,iBAAiB,GAAGb,oBAAoB,CAACU,GAAD,EAAME,aAAN,EAAqBD,aAArB,CAA5C;AACA,SAAOG,cAAc,CAACP,KAAD,EAAQC,KAAR,EAAeE,GAAf,EAAoBG,iBAApB,CAArB;AACD,CANM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBP,KAAxB,EAA+BC,KAA/B,EAAsCE,GAAtC,EAA2CC,aAA3C,EAA0D;AACpF,MAAII,MAAM,GAAGP,KAAK,CAACO,MAAnB;AAAA,MACIC,SAAS,GAAGR,KAAK,CAACQ,SADtB;AAAA,MAEIC,eAAe,GAAGT,KAAK,CAACS,eAF5B;AAGA,MAAIC,MAAM,GAAGX,KAAK,CAACW,MAAnB;AAAA,MACIC,OAAO,GAAGZ,KAAK,CAACY,OADpB;AAEA,MAAIC,UAAU,GAAGT,aAAa,KAAKf,UAAU,CAACG,IAA7B,GAAoCF,QAAQ,CAAC;AAC5DkB,IAAAA,MAAM,EAAEA,MADoD;AAE5DC,IAAAA,SAAS,EAAEA,SAFiD;AAG5DL,IAAAA,aAAa,EAAEA,aAH6C;AAI5DD,IAAAA,GAAG,EAAEA,GAJuD;AAK5DQ,IAAAA,MAAM,EAAEA,MALoD;AAM5DC,IAAAA,OAAO,EAAEA;AANmD,GAAD,CAA5C,GAOZF,eAPL;AAQA,SAAO;AACLL,IAAAA,aAAa,EAAEF,GADV;AAELC,IAAAA,aAAa,EAAEA,aAFV;AAGLI,IAAAA,MAAM,EAAEK;AAHH,GAAP;AAKD,CAnBM","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { sortStates } from './sortStates';\nexport { sortStates };\nimport { sortRows } from '../tools/sorting'; // Our initialSortState should be `NONE`, unless a consumer has specified a\n// different initialSortState\n\nexport var initialSortState = sortStates.NONE;\n/**\n * Utility used to get the next sort state given the following pieces of\n * information:\n *\n * @param {string} prevHeader the value of the previous header\n * @param {string} header the value of the currently selected header\n * @param {string} prevState the previous sort state of the table\n * @returns {string}\n */\n\nexport var getNextSortDirection = function getNextSortDirection(prevHeader, header, prevState) {\n  // If the previous header is equivalent to the current header, we know that we\n  // have to derive the next sort state from the previous sort state\n  if (prevHeader === header) {\n    // When transitioning, we know that the sequence of states is as follows:\n    // NONE -> ASC -> DESC -> NONE\n    if (prevState === 'NONE') {\n      return sortStates.ASC;\n    }\n\n    if (prevState === 'ASC') {\n      return sortStates.DESC;\n    }\n\n    return sortStates.NONE;\n  } // Otherwise, we have selected a new header and need to start off by sorting\n  // in descending order by default\n\n\n  return sortStates.ASC;\n};\nexport var getNextSortState = function getNextSortState(props, state, _ref) {\n  var key = _ref.key;\n  var sortDirection = state.sortDirection,\n      sortHeaderKey = state.sortHeaderKey;\n  var nextSortDirection = getNextSortDirection(key, sortHeaderKey, sortDirection);\n  return getSortedState(props, state, key, nextSortDirection);\n};\n/**\n * Derive the set of sorted state fields from props and state for the given\n * header key and sortDirection\n *\n * @param {object} props\n * @param {string} props.locale The current locale\n * @param {Function} props.sortRows Method to handle sorting a collection of\n * rows\n * @param {object} state\n * @param {Array<string>} state.rowIds Array of row ids\n * @param {object} state.cellsById Lookup object for cells by id\n * @param {Array<string>} state.initialRowOrder Initial row order for the\n * current set of rows\n * @param {string} key The key for the given header we are derving the\n * sorted state for\n * @param {string} sortDirection The sortState that we want to order by\n * @returns {object}\n */\n\nexport var getSortedState = function getSortedState(props, state, key, sortDirection) {\n  var rowIds = state.rowIds,\n      cellsById = state.cellsById,\n      initialRowOrder = state.initialRowOrder;\n  var locale = props.locale,\n      sortRow = props.sortRow;\n  var nextRowIds = sortDirection !== sortStates.NONE ? sortRows({\n    rowIds: rowIds,\n    cellsById: cellsById,\n    sortDirection: sortDirection,\n    key: key,\n    locale: locale,\n    sortRow: sortRow\n  }) : initialRowOrder;\n  return {\n    sortHeaderKey: key,\n    sortDirection: sortDirection,\n    rowIds: nextRowIds\n  };\n};"]},"metadata":{},"sourceType":"module"}