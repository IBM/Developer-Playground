{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * This file contains the list of the default values of compile-time feature flags.\n *\n * Build toolchain can replace variable here and/or the references\n * in order to apply non-default values to those feature flags.\n *\n * @example Render `foo` if `aFeatureFlag` is `true`, render `bar` otherwise.\n * import { aFeatureFlag } from '/path/to/FeatureFlags';\n * ...\n * const MyComponent = props => (<div {...props}>{aFeatureFlag ? 'foo' : 'bar'}</div>);\n */\n\n/**\n * With this flag, certain components will be created in either a controlled or controlled\n * mode based on the existence of a value prop.\n *\n * The following components will have the significance of their props slightly altered as outlined below.\n *\n * Components: `<NumberInput>`\n *\n * * `value` → when provided, enables controlled mode.\n *   For the rest of the component's lifecycle, it will be controlled by this prop as it's single source of truth.\n * * `defaultValue` → Optional starting value, used for for uncontrolled mode only (no value prop).\n *   The value prop takes precedence over defaultValue.\n * * `onChange` → Optional event handler.\n *   However, if value is provided and a handler is not, we'll throw a warning indicating the component is now read-only\n * * `readOnly` → silences the above warning, acknowledging the read-only state of the component\n *\n * This flag also disables prop -> state sync in several components, notablly `<NumberInput>`.\n *\n * This flag also updates event handlers to pass an up-to-date value in the second parameter,\n * so applications can use it in both controlled and uncontrolled components.\n *\n * * _With_ this feature flag, the signature of the event handler will be altered to provide additional context in the second parameter: `onChange(event, { value, ...rest })` where:\n *   * `event` is the (React) raw event\n *   * `value` is the new value\n *   * `rest` tells you additional information based on the source component\n * * _Without_ this feature flag the event handler has component-specific signature, e.g. `onChange(event, direction)`.\n */\nexport var useControlledStateWithValue = false;","map":{"version":3,"sources":["/Users/nupurnegi/Desktop/UI_ongoingChanges/Developer-Playground/client/node_modules/carbon-components-react/es/internal/FeatureFlags.js"],"names":["useControlledStateWithValue"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,2BAA2B,GAAG,KAAlC","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * This file contains the list of the default values of compile-time feature flags.\n *\n * Build toolchain can replace variable here and/or the references\n * in order to apply non-default values to those feature flags.\n *\n * @example Render `foo` if `aFeatureFlag` is `true`, render `bar` otherwise.\n * import { aFeatureFlag } from '/path/to/FeatureFlags';\n * ...\n * const MyComponent = props => (<div {...props}>{aFeatureFlag ? 'foo' : 'bar'}</div>);\n */\n\n/**\n * With this flag, certain components will be created in either a controlled or controlled\n * mode based on the existence of a value prop.\n *\n * The following components will have the significance of their props slightly altered as outlined below.\n *\n * Components: `<NumberInput>`\n *\n * * `value` → when provided, enables controlled mode.\n *   For the rest of the component's lifecycle, it will be controlled by this prop as it's single source of truth.\n * * `defaultValue` → Optional starting value, used for for uncontrolled mode only (no value prop).\n *   The value prop takes precedence over defaultValue.\n * * `onChange` → Optional event handler.\n *   However, if value is provided and a handler is not, we'll throw a warning indicating the component is now read-only\n * * `readOnly` → silences the above warning, acknowledging the read-only state of the component\n *\n * This flag also disables prop -> state sync in several components, notablly `<NumberInput>`.\n *\n * This flag also updates event handlers to pass an up-to-date value in the second parameter,\n * so applications can use it in both controlled and uncontrolled components.\n *\n * * _With_ this feature flag, the signature of the event handler will be altered to provide additional context in the second parameter: `onChange(event, { value, ...rest })` where:\n *   * `event` is the (React) raw event\n *   * `value` is the new value\n *   * `rest` tells you additional information based on the source component\n * * _Without_ this feature flag the event handler has component-specific signature, e.g. `onChange(event, direction)`.\n */\nexport var useControlledStateWithValue = false;"]},"metadata":{},"sourceType":"module"}