{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport InlineCheckbox from '../InlineCheckbox';\nimport cx from 'classnames';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\n\nvar TableSelectAll = function TableSelectAll(_ref) {\n  var ariaLabel = _ref.ariaLabel,\n      checked = _ref.checked,\n      id = _ref.id,\n      indeterminate = _ref.indeterminate,\n      name = _ref.name,\n      onSelect = _ref.onSelect,\n      disabled = _ref.disabled,\n      className = _ref.className;\n  return /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    className: cx(\"\".concat(prefix, \"--table-column-checkbox\"), className)\n  }, /*#__PURE__*/React.createElement(InlineCheckbox, {\n    ariaLabel: ariaLabel,\n    checked: checked,\n    id: id,\n    indeterminate: indeterminate,\n    name: name,\n    onClick: onSelect,\n    disabled: disabled\n  }));\n};\n\nTableSelectAll.propTypes = {\n  /**\n   * Specify the aria label for the underlying input control\n   */\n  ariaLabel: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether all items are selected, or not\n   */\n  checked: PropTypes.bool.isRequired,\n\n  /**\n   * The CSS class names of the cell that wraps the underlying input control\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the checkbox input should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide an `id` for the underlying input control\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether the selection only has a subset of all items\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * Provide a `name` for the underlying input control\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Provide a handler to listen to when a user initiates a selection request\n   */\n  onSelect: PropTypes.func.isRequired\n};\nTableSelectAll.defaultProps = {\n  ariaLabel: 'Select all rows in the table'\n};\nexport default TableSelectAll;","map":{"version":3,"sources":["/Users/nupurnegi/Desktop/UI_ongoingChanges/Developer-Playground/client/node_modules/carbon-components-react/es/components/DataTable/TableSelectAll.js"],"names":["PropTypes","React","InlineCheckbox","cx","settings","prefix","TableSelectAll","_ref","ariaLabel","checked","id","indeterminate","name","onSelect","disabled","className","createElement","scope","concat","onClick","propTypes","string","isRequired","bool","func","defaultProps"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,IAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAtB;;AAEA,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AACjD,MAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAAA,MAEIC,EAAE,GAAGH,IAAI,CAACG,EAFd;AAAA,MAGIC,aAAa,GAAGJ,IAAI,CAACI,aAHzB;AAAA,MAIIC,IAAI,GAAGL,IAAI,CAACK,IAJhB;AAAA,MAKIC,QAAQ,GAAGN,IAAI,CAACM,QALpB;AAAA,MAMIC,QAAQ,GAAGP,IAAI,CAACO,QANpB;AAAA,MAOIC,SAAS,GAAGR,IAAI,CAACQ,SAPrB;AAQA,SAAO,aAAad,KAAK,CAACe,aAAN,CAAoB,IAApB,EAA0B;AAC5CC,IAAAA,KAAK,EAAE,KADqC;AAE5CF,IAAAA,SAAS,EAAEZ,EAAE,CAAC,GAAGe,MAAH,CAAUb,MAAV,EAAkB,yBAAlB,CAAD,EAA+CU,SAA/C;AAF+B,GAA1B,EAGjB,aAAad,KAAK,CAACe,aAAN,CAAoBd,cAApB,EAAoC;AAClDM,IAAAA,SAAS,EAAEA,SADuC;AAElDC,IAAAA,OAAO,EAAEA,OAFyC;AAGlDC,IAAAA,EAAE,EAAEA,EAH8C;AAIlDC,IAAAA,aAAa,EAAEA,aAJmC;AAKlDC,IAAAA,IAAI,EAAEA,IAL4C;AAMlDO,IAAAA,OAAO,EAAEN,QANyC;AAOlDC,IAAAA,QAAQ,EAAEA;AAPwC,GAApC,CAHI,CAApB;AAYD,CArBD;;AAuBAR,cAAc,CAACc,SAAf,GAA2B;AACzB;AACF;AACA;AACEZ,EAAAA,SAAS,EAAER,SAAS,CAACqB,MAAV,CAAiBC,UAJH;;AAMzB;AACF;AACA;AACEb,EAAAA,OAAO,EAAET,SAAS,CAACuB,IAAV,CAAeD,UATC;;AAWzB;AACF;AACA;AACEP,EAAAA,SAAS,EAAEf,SAAS,CAACqB,MAdI;;AAgBzB;AACF;AACA;AACEP,EAAAA,QAAQ,EAAEd,SAAS,CAACuB,IAnBK;;AAqBzB;AACF;AACA;AACEb,EAAAA,EAAE,EAAEV,SAAS,CAACqB,MAAV,CAAiBC,UAxBI;;AA0BzB;AACF;AACA;AACEX,EAAAA,aAAa,EAAEX,SAAS,CAACuB,IA7BA;;AA+BzB;AACF;AACA;AACEX,EAAAA,IAAI,EAAEZ,SAAS,CAACqB,MAAV,CAAiBC,UAlCE;;AAoCzB;AACF;AACA;AACET,EAAAA,QAAQ,EAAEb,SAAS,CAACwB,IAAV,CAAeF;AAvCA,CAA3B;AAyCAhB,cAAc,CAACmB,YAAf,GAA8B;AAC5BjB,EAAAA,SAAS,EAAE;AADiB,CAA9B;AAGA,eAAeF,cAAf","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport InlineCheckbox from '../InlineCheckbox';\nimport cx from 'classnames';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\n\nvar TableSelectAll = function TableSelectAll(_ref) {\n  var ariaLabel = _ref.ariaLabel,\n      checked = _ref.checked,\n      id = _ref.id,\n      indeterminate = _ref.indeterminate,\n      name = _ref.name,\n      onSelect = _ref.onSelect,\n      disabled = _ref.disabled,\n      className = _ref.className;\n  return /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    className: cx(\"\".concat(prefix, \"--table-column-checkbox\"), className)\n  }, /*#__PURE__*/React.createElement(InlineCheckbox, {\n    ariaLabel: ariaLabel,\n    checked: checked,\n    id: id,\n    indeterminate: indeterminate,\n    name: name,\n    onClick: onSelect,\n    disabled: disabled\n  }));\n};\n\nTableSelectAll.propTypes = {\n  /**\n   * Specify the aria label for the underlying input control\n   */\n  ariaLabel: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether all items are selected, or not\n   */\n  checked: PropTypes.bool.isRequired,\n\n  /**\n   * The CSS class names of the cell that wraps the underlying input control\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the checkbox input should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide an `id` for the underlying input control\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether the selection only has a subset of all items\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * Provide a `name` for the underlying input control\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Provide a handler to listen to when a user initiates a selection request\n   */\n  onSelect: PropTypes.func.isRequired\n};\nTableSelectAll.defaultProps = {\n  ariaLabel: 'Select all rows in the table'\n};\nexport default TableSelectAll;"]},"metadata":{},"sourceType":"module"}