{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nvar prefix = settings.prefix;\n\nfunction Column(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      children = _ref.children,\n      containerClassName = _ref.className,\n      sm = _ref.sm,\n      md = _ref.md,\n      lg = _ref.lg,\n      xlg = _ref.xlg,\n      max = _ref.max,\n      rest = _objectWithoutProperties(_ref, [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\"]);\n\n  var columnClassName = getClassNameForBreakpoints([sm, md, lg, xlg, max]);\n  var className = cx(containerClassName, columnClassName, _defineProperty({}, \"\".concat(prefix, \"--col\"), columnClassName.length === 0));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nvar spanPropType = PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.number,\n  offset: PropTypes.number\n})]);\nColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\nvar breakpointNames = ['sm', 'md', 'lg', 'xlg', 'max'];\n/**\n * @typedef {object} Breakpoint\n * @property {boolean|number} [span]\n * @property {number} [offset]\n */\n\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\nfunction getClassNameForBreakpoints(breakpoints) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(span));\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n    }\n\n    if (typeof offset === 'number') {\n      classNames.push(\"\".concat(prefix, \"--offset-\").concat(name, \"-\").concat(offset));\n    }\n  }\n\n  return classNames.join(' ');\n}\n\nexport default Column;","map":{"version":3,"sources":["/Users/nupurnegi/Desktop/UI_ongoingChanges/Developer-Playground/client/node_modules/carbon-components-react/es/components/Grid/Column.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","keys","settings","cx","PropTypes","React","prefix","Column","_ref","_ref$as","as","BaseComponent","children","containerClassName","className","sm","md","lg","xlg","max","rest","columnClassName","getClassNameForBreakpoints","concat","createElement","spanPropType","oneOfType","bool","number","shape","span","offset","propTypes","string","elementType","node","breakpointNames","breakpoints","classNames","breakpoint","undefined","name","push","join"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nvar prefix = settings.prefix;\n\nfunction Column(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      children = _ref.children,\n      containerClassName = _ref.className,\n      sm = _ref.sm,\n      md = _ref.md,\n      lg = _ref.lg,\n      xlg = _ref.xlg,\n      max = _ref.max,\n      rest = _objectWithoutProperties(_ref, [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\"]);\n\n  var columnClassName = getClassNameForBreakpoints([sm, md, lg, xlg, max]);\n  var className = cx(containerClassName, columnClassName, _defineProperty({}, \"\".concat(prefix, \"--col\"), columnClassName.length === 0));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nvar spanPropType = PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.number,\n  offset: PropTypes.number\n})]);\nColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\nvar breakpointNames = ['sm', 'md', 'lg', 'xlg', 'max'];\n/**\n * @typedef {object} Breakpoint\n * @property {boolean|number} [span]\n * @property {number} [offset]\n */\n\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\nfunction getClassNameForBreakpoints(breakpoints) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(span));\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n    }\n\n    if (typeof offset === 'number') {\n      classNames.push(\"\".concat(prefix, \"--offset-\").concat(name, \"-\").concat(offset));\n    }\n  }\n\n  return classNames.join(' ');\n}\n\nexport default Column;"]},"metadata":{},"sourceType":"module"}