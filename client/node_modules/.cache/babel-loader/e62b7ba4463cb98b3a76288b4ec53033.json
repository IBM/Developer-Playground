{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getCellId } from './cells';\nimport { sortStates } from '../state/sortStates';\n/**\n * Compare two primitives to determine which comes first. Initially, this method\n * will try and figure out if both entries are the same type. If so, it will\n * apply the default sort algorithm for those types. Otherwise, it defaults to a\n * string conversion.\n *\n * @param {number|string} a\n * @param {number|string} b\n * @param {string} locale\n * @returns {number}\n */\n\nexport var compare = function compare(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n\n  if (typeof a === 'string' && typeof b === 'string') {\n    return compareStrings(a, b, locale);\n  }\n\n  return compareStrings('' + a, '' + b, locale);\n};\n/**\n * Use the built-in `localeCompare` function available on strings to compare two\n * strings.\n *\n * @param {string} a\n * @param {string} b\n * @param {string} locale\n * @returns {number}\n */\n\nexport var compareStrings = function compareStrings(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en'; // Only set `numeric: true` if the string only contains numbers\n  // https://stackoverflow.com/a/175787\n\n  if (!isNaN(a) && !isNaN(parseFloat(a))) {\n    return a.localeCompare(b, locale, {\n      numeric: true\n    });\n  }\n\n  return a.localeCompare(b, locale);\n};\n/**\n * Default implementation of how we sort rows internally. The idea behind this\n * implementation is to use the given list of row ids to look up the cells in\n * the row by the given key. We then use the value of these cells and pipe them\n * into our local `compareStrings` method, including the locale where\n * appropriate.\n *\n * @param {object} config\n * @param {Array[string]} config.rowIds array of all the row ids in the table\n * @param {object} config.cellsById object containing a mapping of cell id to\n * cell\n * @param {string} config.direction the sort direction used to determine the\n * order the comparison is called in\n * @param {string} config.key the header key that we use to lookup the cell\n * @param {string} [config.locale] optional locale used in the comparison\n * function\n * @returns {Array[string]} array of sorted rowIds\n */\n\nexport var sortRows = function sortRows(_ref) {\n  var rowIds = _ref.rowIds,\n      cellsById = _ref.cellsById,\n      sortDirection = _ref.sortDirection,\n      key = _ref.key,\n      locale = _ref.locale,\n      sortRow = _ref.sortRow;\n  return rowIds.slice().sort(function (a, b) {\n    var cellA = cellsById[getCellId(a, key)];\n    var cellB = cellsById[getCellId(b, key)];\n    return sortRow(cellA.value, cellB.value, {\n      key: key,\n      sortDirection: sortDirection,\n      locale: locale,\n      sortStates: sortStates,\n      compare: compare\n    });\n  });\n};\nexport var defaultSortRow = function defaultSortRow(cellA, cellB, _ref2) {\n  var sortDirection = _ref2.sortDirection,\n      sortStates = _ref2.sortStates,\n      locale = _ref2.locale;\n\n  if (sortDirection === sortStates.ASC) {\n    return compare(cellA, cellB, locale);\n  }\n\n  return compare(cellB, cellA, locale);\n};","map":{"version":3,"sources":["/Users/nupurnegi/Desktop/UI_ongoingChanges/Developer-Playground/client/node_modules/carbon-components-react/es/components/DataTable/tools/sorting.js"],"names":["getCellId","sortStates","compare","a","b","locale","arguments","length","undefined","compareStrings","isNaN","parseFloat","localeCompare","numeric","sortRows","_ref","rowIds","cellsById","sortDirection","key","sortRow","slice","sort","cellA","cellB","value","defaultSortRow","_ref2","ASC"],"mappings":"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","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getCellId } from './cells';\nimport { sortStates } from '../state/sortStates';\n/**\n * Compare two primitives to determine which comes first. Initially, this method\n * will try and figure out if both entries are the same type. If so, it will\n * apply the default sort algorithm for those types. Otherwise, it defaults to a\n * string conversion.\n *\n * @param {number|string} a\n * @param {number|string} b\n * @param {string} locale\n * @returns {number}\n */\n\nexport var compare = function compare(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n\n  if (typeof a === 'string' && typeof b === 'string') {\n    return compareStrings(a, b, locale);\n  }\n\n  return compareStrings('' + a, '' + b, locale);\n};\n/**\n * Use the built-in `localeCompare` function available on strings to compare two\n * strings.\n *\n * @param {string} a\n * @param {string} b\n * @param {string} locale\n * @returns {number}\n */\n\nexport var compareStrings = function compareStrings(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n\n  // Only set `numeric: true` if the string only contains numbers\n  // https://stackoverflow.com/a/175787\n  if (!isNaN(a) && !isNaN(parseFloat(a))) {\n    return a.localeCompare(b, locale, {\n      numeric: true\n    });\n  }\n\n  return a.localeCompare(b, locale);\n};\n/**\n * Default implementation of how we sort rows internally. The idea behind this\n * implementation is to use the given list of row ids to look up the cells in\n * the row by the given key. We then use the value of these cells and pipe them\n * into our local `compareStrings` method, including the locale where\n * appropriate.\n *\n * @param {object} config\n * @param {Array[string]} config.rowIds array of all the row ids in the table\n * @param {object} config.cellsById object containing a mapping of cell id to\n * cell\n * @param {string} config.direction the sort direction used to determine the\n * order the comparison is called in\n * @param {string} config.key the header key that we use to lookup the cell\n * @param {string} [config.locale] optional locale used in the comparison\n * function\n * @returns {Array[string]} array of sorted rowIds\n */\n\nexport var sortRows = function sortRows(_ref) {\n  var rowIds = _ref.rowIds,\n      cellsById = _ref.cellsById,\n      sortDirection = _ref.sortDirection,\n      key = _ref.key,\n      locale = _ref.locale,\n      sortRow = _ref.sortRow;\n  return rowIds.slice().sort(function (a, b) {\n    var cellA = cellsById[getCellId(a, key)];\n    var cellB = cellsById[getCellId(b, key)];\n    return sortRow(cellA.value, cellB.value, {\n      key: key,\n      sortDirection: sortDirection,\n      locale: locale,\n      sortStates: sortStates,\n      compare: compare\n    });\n  });\n};\nexport var defaultSortRow = function defaultSortRow(cellA, cellB, _ref2) {\n  var sortDirection = _ref2.sortDirection,\n      sortStates = _ref2.sortStates,\n      locale = _ref2.locale;\n\n  if (sortDirection === sortStates.ASC) {\n    return compare(cellA, cellB, locale);\n  }\n\n  return compare(cellB, cellA, locale);\n};"]},"metadata":{},"sourceType":"module"}