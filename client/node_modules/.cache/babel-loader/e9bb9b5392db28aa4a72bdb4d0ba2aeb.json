{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport InlineCheckbox from '../InlineCheckbox';\nimport RadioButton from '../RadioButton';\nvar prefix = settings.prefix;\n\nvar TableSelectRow = function TableSelectRow(_ref) {\n  var _classNames;\n\n  var ariaLabel = _ref.ariaLabel,\n      checked = _ref.checked,\n      id = _ref.id,\n      name = _ref.name,\n      onSelect = _ref.onSelect,\n      onChange = _ref.onChange,\n      disabled = _ref.disabled,\n      radio = _ref.radio,\n      className = _ref.className;\n  var selectionInputProps = {\n    id: id,\n    name: name,\n    onClick: onSelect,\n    onChange: onChange,\n    checked: checked,\n    disabled: disabled\n  };\n  var InlineInputComponent = radio ? RadioButton : InlineCheckbox;\n  var tableSelectRowClasses = classNames(\"\".concat(prefix, \"--table-column-checkbox\"), (_classNames = {}, _defineProperty(_classNames, className, className), _defineProperty(_classNames, \"\".concat(prefix, \"--table-column-radio\"), radio), _classNames));\n  return /*#__PURE__*/React.createElement(\"td\", {\n    className: tableSelectRowClasses\n  }, /*#__PURE__*/React.createElement(InlineInputComponent, _extends({}, selectionInputProps, radio && {\n    labelText: ariaLabel,\n    hideLabel: true\n  }, !radio && {\n    ariaLabel: ariaLabel\n  })));\n};\n\nTableSelectRow.propTypes = {\n  /**\n   * Specify the aria label for the underlying input control\n   */\n  ariaLabel: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether all items are selected, or not\n   */\n  checked: PropTypes.bool.isRequired,\n\n  /**\n   * The CSS class names of the cell that wraps the underlying input control\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide an `id` for the underlying input control\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Provide a `name` for the underlying input control\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Provide an optional hook that is called each time the input is updated\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Provide a handler to listen to when a user initiates a selection request\n   */\n  onSelect: PropTypes.func.isRequired,\n\n  /**\n   * Specify whether the control should be a radio button or inline checkbox\n   */\n  radio: PropTypes.bool\n};\nexport default TableSelectRow;","map":{"version":3,"sources":["/Users/nupurnegi/Desktop/UI_ongoingChanges/Developer-Playground/client/node_modules/carbon-components-react/es/components/DataTable/TableSelectRow.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","PropTypes","React","classNames","settings","InlineCheckbox","RadioButton","prefix","TableSelectRow","_ref","_classNames","ariaLabel","checked","id","name","onSelect","onChange","disabled","radio","className","selectionInputProps","onClick","InlineInputComponent","tableSelectRowClasses","concat","createElement","labelText","hideLabel","propTypes","string","isRequired","bool","func"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport InlineCheckbox from '../InlineCheckbox';\nimport RadioButton from '../RadioButton';\nvar prefix = settings.prefix;\n\nvar TableSelectRow = function TableSelectRow(_ref) {\n  var _classNames;\n\n  var ariaLabel = _ref.ariaLabel,\n      checked = _ref.checked,\n      id = _ref.id,\n      name = _ref.name,\n      onSelect = _ref.onSelect,\n      onChange = _ref.onChange,\n      disabled = _ref.disabled,\n      radio = _ref.radio,\n      className = _ref.className;\n  var selectionInputProps = {\n    id: id,\n    name: name,\n    onClick: onSelect,\n    onChange: onChange,\n    checked: checked,\n    disabled: disabled\n  };\n  var InlineInputComponent = radio ? RadioButton : InlineCheckbox;\n  var tableSelectRowClasses = classNames(\"\".concat(prefix, \"--table-column-checkbox\"), (_classNames = {}, _defineProperty(_classNames, className, className), _defineProperty(_classNames, \"\".concat(prefix, \"--table-column-radio\"), radio), _classNames));\n  return /*#__PURE__*/React.createElement(\"td\", {\n    className: tableSelectRowClasses\n  }, /*#__PURE__*/React.createElement(InlineInputComponent, _extends({}, selectionInputProps, radio && {\n    labelText: ariaLabel,\n    hideLabel: true\n  }, !radio && {\n    ariaLabel: ariaLabel\n  })));\n};\n\nTableSelectRow.propTypes = {\n  /**\n   * Specify the aria label for the underlying input control\n   */\n  ariaLabel: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether all items are selected, or not\n   */\n  checked: PropTypes.bool.isRequired,\n\n  /**\n   * The CSS class names of the cell that wraps the underlying input control\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide an `id` for the underlying input control\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Provide a `name` for the underlying input control\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Provide an optional hook that is called each time the input is updated\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Provide a handler to listen to when a user initiates a selection request\n   */\n  onSelect: PropTypes.func.isRequired,\n\n  /**\n   * Specify whether the control should be a radio button or inline checkbox\n   */\n  radio: PropTypes.bool\n};\nexport default TableSelectRow;"]},"metadata":{},"sourceType":"module"}