{"version":3,"file":"combo.js","sourceRoot":"","sources":["combo.ts"],"names":[],"mappings":"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","sourcesContent":["// Internal Imports\nimport { AxisChart } from '../axis-chart';\nimport * as Configuration from '../configuration';\nimport {\n\tChartConfig,\n\tComboChartOptions,\n\tChartTypes,\n\tSkeletons,\n} from '../interfaces/index';\nimport { Tools } from '../tools';\n\n// Components\nimport {\n\tGrid,\n\tGroupedBar,\n\tSimpleBar,\n\tStackedBar,\n\tLine,\n\tTwoDimensionalAxes,\n\tZeroLine,\n\tScatter,\n\tStackedScatter,\n\tArea,\n\tStackedArea,\n\tRuler,\n\tStackedRuler,\n\t// the imports below are needed because of typescript bug (error TS4029)\n\tLegend,\n\tLayoutComponent,\n\tComponent,\n\tSkeleton,\n} from '../components/index';\n\nconst graphComponentsMap = {\n\t[ChartTypes.LINE]: [Line, Scatter],\n\t[ChartTypes.SCATTER]: [Scatter],\n\t[ChartTypes.AREA]: [Area, Line, Scatter],\n\t[ChartTypes.STACKED_AREA]: [\n\t\tStackedArea,\n\t\tLine,\n\t\tStackedScatter,\n\t\tStackedRuler,\n\t],\n\t[ChartTypes.SIMPLE_BAR]: [SimpleBar],\n\t[ChartTypes.GROUPED_BAR]: [GroupedBar, ZeroLine],\n\t[ChartTypes.STACKED_BAR]: [StackedBar, StackedRuler],\n};\n\nexport class ComboChart extends AxisChart {\n\tconstructor(holder: Element, chartConfigs: ChartConfig<ComboChartOptions>) {\n\t\tsuper(holder, chartConfigs);\n\n\t\t// Merge the default options for this chart\n\t\t// With the user provided options\n\t\tconst chartOptions = Tools.mergeDefaultChartOptions(\n\t\t\tConfiguration.options.comboChart,\n\t\t\tchartConfigs.options\n\t\t);\n\n\t\t// Warn user if no comboChartTypes defined\n\t\t// Use skeleton chart instead\n\t\tif (!chartConfigs.options.comboChartTypes) {\n\t\t\tconsole.error('No comboChartTypes defined for the Combo Chart!');\n\t\t\t// add a default chart to get an empty chart\n\t\t\tchartOptions.comboChartTypes = [\n\t\t\t\t{ type: ChartTypes.LINE, correspondingDatasets: [] },\n\t\t\t];\n\t\t}\n\n\t\t// set the global options\n\t\tthis.model.setOptions(chartOptions);\n\n\t\t// Initialize data, services, components etc.\n\t\tthis.init(holder, chartConfigs);\n\t}\n\n\tgetGraphComponents() {\n\t\tconst { comboChartTypes } = this.model.getOptions();\n\t\tlet counter = 0;\n\t\tconst graphComponents = comboChartTypes\n\t\t\t.map((graph) => {\n\t\t\t\tconst type = graph.type;\n\t\t\t\tlet options;\n\n\t\t\t\t// initializes the components using input strings with the base configs for each chart\n\t\t\t\tif (typeof graph.type === 'string') {\n\t\t\t\t\t// check if it is in the components map\n\t\t\t\t\t// if it isn't then it is not a valid carbon chart to use in combo\n\t\t\t\t\tif (!Object.keys(graphComponentsMap).includes(graph.type)) {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t`Invalid chart type \"${graph.type}\" specified for combo chart. Please refer to the ComboChart tutorial for more guidance.`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tlet stacked;\n\t\t\t\t\toptions = Tools.merge(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tConfiguration.options[\n\t\t\t\t\t\t\t`${Tools.camelCase(graph.type)}Chart`\n\t\t\t\t\t\t],\n\t\t\t\t\t\tthis.model.getOptions(),\n\t\t\t\t\t\tgraph.options\n\t\t\t\t\t);\n\t\t\t\t\t// if we are creating a stacked area, the contained Line chart needs to know it is stacked\n\t\t\t\t\tif (graph.type === ChartTypes.STACKED_AREA) {\n\t\t\t\t\t\tstacked = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn graphComponentsMap[graph.type].map(\n\t\t\t\t\t\t(Component, i) =>\n\t\t\t\t\t\t\tnew Component(this.model, this.services, {\n\t\t\t\t\t\t\t\tgroups: graph.correspondingDatasets,\n\t\t\t\t\t\t\t\tid: counter++,\n\t\t\t\t\t\t\t\toptions: options,\n\t\t\t\t\t\t\t\tstacked,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// user has imported a type or custom component to instantiate\n\t\t\t\t\toptions = Tools.merge(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tthis.model.getOptions(),\n\t\t\t\t\t\tgraph.options\n\t\t\t\t\t);\n\t\t\t\t\treturn new type(this.model, this.services, {\n\t\t\t\t\t\tgroups: graph.correspondingDatasets,\n\t\t\t\t\t\tid: counter++,\n\t\t\t\t\t\toptions: options,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.filter((item) => item !== null);\n\n\t\treturn Tools.flatten(graphComponents);\n\t}\n\n\tgetComponents() {\n\t\tconst { comboChartTypes } = this.model.getOptions();\n\t\t// don't add the regular ruler if stacked ruler is added\n\t\tconst stackedRulerEnabled = comboChartTypes.some(\n\t\t\t(chartObject) =>\n\t\t\t\tchartObject.type === ChartTypes.STACKED_BAR ||\n\t\t\t\tchartObject.type === ChartTypes.STACKED_AREA\n\t\t);\n\n\t\t// Specify what to render inside the graph-frame\n\t\tconst graphFrameComponents = [\n\t\t\tnew TwoDimensionalAxes(this.model, this.services),\n\t\t\tnew Grid(this.model, this.services),\n\t\t\tnew Skeleton(this.model, this.services, {\n\t\t\t\tskeleton: Skeletons.GRID,\n\t\t\t}),\n\t\t\t...(stackedRulerEnabled\n\t\t\t\t? []\n\t\t\t\t: [new Ruler(this.model, this.services)]),\n\t\t\t...this.getGraphComponents(),\n\t\t];\n\n\t\tconst components: any[] = this.getAxisChartComponents(\n\t\t\tgraphFrameComponents\n\t\t);\n\n\t\treturn components;\n\t}\n}\n"]}