{"version":3,"file":"chart-clip.js","sourceRoot":"","sources":["chart-clip.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,mBAAmB;AACnB,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAG1C,yEAAyE;AACzE,0CAA0C;AAC1C;IAA+B,6BAAS;IASvC,mBAAY,KAAiB,EAAE,QAAa,EAAE,OAAa;QAA3D,YACC,kBAAM,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,SAE/B;QAXD,UAAI,GAAG,YAAY,CAAC;QAEpB,sCAAsC;QACtC,oEAAoE;QACpE,iBAAW,GAAG,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,CAAC;QAMxE,KAAI,CAAC,IAAI,EAAE,CAAC;;IACb,CAAC;IAED,wBAAI,GAAJ;QACC,gDAAgD;QAChD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IACzE,CAAC;IAED,0BAAM,GAAN,UAAO,OAAc;QAAd,wBAAA,EAAA,cAAc;QACpB,sBAAsB;QACtB,IAAI,CAAC,cAAc,EAAE,CAAC;IACvB,CAAC;IAED,kCAAc,GAAd;QACC,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;QAChB,IAAA,+CAAe,CAAmB;QAC1C,IAAM,UAAU,GAAG,eAAe,CAAC,aAAa,EAAE,CAAC;QACnD,IAAM,UAAU,GAAG,eAAe,CAAC,aAAa,EAAE,CAAC;QAE7C,IAAA,uBAA6C,EAA5C,mBAAW,EAAE,iBAA+B,CAAC;QAC9C,IAAA,uBAA6C,EAA5C,iBAAS,EAAE,mBAAiC,CAAC;QAEpD,aAAa;QACb,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,cAAc,CAC3C,GAAG,EACH,cAAY,IAAI,CAAC,IAAM,CACvB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/B,IAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CACvC,IAAI,CAAC,aAAa,EAClB,UAAQ,IAAI,CAAC,IAAM,CACnB,CAAC;QACF,QAAQ;aACN,IAAI,CAAC,GAAG,EAAE,WAAW,CAAC;aACtB,IAAI,CAAC,GAAG,EAAE,WAAW,CAAC;aACtB,IAAI,CAAC,OAAO,EAAE,SAAS,GAAG,WAAW,CAAC;aACtC,IAAI,CAAC,QAAQ,EAAE,SAAS,GAAG,WAAW,CAAC,CAAC;QAE1C,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;IAC5C,CAAC;IACF,gBAAC;AAAD,CAAC,AAlDD,CAA+B,SAAS,GAkDvC","sourcesContent":["// Internal Imports\nimport { Component } from '../component';\nimport { DOMUtils } from '../../services';\nimport { ChartModel } from '../../model';\n\n// This class is used to create the clipPath to clip the chart components\n// It's necessary for zoom in/out behavior\nexport class ChartClip extends Component {\n\ttype = 'chart-clip';\n\n\t// Give every chart-clip a distinct ID\n\t// so they don't interfere each other in a page with multiple charts\n\tchartClipId = 'chart-clip-id-' + Math.floor(Math.random() * 99999999999);\n\n\tchartClipPath: any;\n\n\tconstructor(model: ChartModel, services: any, configs?: any) {\n\t\tsuper(model, services, configs);\n\t\tthis.init();\n\t}\n\n\tinit() {\n\t\t// set unique chartClipId in this chart to model\n\t\tthis.model.set({ chartClipId: this.chartClipId }, { skipUpdate: true });\n\t}\n\n\trender(animate = true) {\n\t\t// Create the clipPath\n\t\tthis.createClipPath();\n\t}\n\n\tcreateClipPath() {\n\t\tconst svg = this.parent;\n\t\tconst { cartesianScales } = this.services;\n\t\tconst mainXScale = cartesianScales.getMainXScale();\n\t\tconst mainYScale = cartesianScales.getMainYScale();\n\n\t\tconst [xScaleStart, xScaleEnd] = mainXScale.range();\n\t\tconst [yScaleEnd, yScaleStart] = mainYScale.range();\n\n\t\t// Get height\n\t\tthis.chartClipPath = DOMUtils.appendOrSelect(\n\t\t\tsvg,\n\t\t\t`clipPath.${this.type}`\n\t\t).attr('id', this.chartClipId);\n\t\tconst clipRect = DOMUtils.appendOrSelect(\n\t\t\tthis.chartClipPath,\n\t\t\t`rect.${this.type}`\n\t\t);\n\t\tclipRect\n\t\t\t.attr('x', xScaleStart)\n\t\t\t.attr('y', yScaleStart)\n\t\t\t.attr('width', xScaleEnd - xScaleStart)\n\t\t\t.attr('height', yScaleEnd - yScaleStart);\n\n\t\tthis.chartClipPath.merge(clipRect).lower();\n\t}\n}\n"]}