{"version":3,"file":"bar.js","sourceRoot":"","sources":["bar.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,mBAAmB;AACnB,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAE1C;IAAyB,uBAAS;IAAlC;;IA0CA,CAAC;IAzCA,oEAAoE;IAC1D,yBAAW,GAArB,UAAsB,aAAwB;QAC7C,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE;YACvB,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;SAC1B;QAED,IAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC;QAC9D,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;QACjE,IAAM,UAAU,GAAG,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE;YAC1D,QAAQ,EAAE,IAAI;SACd,CAAC,CAAC,KAAK,CAAC;QAET,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;YACrB,OAAO,IAAI,CAAC,GAAG,CACd,OAAO,CAAC,IAAI,CAAC,QAAQ,EACrB,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,kBAAkB,CACxC,CAAC;SACF;QAED,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;IAC/D,CAAC;IAES,mCAAqB,GAA/B,UAAgC,EAAU,EAAE,EAAU;QACrD,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC;QACrD,mDAAmD;QACnD,8BAA8B;QAC9B,IAAI,SAAS,IAAI,CAAC,EAAE;YACnB,OAAO,KAAK,CAAC;SACb;QAED,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAChD,IAAI,UAAU,KAAK,SAAS,EAAE;YAC7B,IAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;YACnE,OAAO,CACN,EAAE,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC/B,EAAE,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAC/B,CAAC;SACF;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IACF,UAAC;AAAD,CAAC,AA1CD,CAAyB,SAAS,GA0CjC","sourcesContent":["// Internal Imports\nimport { Component } from '../component';\nimport { DOMUtils } from '../../services';\n\nexport class Bar extends Component {\n\t// Gets the correct width for bars based on options & configurations\n\tprotected getBarWidth(allDataLabels?: string[]) {\n\t\tconst options = this.getOptions();\n\t\tif (options.bars.width) {\n\t\t\treturn options.bars.width;\n\t\t}\n\n\t\tconst numberOfDatapoints = this.model.getDisplayData().length;\n\t\tconst mainXScale = this.services.cartesianScales.getMainXScale();\n\t\tconst chartWidth = DOMUtils.getSVGElementSize(this.parent, {\n\t\t\tuseAttrs: true,\n\t\t}).width;\n\n\t\tif (!mainXScale.step) {\n\t\t\treturn Math.min(\n\t\t\t\toptions.bars.maxWidth,\n\t\t\t\t(chartWidth * 0.25) / numberOfDatapoints\n\t\t\t);\n\t\t}\n\n\t\treturn Math.min(options.bars.maxWidth, mainXScale.step() / 2);\n\t}\n\n\tprotected isOutsideZoomedDomain(x0: number, x1: number) {\n\t\tconst dataCount = this.model.getDisplayData().length;\n\t\t// if only one data point, never out of zoom domain\n\t\t// or it becomes a blank chart\n\t\tif (dataCount <= 1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst zoomDomain = this.model.get('zoomDomain');\n\t\tif (zoomDomain !== undefined) {\n\t\t\tconst domainScale = this.services.cartesianScales.getDomainScale();\n\t\t\treturn (\n\t\t\t\tx0 < domainScale(zoomDomain[0]) ||\n\t\t\t\tx1 > domainScale(zoomDomain[1])\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n}\n"]}