{"version":3,"file":"scatter-stacked.js","sourceRoot":"","sources":["scatter-stacked.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,mBAAmB;AACnB,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAEpC;IAAoC,kCAAO;IAA3C;QAAA,qEA2JC;QA1JA,UAAI,GAAG,iBAAiB,CAAC;;IA0J1B,CAAC;IAxJA,+BAAM,GAAN,UAAO,OAAgB;QAAvB,iBA0EC;QAzEA,IAAM,gBAAgB,GAAG,KAAK,CAAC,WAAW,CACzC,IAAI,CAAC,UAAU,EAAE,EACjB,QAAQ,EACR,SAAS,CACT,CAAC;QACF,IAAI,CAAC,gBAAgB,EAAE;YACtB,OAAO;SACP;QACD,qBAAqB;QACrB,IAAM,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;QAE5D,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC1B,IAAA,sCAAW,CAAkB;QAErC,IAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAChD,UAAC,IAAI,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,EAA7B,CAA6B,CACvC,CAAC;QACF,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAC7C,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;YAC3B,UAAU,YAAA;SACV,CAAC,CAAC;QAEH,4BAA4B;QAC5B,IAAM,YAAY,GAAG,GAAG;aACtB,SAAS,CAAC,QAAQ,CAAC;aACnB,IAAI,CAAC,WAAW,EAAE,UAAC,CAAC,IAAK,OAAA,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,EAApC,CAAoC,CAAC,CAAC;QAEjE,4CAA4C;QAC5C,YAAY,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QAEhD,gDAAgD;QAChD,IAAM,iBAAiB,GAAG,YAAY;aACpC,KAAK,EAAE;aACP,MAAM,CAAC,GAAG,CAAC;aACX,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;aACrB,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;QAE5B,6BAA6B;QAC7B,IAAM,OAAO,GAAG,iBAAiB;aAC/B,KAAK,CAAC,YAAY,CAAC;aACnB,SAAS,CAAC,YAAY,CAAC;aACvB,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;QAEjB,yCAAyC;QACzC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QAE3C,gDAAgD;QAChD,IAAM,eAAe,GAAG,OAAO;aAC7B,KAAK,EAAE;aACP,MAAM,CAAC,QAAQ,CAAC;aAChB,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;aACpB,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QAErB,2BAA2B;QAC3B,IAAM,cAAc,GAAG,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC;;YAC7D,IAAM,KAAK,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC;YAC7B,IAAM,gBAAgB,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,mBAAmB,CACzE,CAAC,CACD,CAAC;YACF,IAAM,eAAe,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,kBAAkB,CACvE,CAAC,CACD,CAAC;YAEF;gBACC,GAAC,WAAW,IAAG,KAAK;gBACpB,GAAC,gBAAgB,IAAG,CAAC,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC;gBAC/C,GAAC,eAAe,IAAG,CAAC,CAAC,CAAC,CAAC;mBACtB;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QAE3C,wCAAwC;QACxC,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC1B,CAAC;IAED,uCAAc,GAAd,UAAe,QAAQ,EAAE,QAAQ;QAAjC,iBA2EC;QA1EA,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC1B,IAAA,sCAAW,CAAkB;QACrC,IAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAChD,UAAC,IAAI,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,EAA7B,CAA6B,CACvC,CAAC;QACF,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAC7C,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;YAC3B,UAAU,YAAA;SACV,CAAC,CAAC;QACH,IAAM,WAAW,GAAG,EAAE,CAAC;QACvB,WAAW,CAAC,OAAO,CAAC,UAAC,SAAS,EAAE,cAAc;YAC7C,SAAS,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,SAAS;;gBAClC,IAAM,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;gBACjC,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,CAAC;gBACpD,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC;gBACtC,IAAM,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,IAAM,gBAAgB,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,mBAAmB,CACzE,KAAK,CACL,CAAC;gBACF,IAAM,eAAe,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,kBAAkB,CACvE,KAAK,CACL,CAAC;gBAEF,IACC,UAAU,KAAK,IAAI;oBACnB,UAAU,KAAK,SAAS;oBACxB,QAAQ;wBACP,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAC3C,WAAW,CACX;oBACF,QAAQ;wBACP,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,aAAa,CAC1C,iBAAiB,CACjB,EACD;oBACD,IAAI,UAAU,EAAE;wBACf,UAAU,GAAG,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC;4BACtC,MAAM,EAAE,KAAI,CAAC,OAAO,CAAC,MAAM;yBAC3B,CAAC,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC;qBAC7C;oBAED,IAAI,UAAU,KAAK,IAAI,EAAE;wBACxB,WAAW,CAAC,IAAI;4BACf,GAAC,WAAW,IAAG,KAAK;4BACpB,GAAC,gBAAgB,IAAG,WAAW;4BAC/B,GAAC,eAAe,IAAG,UAAU;gCAC5B,CAAC;qBACH;iBACD;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,KAAK;aACf,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aACnC,MAAM,CAAC,UAAC,SAAS;YACjB,IAAM,gBAAgB,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,mBAAmB,CACzE,SAAS,CACT,CAAC;YACF,IAAM,eAAe,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,kBAAkB,CACvE,SAAS,CACT,CAAC;YACF,OAAO,CACN,WAAW,CAAC,IAAI,CAAC,UAAC,gBAAgB;gBACjC,OAAO,CACN,gBAAgB,CAAC,WAAW,CAAC;oBAC5B,SAAS,CAAC,WAAW,CAAC;oBACvB,gBAAgB,CAAC,gBAAgB,CAAC;wBACjC,SAAS,CAAC,gBAAgB,CAAC;oBAC5B,gBAAgB,CAAC,eAAe,CAAC;wBAChC,SAAS,CAAC,eAAe,CAAC,CAC3B,CAAC;YACH,CAAC,CAAC,KAAK,SAAS,CAChB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACF,qBAAC;AAAD,CAAC,AA3JD,CAAoC,OAAO,GA2J1C","sourcesContent":["// Internal Imports\nimport { Scatter } from './scatter';\nimport { Roles } from '../../interfaces';\nimport { Tools } from '../../tools';\n\nexport class StackedScatter extends Scatter {\n\ttype = 'scatter-stacked';\n\n\trender(animate: boolean) {\n\t\tconst isScatterEnabled = Tools.getProperty(\n\t\t\tthis.getOptions(),\n\t\t\t'points',\n\t\t\t'enabled'\n\t\t);\n\t\tif (!isScatterEnabled) {\n\t\t\treturn;\n\t\t}\n\t\t// Grab container SVG\n\t\tconst svg = this.getContainerSVG({ withinChartClip: true });\n\n\t\tconst options = this.getOptions();\n\t\tconst { groupMapsTo } = options.data;\n\n\t\tconst percentage = Object.keys(options.axes).some(\n\t\t\t(axis) => options.axes[axis].percentage\n\t\t);\n\t\tconst stackedData = this.model.getStackedData({\n\t\t\tgroups: this.configs.groups,\n\t\t\tpercentage,\n\t\t});\n\n\t\t// Update data on dot groups\n\t\tconst circleGroups = svg\n\t\t\t.selectAll('g.dots')\n\t\t\t.data(stackedData, (d) => Tools.getProperty(d, 0, groupMapsTo));\n\n\t\t// Remove dot groups that need to be removed\n\t\tcircleGroups.exit().attr('opacity', 0).remove();\n\n\t\t// Add the dot groups that need to be introduced\n\t\tconst circleGroupsEnter = circleGroups\n\t\t\t.enter()\n\t\t\t.append('g')\n\t\t\t.classed('dots', true)\n\t\t\t.attr('role', Roles.GROUP);\n\n\t\t// Update data on all circles\n\t\tconst circles = circleGroupsEnter\n\t\t\t.merge(circleGroups)\n\t\t\t.selectAll('circle.dot')\n\t\t\t.data((d) => d);\n\n\t\t// Remove circles that need to be removed\n\t\tcircles.exit().attr('opacity', 0).remove();\n\n\t\t// Add the dot groups that need to be introduced\n\t\tconst enteringCircles = circles\n\t\t\t.enter()\n\t\t\t.append('circle')\n\t\t\t.classed('dot', true)\n\t\t\t.attr('opacity', 0);\n\n\t\t// Apply styling & position\n\t\tconst circlesToStyle = enteringCircles.merge(circles).datum((d) => {\n\t\t\tconst group = d[groupMapsTo];\n\t\t\tconst domainIdentifier = this.services.cartesianScales.getDomainIdentifier(\n\t\t\t\td\n\t\t\t);\n\t\t\tconst rangeIdentifier = this.services.cartesianScales.getRangeIdentifier(\n\t\t\t\td\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\t[groupMapsTo]: group,\n\t\t\t\t[domainIdentifier]: d['data']['sharedStackKey'],\n\t\t\t\t[rangeIdentifier]: d[1],\n\t\t\t};\n\t\t});\n\t\tthis.styleCircles(circlesToStyle, animate);\n\n\t\t// Add event listeners to elements drawn\n\t\tthis.addEventListeners();\n\t}\n\n\tgetTooltipData(hoveredX, hoveredY) {\n\t\tconst options = this.getOptions();\n\t\tconst { groupMapsTo } = options.data;\n\t\tconst percentage = Object.keys(options.axes).some(\n\t\t\t(axis) => options.axes[axis].percentage\n\t\t);\n\t\tconst stackedData = this.model.getStackedData({\n\t\t\tgroups: this.configs.groups,\n\t\t\tpercentage,\n\t\t});\n\t\tconst tooltipData = [];\n\t\tstackedData.forEach((groupData, groupDataIndex) => {\n\t\t\tgroupData.forEach((datum, dataIndex) => {\n\t\t\t\tconst group = datum[groupMapsTo];\n\t\t\t\tconst domainValue = datum['data']['sharedStackKey'];\n\t\t\t\tlet rangeValue = datum['data'][group];\n\t\t\t\tconst stackedRangeValue = datum[1];\n\t\t\t\tconst domainIdentifier = this.services.cartesianScales.getDomainIdentifier(\n\t\t\t\t\tdatum\n\t\t\t\t);\n\t\t\t\tconst rangeIdentifier = this.services.cartesianScales.getRangeIdentifier(\n\t\t\t\t\tdatum\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\trangeValue !== null &&\n\t\t\t\t\trangeValue !== undefined &&\n\t\t\t\t\thoveredX ===\n\t\t\t\t\t\tthis.services.cartesianScales.getDomainValue(\n\t\t\t\t\t\t\tdomainValue\n\t\t\t\t\t\t) &&\n\t\t\t\t\thoveredY ===\n\t\t\t\t\t\tthis.services.cartesianScales.getRangeValue(\n\t\t\t\t\t\t\tstackedRangeValue\n\t\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tif (percentage) {\n\t\t\t\t\t\trangeValue = this.model.getStackedData({\n\t\t\t\t\t\t\tgroups: this.configs.groups,\n\t\t\t\t\t\t})[groupDataIndex][dataIndex]['data'][group];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rangeValue !== null) {\n\t\t\t\t\t\ttooltipData.push({\n\t\t\t\t\t\t\t[groupMapsTo]: group,\n\t\t\t\t\t\t\t[domainIdentifier]: domainValue,\n\t\t\t\t\t\t\t[rangeIdentifier]: rangeValue,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this.model\n\t\t\t.getDisplayData(this.configs.groups)\n\t\t\t.filter((datapoint) => {\n\t\t\t\tconst domainIdentifier = this.services.cartesianScales.getDomainIdentifier(\n\t\t\t\t\tdatapoint\n\t\t\t\t);\n\t\t\t\tconst rangeIdentifier = this.services.cartesianScales.getRangeIdentifier(\n\t\t\t\t\tdatapoint\n\t\t\t\t);\n\t\t\t\treturn (\n\t\t\t\t\ttooltipData.find((tooltipDatapoint) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\ttooltipDatapoint[groupMapsTo] ==\n\t\t\t\t\t\t\t\tdatapoint[groupMapsTo] &&\n\t\t\t\t\t\t\ttooltipDatapoint[domainIdentifier] ==\n\t\t\t\t\t\t\t\tdatapoint[domainIdentifier] &&\n\t\t\t\t\t\t\ttooltipDatapoint[rangeIdentifier] ==\n\t\t\t\t\t\t\t\tdatapoint[rangeIdentifier]\n\t\t\t\t\t\t);\n\t\t\t\t\t}) !== undefined\n\t\t\t\t);\n\t\t\t});\n\t}\n}\n"]}