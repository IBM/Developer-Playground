{"version":3,"file":"model-boxplot.js","sourceRoot":"","sources":["model-boxplot.ts"],"names":[],"mappings":"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","sourcesContent":["// Internal Imports\nimport { ChartModelCartesian } from './model-cartesian-charts';\nimport * as Configuration from './configuration';\nimport { Tools } from './tools';\n\n// D3 Imports\nimport { ascending, min, max, quantile } from 'd3-array';\nimport { scaleOrdinal } from 'd3-scale';\n\n/** The charting model layer which includes mainly the chart data and options,\n * as well as some misc. information to be shared among components */\nexport class BoxplotChartModel extends ChartModelCartesian {\n\tconstructor(services: any) {\n\t\tsuper(services);\n\t}\n\n\tgetBoxQuartiles(d) {\n\t\treturn {\n\t\t\tq_25: quantile(d, 0.25),\n\t\t\tq_50: quantile(d, 0.5),\n\t\t\tq_75: quantile(d, 0.75),\n\t\t};\n\t}\n\n\tgetBoxplotData() {\n\t\tconst options = this.getOptions();\n\t\tconst { groupMapsTo } = options.data;\n\n\t\tconst groupedData = this.getGroupedData();\n\n\t\t// Prepare the data for the box plots\n\t\tconst boxplotData = [];\n\t\tfor (const { name: group, data } of groupedData) {\n\t\t\tconst rangeIdentifier = this.services.cartesianScales.getRangeIdentifier();\n\t\t\tconst values = data.map((d) => d[rangeIdentifier]).sort(ascending);\n\n\t\t\tconst record = {\n\t\t\t\t[groupMapsTo]: group,\n\t\t\t\tcounts: values,\n\t\t\t\tquartiles: this.getBoxQuartiles(values),\n\t\t\t\toutliers: null,\n\t\t\t\twhiskers: null,\n\t\t\t};\n\n\t\t\tconst q1 = record.quartiles.q_25;\n\t\t\tconst q3 = record.quartiles.q_75;\n\n\t\t\tconst iqr = (q3 - q1) * 1.5;\n\t\t\tconst irq1 = q1 - iqr;\n\t\t\tconst irq3 = q3 + iqr;\n\n\t\t\tconst outliers = [];\n\t\t\tconst normalValues = [];\n\n\t\t\tfor (const value of values) {\n\t\t\t\tif (value < irq1) {\n\t\t\t\t\toutliers.push(value);\n\t\t\t\t} else if (value > irq3) {\n\t\t\t\t\toutliers.push(value);\n\t\t\t\t} else {\n\t\t\t\t\tnormalValues.push(value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trecord.outliers = outliers;\n\n\t\t\tconst minNormalValue = min(normalValues);\n\t\t\tconst maxNormalValue = max(normalValues);\n\t\t\trecord.whiskers = {\n\t\t\t\tmin: minNormalValue\n\t\t\t\t\t? minNormalValue\n\t\t\t\t\t: min([\n\t\t\t\t\t\t\trecord.quartiles.q_25,\n\t\t\t\t\t\t\trecord.quartiles.q_50,\n\t\t\t\t\t\t\trecord.quartiles.q_75,\n\t\t\t\t\t  ]),\n\t\t\t\tmax: maxNormalValue\n\t\t\t\t\t? maxNormalValue\n\t\t\t\t\t: max([\n\t\t\t\t\t\t\trecord.quartiles.q_25,\n\t\t\t\t\t\t\trecord.quartiles.q_50,\n\t\t\t\t\t\t\trecord.quartiles.q_75,\n\t\t\t\t\t  ]),\n\t\t\t};\n\n\t\t\tboxplotData.push(record);\n\t\t}\n\n\t\treturn boxplotData;\n\t}\n\n\tprotected setColorClassNames() {\n\t\t// monochrome\n\t\tconst numberOfColors = 1;\n\n\t\tconst colorPairingOptions = Tools.getProperty(\n\t\t\tthis.getOptions(),\n\t\t\t'color',\n\t\t\t'pairing'\n\t\t);\n\t\tlet pairingOption = Tools.getProperty(colorPairingOptions, 'option');\n\t\tconst colorPairingCounts = Configuration.color.pairingOptions;\n\n\t\t// Use default palette if user choice is not in range\n\t\tpairingOption =\n\t\t\tpairingOption <= colorPairingCounts[`${numberOfColors}-color`]\n\t\t\t\t? pairingOption\n\t\t\t\t: 1;\n\n\t\t// Create color classes for graph, tooltip and stroke use\n\t\tconst colorPairing = this.allDataGroups.map(\n\t\t\t(dataGroup, index) => `${numberOfColors}-${pairingOption}-1`\n\t\t);\n\n\t\t// Create default color classnames\n\t\tthis.colorClassNames = scaleOrdinal()\n\t\t\t.range(colorPairing)\n\t\t\t.domain(this.allDataGroups);\n\t}\n}\n"]}