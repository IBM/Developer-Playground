{"version":3,"file":"model-circle-pack.js","sourceRoot":"","sources":["model-circle-pack.ts"],"names":[],"mappings":"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","sourcesContent":["// Internal Imports\nimport { ChartModel } from './model';\nimport { Tools } from './tools';\nimport { Events, LegendItemType } from './interfaces/enums';\nimport { thresholdSturges } from 'd3-array';\n\n/** The charting model layer which includes mainly the chart data and options,\n * as well as some misc. information to be shared among components */\nexport class CirclePackChartModel extends ChartModel {\n\tparentNode = false;\n\n\tconstructor(services: any) {\n\t\tsuper(services);\n\t\tthis.set({ depth: 2 }, { skipUpdate: true });\n\t}\n\n\tsetData(newData) {\n\t\tsuper.setData(newData);\n\t\tthis.setDataGroups();\n\t\tif (newData.length === 1) {\n\t\t\tthis.parentNode = true;\n\t\t}\n\t\tthis.setZoom();\n\t}\n\n\tsetOptions(newOptions) {\n\t\tconst options = this.getOptions();\n\t\tconst zoomOptions = Tools.merge(\n\t\t\t{},\n\t\t\tnewOptions,\n\t\t\tthis.getZoomOptions(newOptions)\n\t\t);\n\t\tTools.updateLegendAdditionalItems(options, zoomOptions);\n\n\t\tlet depth = this.getHierarchyLevel();\n\t\tlet userProvidedDepth = Tools.getProperty(\n\t\t\toptions,\n\t\t\t'circlePack',\n\t\t\t'hierarchyLevel'\n\t\t);\n\n\t\tthis.set({\n\t\t\toptions: Tools.merge(options, zoomOptions),\n\t\t\tdepth:\n\t\t\t\tuserProvidedDepth && userProvidedDepth < 4\n\t\t\t\t\t? userProvidedDepth\n\t\t\t\t\t: depth,\n\t\t});\n\t}\n\n\tgetZoomOptions(options?) {\n\t\tif (!this.getDisplayData()) {\n\t\t\treturn {};\n\t\t}\n\t\t// uses the user provided options and data to determine if there is zoom in this CP chart\n\t\tconst displayData = this.getDisplayData();\n\t\tconst zoomOptions = options ? options : this.getOptions();\n\t\tconst data =\n\t\t\tdisplayData.length === 1\n\t\t\t\t? Tools.getProperty(displayData, 0, 'children')\n\t\t\t\t: displayData;\n\n\t\tlet depth = this.getHierarchyLevel();\n\t\t// check the data depth\n\t\tdata.some((datum) => {\n\t\t\tif (datum.children) {\n\t\t\t\tif (datum.children.some((item) => item.children)) {\n\t\t\t\t\tdepth = 3;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (\n\t\t\tTools.getProperty(zoomOptions, 'canvasZoom', 'enabled') === true &&\n\t\t\tdepth > 2\n\t\t) {\n\t\t\treturn {\n\t\t\t\tlegend: {\n\t\t\t\t\tadditionalItems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: LegendItemType.ZOOM,\n\t\t\t\t\t\t\tname: 'Click to zoom',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tsetZoom(options?) {\n\t\tthis.setOptions(this.getZoomOptions(options));\n\t}\n\n\t// update the hierarchy level\n\tupdateHierarchyLevel(depth: number) {\n\t\tthis.set({ depth: depth });\n\t}\n\n\tgetHierarchyLevel() {\n\t\treturn this.get('depth');\n\t}\n\n\thasParentNode() {\n\t\treturn this.parentNode;\n\t}\n\n\t// set the datagroup name on the items that are it's children\n\tsetDataGroups() {\n\t\tconst data = this.getData();\n\t\tconst options = this.getOptions();\n\t\tconst { groupMapsTo } = options.data;\n\n\t\tconst newData = data.map((depthOne) => {\n\t\t\tconst groupName = depthOne[groupMapsTo];\n\t\t\treturn this.setChildrenDataGroup(depthOne, groupName);\n\t\t});\n\n\t\tthis.set(\n\t\t\t{\n\t\t\t\tdata: newData,\n\t\t\t},\n\t\t\t{ skipUpdate: true }\n\t\t);\n\t}\n\n\t// sets name recursively down the node tree\n\tprotected setChildrenDataGroup(node, name) {\n\t\tif (node.children) {\n\t\t\treturn {\n\t\t\t\t...node,\n\t\t\t\tdataGroupName: name,\n\t\t\t\tchildren: node.children.map((child, i) => {\n\t\t\t\t\treturn this.setChildrenDataGroup(child, name);\n\t\t\t\t}),\n\t\t\t};\n\t\t} else {\n\t\t\treturn { ...node, dataGroupName: name };\n\t\t}\n\t}\n}\n"]}