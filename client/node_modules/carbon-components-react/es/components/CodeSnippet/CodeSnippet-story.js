function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import { action } from '@storybook/addon-actions';
import { withKnobs, boolean, text, select } from '@storybook/addon-knobs';
import CodeSnippet from '../CodeSnippet';
import CodeSnippetSkeleton from './CodeSnippet.Skeleton';
import mdx from './CodeSnippet.mdx';
export default {
  title: 'CodeSnippet',
  component: CodeSnippet,
  decorators: [withKnobs],
  parameters: {
    docs: {
      page: mdx
    }
  }
};

var props = function props() {
  return {
    type: select('Type (type)', {
      inline: 'inline',
      'single line': 'single',
      'multiple line': 'multi'
    }, 'inline'),
    disabled: boolean('Disabled (disabled)', false),
    light: boolean('Light variant (light)', false),
    feedback: text('Feedback text', 'Copied to clipboard'),
    showMoreText: text('Text for "show more" button', 'Show more'),
    showLessText: text('Text for "show less" button', 'Show less'),
    hideCopyButton: boolean('Hide copy button (hideCopyButton)', false),
    onClick: action('onClick'),
    copyButtonDescription: text('Copy button title', 'Copy code snippet'),
    ariaLabel: text('ARIA label', 'Container label'),
    wrapText: boolean('Wrap text (wrapText)', true)
  };
};

export var inline = function inline() {
  return /*#__PURE__*/React.createElement(CodeSnippet, {
    type: "inline",
    feedback: "Copied to clipboard"
  }, 'node -v');
};
export var multiline = function multiline() {
  return /*#__PURE__*/React.createElement(CodeSnippet, _extends({}, props(), {
    type: "multi",
    feedback: "Copied to clipboard"
  }), "  \"scripts\": {\n    \"build\": \"lerna run build --stream --prefix --npm-client yarn\",\n    \"ci-check\": \"carbon-cli ci-check\",\n    \"clean\": \"lerna run clean && lerna clean --yes && rimraf node_modules\",\n    \"doctoc\": \"doctoc --title '## Table of Contents'\",\n    \"format\": \"prettier --write '**/*.{js,md,scss,ts}' '!**/{build,es,lib,storybook,ts,umd}/**'\",\n    \"format:diff\": \"prettier --list-different '**/*.{js,md,scss,ts}' '!**/{build,es,lib,storybook,ts,umd}/**' '!packages/components/**'\",\n    \"lint\": \"eslint actions config codemods packages\",\n    \"lint:styles\": \"stylelint '**/*.{css,scss}' --report-needless-disables --report-invalid-scope-disables\",\n    \"sync\": \"carbon-cli sync\",\n    \"test\": \"cross-env BABEL_ENV=test jest\",\n    \"test:e2e\": \"cross-env BABEL_ENV=test jest --testPathPattern=e2e --testPathIgnorePatterns='examples,/packages/components/,/packages/react/'\"\n  },\n  \"resolutions\": {\n    \"react\": \"~16.9.0\",\n    \"react-dom\": \"~16.9.0\",\n    \"react-is\": \"~16.9.0\",\n    \"react-test-renderer\": \"~16.9.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.10.0\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",\n    \"@babel/plugin-proposal-export-default-from\": \"^7.7.4\",\n    \"@babel/plugin-proposal-export-namespace-from\": \"^7.7.4\",\n    \"@babel/plugin-transform-runtime\": \"^7.10.0\",\n    \"@babel/preset-env\": \"^7.10.0\",\n    \"@babel/preset-react\": \"^7.10.0\",\n    \"@babel/runtime\": \"^7.10.0\",\n    \"@commitlint/cli\": \"^8.3.5\",");
};
export var singleline = function singleline() {
  return /*#__PURE__*/React.createElement(CodeSnippet, {
    type: "single",
    feedback: "Copied to clipboard"
  }, "yarn add carbon-components@latest carbon-components-react@latest @carbon/icons-react@latest carbon-icons@latest");
};
export var skeleton = function skeleton() {
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CodeSnippetSkeleton, {
    type: "single",
    style: {
      marginBottom: 8
    }
  }), /*#__PURE__*/React.createElement(CodeSnippetSkeleton, {
    type: "multi"
  }));
};
var lightPropMessage = /*#__PURE__*/React.createElement("small", {
  style: {
    display: 'block',
    paddingBottom: '1rem'
  }
}, "The snippet container should never be the same color as the page background.", /*#__PURE__*/React.createElement("br", null), 'Do not use the ', /*#__PURE__*/React.createElement(CodeSnippet, {
  type: "inline",
  light: true
}, "light"), ' variant on ', /*#__PURE__*/React.createElement(CodeSnippet, {
  type: "inline",
  light: true
}, "$ui-background"), ' or ', /*#__PURE__*/React.createElement(CodeSnippet, {
  type: "inline",
  light: true
}, "$ui-02"), ".");
export var playground = function playground() {
  return /*#__PURE__*/React.createElement("div", {
    className: props().light ? 'bx--tile' : ''
  }, props().light && lightPropMessage, /*#__PURE__*/React.createElement(CodeSnippet, props(), props().type === 'multi' ? "@mixin grid-container {\n  width: 100%;\n  padding-right: padding(mobile);\n  padding-left: padding(mobile);\n}" : 'node -v'));
};