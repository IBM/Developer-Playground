function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import { action } from '@storybook/addon-actions';
import { boolean, select, text } from '@storybook/addon-knobs';
import ComboBox from '../ComboBox';
import mdx from './ComboBox.mdx';
var items = [{
  id: 'option-0',
  text: 'An example option that is really long to show what should be done to handle long text'
}, {
  id: 'option-1',
  text: 'Option 1'
}, {
  id: 'option-2',
  text: 'Option 2'
}, {
  id: 'option-3',
  text: 'Option 3',
  selected: true
}, {
  id: 'option-4',
  text: 'Option 4'
}, {
  id: 'option-5',
  text: 'Option 5'
}];
var sizes = {
  'Extra large size (xl)': 'xl',
  'Default size': undefined,
  'Small size (sm)': 'sm'
};
var directions = {
  'Bottom (default)': 'bottom',
  'Top ': 'top'
};
export default {
  title: 'ComboBox',
  component: ComboBox,
  parameters: {
    docs: {
      page: mdx
    }
  }
};
export var combobox = function combobox() {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: 300
    }
  }, /*#__PURE__*/React.createElement(ComboBox, {
    items: items,
    itemToString: function itemToString(item) {
      return item ? item.text : '';
    },
    placeholder: "Filter...",
    titleText: "ComboBox title",
    helperText: "Combobox helper text"
  }));
};

var props = function props() {
  return {
    id: text('Combobox ID (id)', 'carbon-combobox-example'),
    placeholder: text('Placeholder text (placeholder)', 'Filter...'),
    titleText: text('Title (titleText)', 'Combobox title'),
    helperText: text('Helper text (helperText)', 'Optional helper text here'),
    light: boolean('Light (light)', false),
    disabled: boolean('Disabled (disabled)', false),
    invalid: boolean('Invalid (invalid)', false),
    invalidText: text('Invalid text (invalidText)', 'A valid value is required'),
    size: select('Field size (size)', sizes, undefined) || undefined,
    direction: select('Dropdown direction (direction)', directions, 'bottom'),
    onChange: action('onChange'),
    onToggleClick: action('onClick')
  };
};

export var Playground = function Playground() {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: 300
    }
  }, /*#__PURE__*/React.createElement(ComboBox, _extends({
    items: items,
    itemToString: function itemToString(item) {
      return item ? item.text : '';
    }
  }, props())));
};
export var disabled = function disabled() {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: 300
    }
  }, /*#__PURE__*/React.createElement(ComboBox, {
    disabled: true,
    items: items,
    itemToString: function itemToString(item) {
      return item ? item.text : '';
    },
    placeholder: "Filter...",
    titleText: "ComboBox title",
    helperText: "Combobox helper text"
  }));
};
export var light = function light() {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: 300
    }
  }, /*#__PURE__*/React.createElement(ComboBox, {
    light: true,
    items: items,
    itemToString: function itemToString(item) {
      return item ? item.text : '';
    },
    placeholder: "Filter...",
    titleText: "ComboBox title",
    helperText: "Combobox helper text"
  }));
};