function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Copyright IBM Corp. 2016, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import { action } from '@storybook/addon-actions';
import { array, boolean, number, text, withKnobs } from '@storybook/addon-knobs';
import { unstable_PageSelector as PageSelector, unstable_Pagination as Pagination } from '../../../';

var props = function props() {
  return {
    disabled: boolean('Disable backward/forward buttons (disabled)', false),
    pagesUnknown: boolean('Total number of items unknown (pagesUnknown)', false),
    backwardText: text('The description for the backward icon (backwardText)', 'Previous page'),
    forwardText: text('The description for the forward icon (forwardText)', 'Next page'),
    pageSize: number('Number of items per page (pageSize)', 10),
    itemsPerPageText: text('Label for `pageSizes` select UI (itemsPerPageText)', 'Items per page:'),
    onChange: action('onChange')
  };
};

export default {
  title: 'unstable_Pagination',
  decorators: [withKnobs, function (story) {
    return /*#__PURE__*/React.createElement("div", {
      style: {
        width: '800px'
      }
    }, story());
  }]
};
export var WithAPageSelector = function WithAPageSelector() {
  return /*#__PURE__*/React.createElement(Pagination, _extends({}, props(), {
    totalItems: 350,
    pageSizes: array('Choices of `pageSize` (pageSizes)', [10, 20, 30])
  }), function (_ref) {
    var currentPage = _ref.currentPage,
        onSetPage = _ref.onSetPage,
        totalPages = _ref.totalPages;
    return /*#__PURE__*/React.createElement(PageSelector, {
      currentPage: currentPage,
      id: "select-1",
      onChange: function onChange(event) {
        return onSetPage(event.target.value);
      },
      totalPages: totalPages
    });
  });
};
WithAPageSelector.storyName = 'with a page selector';
WithAPageSelector.parameters = {
  info: {
    propTables: [Pagination, PageSelector],
    text: "\n        \uD83D\uDEA8 This component is *experimental* and may change. \uD83D\uDEA8\n        `Pagination` accepts a render prop `children`.\n        This example wraps the `children` (`PageSelector`) in a function, allowing it to pass information back to the parent component.\n        ```jsx\n        {/**\n          * Provide `totalItems` to `Pagination` when using the `PageSelector` child.\n          * `Pagination` uses `totalItems` to calculate `totalPages`.\n          * And then, `PageSelector` uses the calculated `totalPages` to accurately display page options.\n          */}\n        <Pagination\n          totalItems={350}\n          pageSizes={[10, 15, 20, 25]}\n        >\n          {/**\n            * Below, `children` is a render prop, wrapped in a function.\n            * - `currentPage` is used to display the current page.\n            * - `onSetPage` is used to update the current page state in the parent component.\n            * - `totalPages` is calculated using the `totalItems` value provided to the parent component, and then is displayed below.\n            */}\n          {({ currentPage, onSetPage, totalPages }) => (\n            <PageSelector\n              currentPage={currentPage}\n              id=\"select-1\"\n              onChange={event => onSetPage(event.target.value)}\n              totalPages={totalPages}\n            />\n          )}\n        </Pagination>\n        ```\n      "
  }
};
export var WithNoSizerChildInputOrChildSelector = function WithNoSizerChildInputOrChildSelector() {
  return /*#__PURE__*/React.createElement(Pagination, _extends({}, props(), {
    totalItems: 350
  }));
};
WithNoSizerChildInputOrChildSelector.storyName = 'with no sizer, child input, or child selector';
WithNoSizerChildInputOrChildSelector.parameters = {
  info: {
    text: "\n      \uD83D\uDEA8 This component is *experimental* and may change. \uD83D\uDEA8\n      Without `children`, `Pagination` renders without a page selector.\n    "
  }
};