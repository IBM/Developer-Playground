function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import { action } from '@storybook/addon-actions';
import { withKnobs, boolean, select, text } from '@storybook/addon-knobs';
import RadioButton from '../RadioButton';
import { RadioButton as OGRadioButton } from './RadioButton';
import RadioButtonSkeleton from '../RadioButton/RadioButton.Skeleton';
import mdx from './RadioButton.mdx';
var labelPositions = {
  'Left (left)': 'left',
  'Right (right)': 'right'
};

var radioProps = function radioProps() {
  return {
    className: 'some-class',
    name: text('Form item name (name)', 'test'),
    value: text('Value (value)', 'standard'),
    labelText: text('Label text (labelText)', 'Standard Radio Button'),
    labelPosition: select('Label position (labelPosition)', labelPositions, 'right'),
    disabled: boolean('Disabled (disabled)', false),
    onChange: action('onChange')
  };
};

export default {
  title: 'RadioButton',
  decorators: [withKnobs],
  component: OGRadioButton,
  subcomponents: {
    RadioButtonSkeleton: RadioButtonSkeleton
  },
  parameters: {
    docs: {
      page: mdx
    }
  }
};
export var Default = function Default() {
  return /*#__PURE__*/React.createElement(RadioButton, _extends({
    id: "radio-1"
  }, radioProps()));
};
Default.parameters = {
  info: {
    text: "\n            Radio buttons are used when a list of two or more options are mutually exclusive,\n            meaning the user must select only one option. The example below shows how the Radio Button component\n            can be used as an uncontrolled component that is initially checked by setting the defaultChecked property\n            to true. To use the component in a controlled way, set the checked property instead.\n          "
  }
};
export var Skeleton = function Skeleton() {
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(RadioButtonSkeleton, null));
};
Skeleton.storyName = 'skeleton';
Skeleton.parameters = {
  info: {
    text: "\n        Placeholder skeleton state to use when content is loading.\n      "
  }
};