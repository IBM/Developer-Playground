function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { useState } from 'react';
import { action } from '@storybook/addon-actions';
import { withKnobs, boolean, select, text } from '@storybook/addon-knobs';
import TextInput from '../TextInput';
import TextInputSkeleton from '../TextInput/TextInput.Skeleton';
import FluidForm from '../FluidForm/FluidForm';
import mdx from './TextInput.mdx';
var types = {
  None: '',
  'Text (text)': 'text',
  'For email (email)': 'email',
  'For password (password)': 'password'
};
var sizes = {
  'Extra large size (xl)': 'xl',
  'Default size': undefined,
  'Small size (sm)': 'sm'
};
var ControlledPasswordInputApp = /*#__PURE__*/React.forwardRef(function ControlledPasswordInputApp(props, ref) {
  var _useState = useState('password'),
      _useState2 = _slicedToArray(_useState, 2),
      type = _useState2[0],
      setType = _useState2[1];

  var togglePasswordVisibility = function togglePasswordVisibility() {
    setType(type === 'password' ? 'text' : 'password');
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput.ControlledPasswordInput, _extends({
    type: type,
    togglePasswordVisibility: togglePasswordVisibility,
    ref: ref
  }, props)), /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: function onClick() {
      return setType('text');
    }
  }, "Show password"), /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: function onClick() {
      return setType('password');
    }
  }, "Hide password"));
});
var props = {
  TextInputProps: function TextInputProps() {
    return {
      className: 'some-class',
      id: 'test2',
      defaultValue: text('Default value (defaultValue)', 'This is not a default value'),
      size: select('Field size (size)', sizes, undefined) || undefined,
      labelText: text('Label text (labelText)', 'Text input label'),
      placeholder: text('Placeholder text (placeholder)', 'Placeholder text'),
      light: boolean('Light variant (light)', false),
      disabled: boolean('Disabled (disabled)', false),
      hideLabel: boolean('No label (hideLabel)', false),
      invalid: boolean('Show form validation UI (invalid)', false),
      invalidText: text('Form validation UI content (invalidText)', 'A valid value is required'),
      warn: boolean('Show warning state (warn)', false),
      warnText: text('Warning state text (warnText)', 'This will overwrite your current settings'),
      helperText: text('Helper text (helperText)', 'Optional help text'),
      inline: boolean('Inline variant (inline)', false),
      onClick: action('onClick'),
      onChange: action('onChange')
    };
  },
  PasswordInputProps: function PasswordInputProps() {
    return {
      tooltipPosition: select('Tooltip position (tooltipPosition)', ['top', 'right', 'bottom', 'left'], 'bottom'),
      tooltipAlignment: select('Tooltip alignment (tooltipAlignment)', ['start', 'center', 'end'], 'center'),
      hidePasswordLabel: text('"Hide password" tooltip label for password visibility toggle (hidePasswordLabel)', 'Hide password'),
      showPasswordLabel: text('"Show password" tooltip label for password visibility toggle (showPasswordLabel)', 'Show password')
    };
  }
};
TextInput.displayName = 'TextInput';
export default {
  title: 'TextInput',
  decorators: [withKnobs],
  parameters: {
    component: TextInput,
    docs: {
      page: mdx
    },
    subcomponents: {
      TextInputSkeleton: TextInputSkeleton,
      'TextInput.ControlledPasswordInput': TextInput.ControlledPasswordInput
    }
  }
};
export var Default = function Default() {
  return /*#__PURE__*/React.createElement(TextInput, _extends({
    type: select('Form control type (type)', types, 'text')
  }, props.TextInputProps()));
};
Default.parameters = {
  info: {
    text: "\n        Text fields enable the user to interact with and input data. A single line\n        field is used when the input anticipated by the user is a single line of\n        text as opposed to a paragraph.\n        The default type is 'text' and its value can be either 'string' or 'number'.\n      "
  }
};
export var Fluid = function Fluid() {
  return /*#__PURE__*/React.createElement(FluidForm, null, /*#__PURE__*/React.createElement(TextInput, _extends({
    type: select('Form control type (type)', types, 'text')
  }, props.TextInputProps())));
};
Fluid.parameters = {
  info: {
    text: "\n        Text fields enable the user to interact with and input data. A single line\n        field is used when the input anticipated by the user is a single line of\n        text as opposed to a paragraph.\n        The default type is 'text' and its value can be either 'string' or 'number'.\n      "
  }
};
export var TogglePasswordVisibility = function TogglePasswordVisibility() {
  return /*#__PURE__*/React.createElement(TextInput.PasswordInput, _extends({}, props.TextInputProps(), props.PasswordInputProps()));
};
TogglePasswordVisibility.storyName = 'Toggle password visibility';
TogglePasswordVisibility.parameters = {
  info: {
    text: "\n      Text field with password visibility toggle.\n    "
  }
};
export var FullyControlledTogglePasswordVisibility = function FullyControlledTogglePasswordVisibility() {
  ControlledPasswordInputApp.__docgenInfo = _objectSpread(_objectSpread({}, TextInput.PasswordInput.__docgenInfo), {}, {
    props: _objectSpread({}, TextInput.PasswordInput.__docgenInfo.props)
  });
  return /*#__PURE__*/React.createElement(ControlledPasswordInputApp, _extends({}, props.TextInputProps(), props.PasswordInputProps()));
};
FullyControlledTogglePasswordVisibility.storyName = 'Fully controlled toggle password visibility';
FullyControlledTogglePasswordVisibility.parameters = {
  info: {
    text: "\n    Fully controlled text field with password visibility toggle.\n  "
  }
};
export var Skeleton = function Skeleton() {
  return /*#__PURE__*/React.createElement("div", {
    "aria-label": "loading text input",
    "aria-live": "assertive",
    role: "status",
    tabIndex: "0" // eslint-disable-line jsx-a11y/no-noninteractive-tabindex

  }, /*#__PURE__*/React.createElement(TextInputSkeleton, null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(TextInputSkeleton, {
    hideLabel: true
  }));
};
Skeleton.storyName = 'skeleton';
Skeleton.parameters = {
  info: {
    text: "\n        Placeholder skeleton state to use when content is loading.\n        "
  }
};