"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WithTriggerButton = exports.TitleOnly = exports.UsingChildNodes = exports.UsingHeaderFooterProps = exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _addonActions = require("@storybook/addon-actions");

var _addonKnobs = require("@storybook/addon-knobs");

var _carbonComponents = require("carbon-components");

var _ComposedModal = _interopRequireWildcard(require("../ComposedModal"));

var _Button = _interopRequireDefault(require("../Button"));

var _ComposedModal2 = _interopRequireDefault(require("./ComposedModal.mdx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var prefix = _carbonComponents.settings.prefix;
var sizes = {
  Default: '',
  'Extra small (xs)': 'xs',
  'Small (sm)': 'sm',
  'Large (lg)': 'lg'
};
var props = {
  composedModal: function composedModal() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        titleOnly = _ref.titleOnly;

    return {
      open: (0, _addonKnobs.boolean)('Open (open in <ComposedModal>)', true),
      onKeyDown: (0, _addonActions.action)('onKeyDown'),
      danger: (0, _addonKnobs.boolean)('Danger mode (danger)', false),
      selectorPrimaryFocus: (0, _addonKnobs.text)('Primary focus element selector (selectorPrimaryFocus)', '[data-modal-primary-focus]'),
      size: (0, _addonKnobs.select)('Size (size)', sizes, titleOnly ? 'sm' : ''),
      preventCloseOnClickOutside: (0, _addonKnobs.boolean)('Prevent closing on click outside of modal (preventCloseOnClickOutside)', false)
    };
  },
  composedModalWithLauncher: function composedModalWithLauncher() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        titleOnly = _ref2.titleOnly;

    return {
      onKeyDown: (0, _addonActions.action)('onKeyDown'),
      danger: (0, _addonKnobs.boolean)('Danger mode (danger)', false),
      selectorPrimaryFocus: (0, _addonKnobs.text)('Primary focus element selector (selectorPrimaryFocus)', '[data-modal-primary-focus]'),
      size: (0, _addonKnobs.select)('Size (size)', sizes, titleOnly ? 'sm' : ''),
      preventCloseOnClickOutside: (0, _addonKnobs.boolean)('Prevent closing on click outside of modal (preventCloseOnClickOutside)', false)
    };
  },
  modalHeader: function modalHeader() {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        titleOnly = _ref3.titleOnly;

    return {
      label: (0, _addonKnobs.text)('Optional Label (label in <ModalHeader>)', 'Optional Label'),
      title: (0, _addonKnobs.text)('Optional title (title in <ModalHeader>)', titleOnly ? "\n      Passive modal title as the message. Should be direct and 3 lines or less.\n    ".trim() : 'Example'),
      iconDescription: (0, _addonKnobs.text)('Close icon description (iconDescription in <ModalHeader>)', 'Close'),
      buttonOnClick: (0, _addonActions.action)('buttonOnClick'),
      preventCloseOnClickOutside: (0, _addonKnobs.boolean)('Prevent closing on click outside of modal (preventCloseOnClickOutside)', false)
    };
  },
  modalBody: function modalBody() {
    return {
      hasScrollingContent: (0, _addonKnobs.boolean)('Modal contains scrollable content (hasScrollingContent)', true),
      'aria-label': (0, _addonKnobs.text)('ARIA label for content', 'Example modal content')
    };
  },
  modalFooter: function modalFooter() {
    return {
      primaryButtonText: (0, _addonKnobs.text)('Primary button text (primaryButtonText in <ModalFooter>)', 'Save'),
      primaryButtonDisabled: (0, _addonKnobs.boolean)('Primary button disabled (primaryButtonDisabled in <ModalFooter>)', false),
      secondaryButtonText: (0, _addonKnobs.text)('Secondary button text (secondaryButtonText in <ModalFooter>)', ''),
      onRequestClose: (0, _addonActions.action)('onRequestClose'),
      onRequestSubmit: (0, _addonActions.action)('onRequestSubmit')
    };
  }
};

var scrollingContent = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue vitae tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla facilisi. Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum.", ' '), /*#__PURE__*/_react.default.createElement("p", null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue vitae tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla facilisi. Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum.", ' '), /*#__PURE__*/_react.default.createElement("p", null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue vitae tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla facilisi. Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum.", ' '), /*#__PURE__*/_react.default.createElement("h3", null, "Lorem ipsum"), /*#__PURE__*/_react.default.createElement("p", null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue vitae tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla facilisi. Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum.", ' '), /*#__PURE__*/_react.default.createElement("p", null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue vitae tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla facilisi. Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum.", ' '), /*#__PURE__*/_react.default.createElement("p", null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue vitae tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla facilisi. Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum.", ' '), /*#__PURE__*/_react.default.createElement("p", null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean id accumsan augue. Phasellus consequat augue vitae tellus tincidunt posuere. Curabitur justo urna, consectetur vel elit iaculis, ultrices condimentum risus. Nulla facilisi. Etiam venenatis molestie tellus. Quisque consectetur non risus eu rutrum.", ' '));
/**
 * Simple state manager for modals.
 */


var ModalStateManager = function ModalStateManager(_ref4) {
  var LauncherContent = _ref4.renderLauncher,
      ModalContent = _ref4.children;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !ModalContent || typeof document === 'undefined' ? null : /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_react.default.createElement(ModalContent, {
    open: open,
    setOpen: setOpen
  }), document.body), LauncherContent && /*#__PURE__*/_react.default.createElement(LauncherContent, {
    open: open,
    setOpen: setOpen
  }));
};

var _default = {
  title: 'ComposedModal',
  decorators: [_addonKnobs.withKnobs],
  parameters: {
    component: _ComposedModal.default,
    subcomponents: {
      ModalHeader: _ComposedModal.ModalHeader,
      ModalBody: _ComposedModal.ModalBody,
      ModalFooter: _ComposedModal.ModalFooter
    },
    docs: {
      page: _ComposedModal2.default
    }
  }
};
exports.default = _default;

var UsingHeaderFooterProps = function UsingHeaderFooterProps() {
  var _props$composedModalW = props.composedModalWithLauncher(),
      size = _props$composedModalW.size,
      rest = _objectWithoutProperties(_props$composedModalW, ["size"]);

  var _props$modalBody = props.modalBody(),
      hasScrollingContent = _props$modalBody.hasScrollingContent,
      bodyProps = _objectWithoutProperties(_props$modalBody, ["hasScrollingContent"]);

  return /*#__PURE__*/_react.default.createElement(_ComposedModal.default, _extends({}, rest, {
    danger: true,
    size: size || undefined
  }), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalHeader, props.modalHeader()), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalBody, _extends({}, bodyProps, {
    "aria-label": hasScrollingContent ? 'Modal content' : undefined
  }), /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(prefix, "--modal-content__text")
  }, "Please see the \"With Trigger Button\" storybook example for a demo of this functionality."), /*#__PURE__*/_react.default.createElement("br", null), hasScrollingContent && scrollingContent), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalFooter, props.modalFooter()));
};

exports.UsingHeaderFooterProps = UsingHeaderFooterProps;
UsingHeaderFooterProps.storyName = 'Using Header / Footer Props';
UsingHeaderFooterProps.parameters = {
  info: {
    text: "\n        Composed Modal allows you to create your own modal with just the parts you need. The ComposedModal element provides the state management for open/close, as well as passes the ModalHeader a prop to close the modal (with the close button).\n\n        The interior components - ModalHeader / ModalBody / ModalFooter - are all container elements that will render any children you add in, wrapped in the appropriate CSS classes.\n\n        The Modal Header / Modal Footer come with some built in props to let you accelerate towards standard Carbon modal UI. If there are customizations you need to do, see the next example of just using the interior components as containers.\n      "
  }
};

var UsingChildNodes = function UsingChildNodes() {
  var _props$composedModal = props.composedModal(),
      size = _props$composedModal.size,
      rest = _objectWithoutProperties(_props$composedModal, ["size"]);

  var _props$modalBody2 = props.modalBody(),
      hasScrollingContent = _props$modalBody2.hasScrollingContent,
      bodyProps = _objectWithoutProperties(_props$modalBody2, ["hasScrollingContent"]);

  return /*#__PURE__*/_react.default.createElement(_ComposedModal.default, _extends({}, rest, {
    size: size || undefined
  }), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalHeader, props.modalHeader(), /*#__PURE__*/_react.default.createElement("h1", null, "Testing")), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalBody, _extends({}, bodyProps, {
    "aria-label": hasScrollingContent ? 'Modal content' : undefined
  }), /*#__PURE__*/_react.default.createElement("p", null, "Please see the \"With Trigger Button\" storybook example for a demo of this functionality."), /*#__PURE__*/_react.default.createElement("br", null), hasScrollingContent && scrollingContent), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalFooter, null, /*#__PURE__*/_react.default.createElement(_Button.default, {
    kind: "secondary"
  }, "Cancel"), /*#__PURE__*/_react.default.createElement(_Button.default, {
    kind: props.composedModal().danger ? 'danger' : 'primary'
  }, "Save")));
};

exports.UsingChildNodes = UsingChildNodes;
UsingChildNodes.storyName = 'Using child nodes';
UsingChildNodes.parameters = {
  info: {
    text: "\n        Alternatively, you can just use the Modal components as wrapper elements and figure the children out yourself. We do suggest for the header you utilize the built in props for label and title though, for the footer it's mostly a composed element so creating the two buttons yourself (using the Button component) is probably the most straight-forward pattern.\n      "
  }
};

var TitleOnly = function TitleOnly() {
  var _props$composedModal2 = props.composedModal({
    titleOnly: true
  }),
      size = _props$composedModal2.size,
      rest = _objectWithoutProperties(_props$composedModal2, ["size"]);

  return /*#__PURE__*/_react.default.createElement(_ComposedModal.default, _extends({}, rest, {
    size: size || undefined
  }), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalHeader, props.modalHeader({
    titleOnly: true
  })), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalBody, null), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalFooter, props.modalFooter()));
};

exports.TitleOnly = TitleOnly;
TitleOnly.storyName = 'Title only';
TitleOnly.parameters = {
  info: {
    text: "\n      In \"small\" and \"xs\" modals size, the title is allowed to span multiple lines and be used for the main message.\n      It should be less than 3 lines of text. If more room is required then use the standard body copy format.\n    "
  }
};

var WithTriggerButton = function WithTriggerButton() {
  var _props$composedModalW2 = props.composedModalWithLauncher(),
      size = _props$composedModalW2.size,
      rest = _objectWithoutProperties(_props$composedModalW2, ["size"]);

  var _props$modalBody3 = props.modalBody(),
      hasScrollingContent = _props$modalBody3.hasScrollingContent,
      bodyProps = _objectWithoutProperties(_props$modalBody3, ["hasScrollingContent"]);

  return /*#__PURE__*/_react.default.createElement(ModalStateManager, {
    renderLauncher: function renderLauncher(_ref5) {
      var setOpen = _ref5.setOpen;
      return /*#__PURE__*/_react.default.createElement(_Button.default, {
        onClick: function onClick() {
          return setOpen(true);
        }
      }, "Launch composed modal");
    }
  }, function (_ref6) {
    var open = _ref6.open,
        setOpen = _ref6.setOpen;
    return /*#__PURE__*/_react.default.createElement(_ComposedModal.default, _extends({}, rest, {
      open: open,
      size: size || undefined,
      onClose: function onClose() {
        return setOpen(false);
      }
    }), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalHeader, props.modalHeader()), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalBody, _extends({}, bodyProps, {
      "aria-label": hasScrollingContent ? 'Modal content' : undefined
    }), hasScrollingContent && scrollingContent), /*#__PURE__*/_react.default.createElement(_ComposedModal.ModalFooter, props.modalFooter()));
  });
};

exports.WithTriggerButton = WithTriggerButton;
WithTriggerButton.storyName = 'Example usage with trigger button';
WithTriggerButton.parameters = {
  info: {
    text: "\n        An example ComposedModal with a trigger button\n      "
  }
};