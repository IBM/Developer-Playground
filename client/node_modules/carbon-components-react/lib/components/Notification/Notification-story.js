"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Inline = exports.Toast = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _addonActions = require("@storybook/addon-actions");

var _addonKnobs = require("@storybook/addon-knobs");

var _Notification = require("../Notification");

var _Notification2 = _interopRequireDefault(require("./Notification.mdx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var kinds = {
  'Error (error)': 'error',
  'Info (info)': 'info',
  'Info square (info-square)': 'info-square',
  'Success (success)': 'success',
  'Warning (warning)': 'warning',
  'Warning (warning-alt)': 'warning-alt'
};

var notificationProps = function notificationProps() {
  return {
    kind: (0, _addonKnobs.select)('The notification kind (kind)', kinds, 'info'),
    lowContrast: (0, _addonKnobs.boolean)('Use low contrast variant (lowContrast)', false),
    role: (0, _addonKnobs.text)('ARIA role (role)', 'alert'),
    title: (0, _addonKnobs.text)('Title (title)', 'Notification title'),
    subtitle: (0, _addonKnobs.text)('Subtitle (subtitle)', 'Subtitle text goes here.'),
    iconDescription: (0, _addonKnobs.text)('Icon description (iconDescription)', 'describes the close button'),
    statusIconDescription: (0, _addonKnobs.text)('Status icon description (statusIconDescription)', 'describes the status icon'),
    hideCloseButton: (0, _addonKnobs.boolean)('Hide close button (hideCloseButton)', false),
    onCloseButtonClick: (0, _addonActions.action)('onCloseButtonClick')
  };
};

var _default = {
  title: 'Notifications',
  decorators: [_addonKnobs.withKnobs],
  parameters: {
    docs: {
      page: _Notification2.default
    },
    subcomponents: {
      ToastNotification: _Notification.ToastNotification,
      InlineNotification: _Notification.InlineNotification
    }
  }
};
exports.default = _default;

var Toast = function Toast() {
  return /*#__PURE__*/_react.default.createElement(_Notification.ToastNotification, _extends({}, notificationProps(), {
    caption: (0, _addonKnobs.text)('Caption (caption)', '00:00:00 AM'),
    style: {
      minWidth: '30rem',
      marginBottom: '.5rem'
    }
  }));
};

exports.Toast = Toast;

var Inline = function Inline() {
  return /*#__PURE__*/_react.default.createElement(_Notification.InlineNotification, _extends({}, notificationProps(), {
    actions: /*#__PURE__*/_react.default.createElement(_Notification.NotificationActionButton, {
      onClick: (0, _addonActions.action)('NotificationActionButton onClick')
    }, (0, _addonKnobs.text)('Action (NotificationActionButton > children)', 'Action'))
  }));
};

exports.Inline = Inline;
Inline.storyName = 'inline';