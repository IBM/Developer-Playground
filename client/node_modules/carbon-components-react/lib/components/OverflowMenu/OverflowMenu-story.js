"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomTrigger = exports.WithLinks = exports.Basic = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _addonActions = require("@storybook/addon-actions");

var _addonKnobs = require("@storybook/addon-knobs");

var _storybookReadme = require("storybook-readme");

var _OverflowMenu = _interopRequireDefault(require("../OverflowMenu"));

var _OverflowMenu2 = require("./OverflowMenu");

var _OverflowMenuItem = _interopRequireDefault(require("../OverflowMenuItem"));

var _README = _interopRequireDefault(require("./README.md"));

var _OverflowMenu3 = _interopRequireDefault(require("./OverflowMenu.mdx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var directions = {
  'Bottom of the trigger button (bottom)': 'bottom',
  'Top of the trigger button (top)': 'top'
};
var sizes = {
  'Extra large size (xl)': 'xl',
  'Default size': undefined,
  'Small size (sm)': 'sm'
};
var props = {
  menu: function menu() {
    return {
      direction: (0, _addonKnobs.select)('Menu direction (direction)', directions, 'bottom'),
      ariaLabel: (0, _addonKnobs.text)('ARIA label (ariaLabel)', 'Menu'),
      iconDescription: (0, _addonKnobs.text)('Icon description (iconDescription)', ''),
      flipped: (0, _addonKnobs.boolean)('Flipped (flipped)', false),
      light: (0, _addonKnobs.boolean)('Light (light)', false),
      selectorPrimaryFocus: (0, _addonKnobs.text)('Primary focus element selector (selectorPrimaryFocus)', ''),
      size: (0, _addonKnobs.select)('Size (size)', sizes, undefined) || undefined,
      onClick: (0, _addonActions.action)('onClick'),
      onFocus: (0, _addonActions.action)('onFocus'),
      onKeyDown: (0, _addonActions.action)('onKeyDown'),
      onClose: (0, _addonActions.action)('onClose'),
      onOpen: (0, _addonActions.action)('onOpen')
    };
  },
  menuItem: function menuItem() {
    return {
      className: 'some-class',
      disabled: (0, _addonKnobs.boolean)('Disabled (disabled)', false),
      requireTitle: (0, _addonKnobs.boolean)('Use hover over text for menu item (requireTitle)', false),
      onClick: (0, _addonActions.action)('onClick')
    };
  }
};
_OverflowMenu.default.displayName = 'OverflowMenu';
var _default = {
  title: 'OverflowMenu',
  decorators: [_addonKnobs.withKnobs],
  component: _OverflowMenu2.OverflowMenu,
  subcomponents: {
    OverflowMenuItem: _OverflowMenuItem.default
  },
  parameters: {
    docs: {
      page: _OverflowMenu3.default
    }
  }
};
exports.default = _default;
var Basic = (0, _storybookReadme.withReadme)(_README.default, function () {
  return /*#__PURE__*/_react.default.createElement(_OverflowMenu.default, props.menu(), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, props.menuItem(), {
    itemText: "Option 1"
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, props.menuItem(), {
    itemText: "Option 2 is an example of a really long string and how we recommend handling this",
    requireTitle: true,
    title: "Custom tooltip title"
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, props.menuItem(), {
    itemText: "Option 3"
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, props.menuItem(), {
    itemText: "Option 4"
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, props.menuItem(), {
    requireTitle: true,
    itemText: "Danger option",
    hasDivider: true,
    isDelete: true
  })));
});
exports.Basic = Basic;
Basic.storyName = 'basic';
Basic.parameters = {
  info: {
    text: "\n        Overflow Menu is used when additional options are available to the user and there is a space constraint.\n        Create Overflow Menu Item components for each option on the menu.\n      "
  }
};
var WithLinks = (0, _storybookReadme.withReadme)(_README.default, function () {
  return /*#__PURE__*/_react.default.createElement(_OverflowMenu.default, props.menu(), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, _objectSpread(_objectSpread({}, props.menuItem()), {}, {
    href: 'https://www.ibm.com'
  }), {
    itemText: "Option 1"
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, _objectSpread(_objectSpread({}, props.menuItem()), {}, {
    href: 'https://www.ibm.com'
  }), {
    itemText: "Option 2 is an example of a really long string and how we recommend handling this",
    requireTitle: true
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, _objectSpread(_objectSpread({}, props.menuItem()), {}, {
    href: 'https://www.ibm.com'
  }), {
    itemText: "Option 3"
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, _objectSpread(_objectSpread({}, props.menuItem()), {}, {
    href: 'https://www.ibm.com'
  }), {
    itemText: "Option 4"
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, _objectSpread(_objectSpread({}, props.menuItem()), {}, {
    href: 'https://www.ibm.com'
  }), {
    itemText: "Danger option",
    hasDivider: true,
    isDelete: true
  })));
});
exports.WithLinks = WithLinks;
WithLinks.storyName = 'with links';
WithLinks.parameters = {
  info: {
    text: "\n        Overflow Menu is used when additional options are available to the user and there is a space constraint.\n        Create Overflow Menu Item components for each option on the menu.\n\n        When given `href` props, menu items render as <a> tags to facilitate usability.\n      "
  }
};
var CustomTrigger = (0, _storybookReadme.withReadme)(_README.default, function () {
  return /*#__PURE__*/_react.default.createElement(_OverflowMenu.default, _objectSpread(_objectSpread({}, props.menu()), {}, {
    ariaLabel: null,
    style: {
      width: 'auto'
    },
    // eslint-disable-next-line react/display-name
    renderIcon: function renderIcon() {
      return /*#__PURE__*/_react.default.createElement("div", {
        style: {
          padding: '0 1rem'
        }
      }, "Menu");
    }
  }), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, props.menuItem(), {
    itemText: "Option 1"
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, props.menuItem(), {
    itemText: "Option 2 is an example of a really long string and how we recommend handling this",
    requireTitle: true
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, props.menuItem(), {
    itemText: "Option 3"
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, props.menuItem(), {
    itemText: "Option 4"
  })), /*#__PURE__*/_react.default.createElement(_OverflowMenuItem.default, _extends({}, props.menuItem(), {
    itemText: "Danger option",
    hasDivider: true,
    isDelete: true
  })));
});
exports.CustomTrigger = CustomTrigger;
CustomTrigger.storyName = 'custom trigger';
CustomTrigger.parameters = {
  info: {
    text: "\n        Sometimes you just want to render something other than an icon\n      "
  }
};