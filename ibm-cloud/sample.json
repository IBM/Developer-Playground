{
  "allApis": [
    {
      "apiName": "list_vpcs",
      "description": "This request lists all VPCs in the region. A VPC is a virtual network that belongs to an\naccount and provides logical isolation from other networks. A VPC is made up of resources in\none or more zones. VPCs are regional, and each VPC can contain resources in multiple zones\nin a region.",
      "title": "List all VPCs",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.list_vpcs()"
        }
      ]
    },
    {
      "apiName": "create_vpc",
      "description": "This request creates a new VPC from a VPC prototype object. The prototype object is\nstructured in the same way as a retrieved VPC, and contains the information necessary to\ncreate the new VPC.",
      "title": "Create a VPC",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "resource_group_identity_model = {}\nresource_group_identity_model['id'] = resource_group_id\n\naddress_prefix_management = 'manual'\nclassic_access = False\nname = 'my-vpc'\nresource_group = resource_group_identity_model\n\nresponse = service.create_vpc(\n    address_prefix_management=address_prefix_management,\n    classic_access=classic_access,\n    name=name,\n    resource_group=resource_group,\n)"
        }
      ]
    },
    {
      "apiName": "delete_vpc",
      "description": "This request deletes a VPC. This operation cannot be reversed. For this request to\nsucceed, the VPC must not contain any instances, subnets, or public gateways. All\nsecurity groups and network ACLs associated with the VPC are automatically deleted.\nAll flow log collectors with `auto_delete` set to `true` targeting the VPC or any\nresource in the VPC are automatically deleted.",
      "title": "Delete a VPC",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.delete_vpc(id)"
        }
      ]
    },
    {
      "apiName": "get_vpc",
      "description": "This request retrieves a single VPC specified by the identifier in the URL.",
      "title": "Retrieve a VPC",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.get_vpc(id)"
        }
      ]
    },
    {
      "apiName": "update_vpc",
      "description": "This request updates a VPC's name.",
      "title": "Update a VPC",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.update_vpc(\n    id,\n    name='my-vpc',\n)"
        }
      ]
    },
    {
      "apiName": "get_vpc_default_network_acl",
      "description": "This request retrieves the default network ACL for the VPC specified by the identifier in\nthe URL. The default network ACL is applied to any new subnets in the VPC which do not\nspecify a network ACL.",
      "title": "Retrieve a VPC's default network ACL",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.get_vpc_default_network_acl(id)"
        }
      ]
    },
    {
      "apiName": "get_vpc_default_routing_table",
      "description": "This request retrieves the default routing table for the VPC specified by the identifier in\nthe URL. The default routing table is associated with any subnets in the VPC which have not\nbeen explicitly associated with a user-defined routing table.",
      "title": "Retrieve a VPC's default routing table",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "default_routing_table = vpc_service.get_vpc_default_routing_table(\n  id=vpcId).get_result()"
        }
      ]
    },
    {
      "apiName": "get_vpc_default_security_group",
      "description": "This request retrieves the default security group for the VPC specified by the identifier in\nthe URL. The default security group is applied to any new network interfaces in the VPC that\ndo not specify a security group.",
      "title": "Retrieve a VPC's default security group",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.get_vpc_default_security_group(id)"
        }
      ]
    },
    {
      "apiName": "list_vpc_address_prefixes",
      "description": "This request lists all address pool prefixes for a VPC.",
      "title": "List all address prefixes for a VPC",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.list_vpc_address_prefixes(vpc_id)"
        }
      ]
    },
    {
      "apiName": "create_vpc_address_prefix",
      "description": "This request creates a new prefix from a prefix prototype object. The prototype object is\nstructured in the same way as a retrieved prefix, and contains the information necessary to\ncreate the new prefix.",
      "title": "Create an address prefix for a VPC",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "zone_identity_model = {}\nzone_identity_model['name'] = 'us-south-1'\ncidr = '10.0.0.0/24'\nzone = zone_identity_model\nis_default = True\nname = 'my-address-prefix'\n\nresponse = service.create_vpc_address_prefix(\n    vpc_id,\n    cidr,\n    zone,\n    is_default=is_default,\n    name=name,\n)"
        }
      ]
    },
    {
      "apiName": "delete_vpc_address_prefix",
      "description": "This request deletes a prefix. This operation cannot be reversed. The request will fail if\nany subnets use addresses from this prefix.",
      "title": "Delete an address prefix",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.delete_vpc_address_prefix(vpc_id, id)"
        }
      ]
    },
    {
      "apiName": "get_vpc_address_prefix",
      "description": "This request retrieves a single prefix specified by the identifier in the URL.",
      "title": "Retrieve an address prefix",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.get_vpc_address_prefix(vpc_id, id)"
        }
      ]
    },
    {
      "apiName": "update_vpc_address_prefix",
      "description": "This request updates a prefix with the information in a provided prefix patch. The prefix\npatch object is structured in the same way as a retrieved prefix and contains only the\ninformation to be updated.",
      "title": "Update an address prefix",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "is_default = False\nname = 'my-address-prefix'\nresponse = service.update_vpc_address_prefix(\n    vpc_id,\n    id,\n    is_default=is_default,\n    name=name,\n)"
        }
      ]
    },
    {
      "apiName": "list_vpc_routes",
      "description": "This request lists all routes in the VPC's default routing table. Each route is\nzone-specific and directs any packets matching its destination CIDR block to a `next_hop`\nIP address. The most specific route matching a packet's destination will be used. If\nmultiple equally-specific routes exist, traffic will be distributed across them.",
      "title": "List all routes in a VPC's default routing table",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.list_vpc_routes(vpc_id, zone_name=zone_name)"
        }
      ]
    },
    {
      "apiName": "create_vpc_route",
      "description": "This request creates a new route in the VPC's default routing table. The route prototype\nobject is structured in the same way as a retrieved route, and contains the information\nnecessary to create the new route. The request will fail if the new route will cause a loop.",
      "title": "Create a route in a VPC's default routing table",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "zone_identity_model = {}\nzone_identity_model['name'] = 'us-south-1'\n\nroute_next_hop_prototype_model = {}\nroute_next_hop_prototype_model['address'] = '192.168.3.4'\n\ndestination = '10.168.10.0/24'\nzone = zone_identity_model\nname = 'my-route'\nnext_hop = route_next_hop_prototype_model\n\nresponse = service.create_vpc_route(\n    vpc_id,\n    destination,\n    zone,\n    name=name,\n    next_hop=next_hop,\n)"
        }
      ]
    },
    {
      "apiName": "delete_vpc_route",
      "description": "This request deletes a route. This operation cannot be reversed.",
      "title": "Delete a VPC route",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.delete_vpc_route(vpc_id, id)"
        }
      ]
    },
    {
      "apiName": "get_vpc_route",
      "description": "This request retrieves a single route specified by the identifier in the URL.",
      "title": "Retrieve a VPC route",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.get_vpc_route(vpc_id, id)"
        }
      ]
    },
    {
      "apiName": "update_vpc_route",
      "description": "This request updates a route with the information in a provided route patch. The route patch\nobject is structured in the same way as a retrieved route and contains only the information\nto be updated.",
      "title": "Update a VPC route",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "response = service.update_vpc_route(\n    vpc_id,\n    id,\n    name='my-vpc-route',\n)"
        }
      ]
    },
    {
      "apiName": "list_vpc_routing_tables",
      "description": "This request lists all user-defined routing tables for a VPC.  Each subnet in a VPC is\nassociated with a routing table, which controls delivery of packets sent on that subnet\naccording to the action of the most specific matching route in the table.  If multiple\nequally-specific routes exist, traffic will be distributed across them.  If no routes match,\ndelivery will be controlled by the system's built-in routes.",
      "title": "List all routing tables for a VPC",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "routing_table_collection = vpc_service.list_vpc_routing_tables(\n    vpc_id=vpcId).get_result()"
        }
      ]
    },
    {
      "apiName": "create_vpc_routing_table",
      "description": "This request creates a user-defined routing table from a routing table prototype object.\nThe prototype object is structured in the same way as a retrieved routing table, and\ncontains the information necessary to create the new routing table.",
      "title": "Create a routing table for a VPC",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "route_next_hop_prototype_model = {'address': '192.168.3.4'}\n\nzone_identity_model = { 'name': zoneName }\n\nroute_prototype_model = {\n    'action': 'delegate',\n    'next_hop': route_next_hop_prototype_model,\n    'name': 'my-route',\n    'destination': '192.168.3.0/24',\n    'zone': zone_identity_model\n}\n\ncreate_vpc_routing_table_response = vpc_service.create_vpc_routing_table(\n    vpc_id,\n    name='my-routing-table',\n    routes=[route_prototype_model])\n\nrouting_table = create_vpc_routing_table_response.get_result()"
        }
      ]
    },
    {
      "apiName": "delete_vpc_routing_table",
      "description": "This request deletes a routing table.  A routing table cannot be deleted if it is\nassociated with any subnets in the VPC. Additionally, a VPC's default routing table\ncannot be deleted. This operation cannot be reversed.",
      "title": "Delete a VPC routing table",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "delete_vpc_routing_table_route_response =\n  vpc_service.delete_vpc_routing_table_route(\n    vpc_id, routing_table_id, id)"
        }
      ]
    },
    {
      "apiName": "get_vpc_routing_table",
      "description": "This request retrieves a single routing table specified by the identifier in the URL.",
      "title": "Retrieve a VPC routing table",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "get_vpc_routing_table_response = vpc_service.get_vpc_routing_table(\n    vpc_id=vpcId, id=routingTableId)"
        }
      ]
    },
    {
      "apiName": "update_vpc_routing_table",
      "description": "This request updates a routing table with the information in a provided routing table patch.\nThe patch object is structured in the same way as a retrieved table and contains only the\ninformation to be updated.",
      "title": "Update a VPC routing table",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "routing_table_patch_model = {\n    'name': 'my-routing-table',\n}\n\nupdate_vpc_routing_table_response = vpc_service.update_vpc_routing_table(\n    vpc_id,\n    id,\n    routing_table_patch=routing_table_patch_model)\n\nrouting_table = update_vpc_routing_table_response.get_result()"
        }
      ]
    },
    {
      "apiName": "list_vpc_routing_table_routes",
      "description": "This request lists all routes in a VPC routing table. If a subnet has been associated with\nthis routing table, delivery of packets sent on a subnet is performed according to the\naction of the most specific matching route in the table (provided the subnet and route are\nin the same zone). If multiple equally-specific routes exist, traffic will be distributed\nacross them. If no routes match, delivery will be controlled by the system's built-in\nroutes.",
      "title": "List all routes in a VPC routing table",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "list_vpc_routing_table_routes_response = vpc_service.list_vpc_routing_table_routes(\n    vpc_id,\n    routing_table_id)\n\nroute_collection = list_vpc_routing_table_routes_response.get_result()"
        }
      ]
    },
    {
      "apiName": "create_vpc_routing_table_route",
      "description": "This request creates a new VPC route from a VPC route prototype object. The prototype object\nis structured in the same way as a retrieved VPC route and contains the information\nnecessary to create the route.",
      "title": "Create a route in a VPC routing table",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "zone_identity_model = {'name': zoneName}\n\nroute_next_hop_prototype_model = {'address': '192.168.3.4'}\n\ncreate_vpc_routing_table_route_response =\n  vpc_service.create_vpc_routing_table_route(\n    vpc_id,\n    routing_table_id,\n    destination='192.168.3.0/24',\n    zone=zone_identity_model,\n    action='delegate',\n    next_hop=route_next_hop_prototype_model,\n    name='my-route')\n\nroute = create_vpc_routing_table_route_response.get_result()"
        }
      ]
    },
    {
      "apiName": "delete_vpc_routing_table_route",
      "description": "This request deletes a VPC route. This operation cannot be reversed.",
      "title": "Delete a VPC routing table route",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "delete_vpc_routing_table_route_response =\n  vpc_service.delete_vpc_routing_table_route(\n    vpc_id, routing_table_id, id)"
        }
      ]
    },
    {
      "apiName": "get_vpc_routing_table_route",
      "description": "This request retrieves a single VPC route specified by the identifier in the URL path.",
      "title": "Retrieve a VPC routing table route",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "get_vpc_routing_table_route_response = vpc_service.get_vpc_routing_table_route(\n    vpc_id, routing_table_id, id)"
        }
      ]
    },
    {
      "apiName": "update_vpc_routing_table_route",
      "description": "This request updates a VPC route with the information provided in a route patch\nobject. The patch object is structured in the same way as a retrieved VPC route\nand needs to contain only the information to be updated.",
      "title": "Update a VPC routing table route",
      "codeSnippets": [
        {
          "language": "python",
          "codeSnippet": "route_patch_model = {'name': 'my-route'}\nupdate_vpc_routing_table_route_response =\n  vpc_service.update_vpc_routing_table_route(\n    vpc_id,\n    routing_table_id,\n    id,\n    route_patch=route_patch_model)"
        }
      ]
    }
  ],
  "requiredSDK": [
    "ibm-vpc>=0.7.0"
  ]
}